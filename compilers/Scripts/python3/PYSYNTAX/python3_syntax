### ============================================%   Python3的六个标准数据类型
Number(数字), String(字符串), Tuple(元组);
List(列表)  , Dictionary(字典), Set(集合);


### ===============================================================% Number数字

_________________________________________________bool()
True
False

__________________________________________________int()
int()       整型(Int),通常被称为是整型或整数，
            是正或负整数，不带小数点
_________________________________________________float()
float()     浮点型(floating point real values),
            浮点型由整数部分与小数部分组成，
            浮点型也可以使用科学计数法表示
            ( 2.5e2 = 2.5 x 10^2 )         
_______________________________________________complex()  
complex()   复数(complex numbers),
            复数由实数部分和虚数部分构成，
            可以用a + bj,或者complex(a,b)表示， 
            复数的实部a和虚部b都是浮点型。
          

            
            
            
### ==============================================================% String字符串
% (单引号' 或双引号 " 括起来，同时使用反斜杠 \ 转义特殊字符)
% 字符串的截取的语法格式如下：
变量[头下标:尾下标]
索引值以 0 为开始值，-1 为从末尾的开始位置
加号 + 是字符串的连接符， 星号 * 表示复制当前字符串，紧跟的数字为复制的次数

___________________________________________________________
#!/usr/bin/python3
 
str = 'Runoob'
 
print (str)          # 输出字符串
print (str[0:-1])    # 输出第一个到倒数第二个的所有字符
print (str[0])       # 输出字符串第一个字符
print (str[2:5])     # 输出从第三个开始到第五个的字符
print (str[2:])      # 输出从第三个开始的后的所有字符
print (str * 2)      # 输出字符串两次
print (str + "TEST") # 连接字符串
___________________________________________________________
1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。
2、字符串可以用+运算符连接在一起，用*运算符重复。
3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。
4、Python中的字符串不能改变。

% Unicode 字符串
Python 中定义一个 Unicode 字符串和定义一个普通字符串一样简单：
>>> u'Hello World !'
u'Hello World !'


% Python三引号（triple quotes）
    >>> unix = '''OS_kernel
    ... FreeBSD'''
    >>> print(unix)
    OS_kernel
    FreeBSD
    >>> unix
'OS_kernel\nFreeBSD'

### =================================================================% List列表
列表是写在方括号 [] 之间、用逗号分隔开的元素列表。
和字符串一样，列表同样可以被索引和截取，
列表被截取后返回一个包含所需元素的新列表。 

列表截取的语法格式如下：
% 变量[头下标:尾下标]
索引值以 0 为开始值，-1 为从末尾的开始位置。
加号 + 是列表连接运算符，星号 * 是重复操作。如下实例：
___________________________________________________________
#!/usr/bin/python3
 
list = [ 'abcd', 786 , 2.23, 'runoob', 70.2 ]
tinylist = [123, 'runoob']
 
print (list)            # 输出完整列表
print (list[0])         # 输出列表第一个元素
print (list[1:3])       # 从第二个开始输出到第三个元素
print (list[2:])        # 输出从第三个元素开始的所有元素
print (tinylist * 2)    # 输出两次列表
print (list + tinylist) # 连接列表

___________________________________________________________
% List 内置了有很多方法，例如 append()、pop() 等等，这在后面会讲到。
1、List写在方括号之间，元素用逗号隔开。
2、和字符串一样，list可以被索引和切片。
3、List可以使用+操作符进行拼接。
4、List中的元素是可以改变的。




### =================================================================% Tuple元组
Tuple（元组）
元组（tuple）与列表类似，不同之处在于元组的元素不能修改。
元组写在小括号 () 里，元素之间用逗号隔开。
元组中的元素类型也可以不相同：
___________________________________________________________
#!/usr/bin/python3
 
tuple = ( 'abcd', 786 , 2.23, 'runoob', 70.2  )
tinytuple = (123, 'runoob')
 
print (tuple)             # 输出完整元组
print (tuple[0])          # 输出元组的第一个元素
print (tuple[1:3])        # 输出从第二个元素开始到第三个元素
print (tuple[2:])         # 输出从第三个元素开始的所有元素
print (tinytuple * 2)     # 输出两次元组
print (tuple + tinytuple) # 连接元组

___________________________________________________________
元组与字符串类似，
可以被索引且下标索引从0开始，-1 为从末尾开始的位置。
也可以进行截取（看上面，这里不再赘述）。
其实，可以把字符串看作一种特殊的元组。 
>>>tup = (1, 2, 3, 4, 5, 6)
>>> print(tup[0])
1
>>> print(tup[1:5])
(2, 3, 4, 5)
>>> tup[0] = 11  # 修改元组元素的操作是非法的
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>>


___________________________________________________________
虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。
构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则：
tup1 = ()    # 空元组
tup2 = (20,) # 一个元素，需要在元素后添加逗号
string、list 和 tuple 都属于 sequence（序列）。

1、与字符串一样，元组的元素不能修改。
2、元组也可以被索引和切片，方法一样。
3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。
4、元组也可以使用+操作符进行拼接。

### ==================================================================% Set集合
集合（set）是由一个或数个形态各异的大小整体组成的，
构成集合的事物或对象称作元素或是成员。
基本功能是进行成员关系测试和删除重复元素。
可以使用大括号 { } 或者 set() 函数创建集合，
注意：创建一个空集合必须用 set() 而不是 { }，
因为 { } 是用来创建一个空字典。
% 创建格式：

parame = {value01,value02,...}
或者
set(value)

___________________________________________________________
#!/usr/bin/python3
 
student = {'Tom', 'Jim', 'Mary', 'Tom', 'Jack', 'Rose'} 
print(student)   # 输出集合，重复的元素被自动去掉
 
# 成员测试
if 'Rose' in student :
    print('Rose 在集合中')
else :
    print('Rose 不在集合中')
 
 
# set可以进行集合运算
a = set('abracadabra')
b = set('alacazam')

### ============================================================% Dictionary字典
字典（dictionary）是Python中另一个非常有用的内置数据类型。
列表是有序的对象集合，字典是无序的对象集合。
两者之间的区别在于：字典当中的元素是通过键来存取的，
而不是通过偏移存取。
字典是一种映射类型，字典用 { } 标识，
它是一个无序的 键(key) : 值(value) 的集合。
键(key)必须使用不可变类型。
在同一个字典中，键(key)必须是唯一的。
___________________________________________________________
#!/usr/bin/python3
dict = {}
dict['one'] = "1 - 菜鸟教程"
dict[2]     = "2 - 菜鸟工具"
tinydict = {'name': 'runoob','code':1, 'site': 'www.runoob.com'}
print (dict['one'])       # 输出键为 'one' 的值
print (dict[2])           # 输出键为 2 的值
print (tinydict)          # 输出完整的字典
print (tinydict.keys())   # 输出所有键
print (tinydict.values()) # 输出所有值


%另外，字典类型也有一些内置的函数，例如clear()、keys()、values()等。
注意：
    1、字典是一种映射类型，它的元素是键值对。
    2、字典的关键字必须为不可变类型，且不能重复。
    3、创建空字典使用 { }。


### ============================================================% python3关键字
import    except    lambda    assert    continue
global    print     exec      break     try
if        in        else      elif      for
while     and       or        not       None
def       pass      class     return  

% 关键字end可以用于将结果输出到同一行，或者在输出的末尾添加不同的字符，实例如下：
#!/usr/bin/python3 
# Fibonacci series: 斐波纳契数列
# 两个元素的总和确定了下一个数
a, b = 0, 1
while b < 1000:
    print(b, end=',')
    a, b = b, a+b
        
### ===============================================================% python3模块
import math
% 查看 math 查看包中的内容
>>> import math
>>> dir(math)



### ========================================================% python3字符串运算符
	+			;字符串连接
	*			;重复输出字符串
	[]			;通过索引获取字符串中字符
	[:]			;截取字符串中的一部分
	in			;成员运算符 - a="hjk", "h" in a,     >>>True
	not in		;成员运算符 - a="hjk", "h" not in a, >>>False
	r/R			;原始字符串 - >>> print(r'\n'),>>>\n; >>> print(R'\n'),>>>\n
	%			;格式字符串
    %c          格式化字符及其ASCII码
    %s          格式化字符串
    %d          格式化整数
    %u          格式化无符号整型
    %o          格式化无符号八进制数
    %x          格式化无符号十六进制数
    %X          格式化无符号十六进制数（大写）
    %f          格式化浮点数字，可指定小数点后的精度
    %e          用科学计数法格式化浮点数
    %E          作用同%e，用科学计数法格式化浮点数
    %g          %f和%e的简写
    %G          %f 和 %E 的简写
    %p          用十六进制数格式化变量的地址
% 格式化操作符辅助指令
    *           定义宽度或者小数点精度
    -           用做左对齐
    +           在正数前面显示加号( + )
    <sp>        在正数前面显示空格
    #           在八进制数前面显示零('0')，
                在十六进制前面显示'0x'或者'0X'(取决于用的是'x'还是'X')
    0           显示的数字前面填充'0'而不是默认的空格
    %           '%%'输出一个单一的'%'
    (var)       映射变量(字典参数)
    m.n.        m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)

### ============================================================% python3运算符
算术运算符; +, -, *, **, /, //, % 
比较运算符; ==, !=, >, <, >=, <=
赋值运算符; =, +=, -=, *=, /=, %=, **=, //=
位位运算符; &, |, ^, ~, <<, >>  
逻辑运算符; and, or, not
成员运算符; in, not in
身份运算符; is, is not



### ==============================================================% if for range
if condition_1:
    statement_block_1
elif condition_2:
    statement_block_2
else:
    statement_block_3

    
for <variable> in <sequence>:
    <statements>


>>>for i in range(5):
...     print(i)


>>>for i in range(-10, -100, -30) :
    print(i)


>>>a = ['Google', 'Baidu', 'Runoob', 'Taobao', 'QQ']
>>> for i in range(len(a)):
...     print(i, a[i])


>>>list(range(5))
[0, 1, 2, 3, 4]


### =============================================================% python3迭代器
迭代是Python最强大的功能之一，是访问集合元素的一种方式。
迭代器是一个可以记住遍历的位置的对象。
迭代器对象从集合的第一个元素开始访问，
直到所有的元素被访问完结束。迭代器只能往前不会后退。

迭代器有两个基本的方法：iter() 和 next()。
字符串，列表或元组对象都可用于创建迭代器：

>>>list=[1,2,3,4]
>>> it = iter(list)    # 创建迭代器对象
>>> print (next(it))   # 输出迭代器的下一个元素
1
>>> print (next(it))
2
>>>

% 迭代器对象可以使用常规for语句进行遍历：实例(Python 3.0+)
#!/usr/bin/python3
list=[1,2,3,4]
it = iter(list)    # 创建迭代器对象
for x in it:
    print (x, end=" ")
    
    
% 迭代器对象
#!/usr/bin/python3
 
import sys         # 引入 sys 模块
 
list=[1,2,3,4]
it = iter(list)    # 创建迭代器对象
 
while True:
    try:
        print (next(it))
    except StopIteration:
        sys.exit()


% 创建一个迭代器
把一个类作为一个迭代器使用需要在类中实现两个方法 __iter__() 与 __next__() 。
如果你已经了解的面向对象编程，就知道类都有一个构造函数，
Python 的构造函数为 __init__(), 它会在对象初始化的时候执行。
更多内容查阅：Python3 面向对象
__iter__() 方法返回一个特殊的迭代器对象， 
这个迭代器对象实现了 __next__() 方法并通过 StopIteration 异常标识迭代的完成。
__next__() 方法（Python 2 里是 next()）会返回下一个迭代器对象。
创建一个返回数字的迭代器，初始值为 1，逐步递增 1：
% 实例(Python 3.0+)
class MyNumbers:
  def __iter__(self):
    self.a = 1
    return self
  def __next__(self):
    x = self.a
    self.a += 1
    return x 
myclass = MyNumbers()
myiter = iter(myclass)
print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))




>>>StopIteration
% StopIteration 异常用于标识迭代的完成，
% 防止出现无限循环的情况，在 __next__() 方法中
% 我们可以设置在完成指定循环次数后触发 StopIteration 异常来结束迭代。

在 20 次迭代后停止执行：
实例(Python 3.0+)
class MyNumbers:
  def __iter__(self):
    self.a = 1
    return self
 
  def __next__(self):
    if self.a <= 20:
      x = self.a
      self.a += 1
      return x
    else:
      raise StopIteration
 
myclass = MyNumbers()
myiter = iter(myclass)
 
for x in myiter:
  print(x)


### ==============================================================% python3生成器
在 Python 中，使用了 yield 的函数被称为生成器（generator）。
跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，
更简单点理解生成器就是一个迭代器。

在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，
返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行。

调用一个生成器函数，返回的是一个迭代器对象。

以下实例使用 yield 实现斐波那契数列：


实例(Python 3.0+)
#!/usr/bin/python3
 
import sys
 
def fibonacci(n): # 生成器函数 - 斐波那契
    a, b, counter = 0, 1, 0
    while True:
        if (counter > n): 
            return
        yield a
        a, b = b, a + b
        counter += 1
f = fibonacci(10) # f 是一个迭代器，由生成器返回生成
 
while True:
    try:
        print (next(f), end=" ")
    except StopIteration:
        sys.exit()

执行以上程序，输出结果如下：

0 1 1 2 3 5 8 13 21 34 55

   
