### ======================================================================

### clall(类)  object(对象)
类是创建实例的模板， 而对象是一个一个具体的实例


### 如何将类转化成对象？
实例化 ->       是指在面向对象编程中，把用类创建对象的过程称为实例化。
      ->       是将一个抽象的概念类，具体到该类实物的过程。
实例化过程 ->   {对象名 = 类名(参数1, 参数2, 参数N)}


### 继承特性
继承描述的是事物之间的所属关系。
当我们定义一个class的时候，可以从某个现有的class继承。
新的class称为子类或扩展类(subclass),
而被继承的class称为基类，父类或超类(Baseclass, Superclass).

如何实现继承？
子类在继承的时候，在定义类时，小括号中为父类的名字

继承的工作机制？
父类的属性，方法会被继承给子类。




###  __init__构造方法
# 构造方法在实例化过程中会自动执行
def __init__(self, name, age) :
    # self实质上是对象本身， self.naem将self对象和属性绑定在一起 


### 重写父类方法
在子类中有一个和父类相同名字的方法，在子类中的方法会覆盖掉父类中的方法。








#######################################################
# 封装
class Mian:
    # 整个对象共有属性
    attr1 = '汤' #类属性中的变量 
    attr2 = '面' #类属性中的变量

one_mian = Mian()
two_mian = Mian()
print(one_mian.attr1)
print(one_mian.attr2)
print(one_mian)


# two_mian.attr3为私有属性
two_mian.attr3 = '香菜'
print(two_mian.attr3)


# 类属性中的变量，在实例中共享
Mian.attr1 = '开水'
print(one_mian.attr1)
print(two_mian.attr1)


class Mian:
    flag = '李老师面店' #类的变量属性 
    attr1 = '开水'
    def __init__(self): #为实例时行数据的初始化， 此函数为解释器自动调用执行
        self.attr1 = '汤' # 实例的变量属性，默认指向了当前的实例对象
        self.attr2 = '面' # 实例会图覆盖掉全局这个同名的
        # self维护了这个变量和生产出来的实例之间的关系
                
one = Mian()
# 隐含了init函数的调用，为自己分配了两个私有的变量 attr1, attr2
two = Mian()
print(one.flag)
print(one.attr1)
print(one.attr2)
Mian.attr1 = "abc"

class Human:
    notice = ''
    def __init__(self, name):
        self.w = '上'
        self.s = '下'
        self.a = '左'
        self.d = '右'
        self.name = name
Human.notice = 'close ------'

h1 = Human('小红')
h2 = Human('小明')
h3 = Human('小白')



