###########################################################
###  gcc_compiler
###########################################################
GNU Compiler Collection		
1.预处理-Pre-Processing
  gcc  -E  test.c  -o  test.i                 # .i文件
2.编译-Compiling
  gcc  -S  test.i  -o   test.s                # .s文件
3.汇编-Assembling
  gcc  -c  test.s  -o  test.o                 # .o文件
4.链接-Linking
  gcc  test.o  -o  test                       # test可执行文件



###########################################################  
###  gcc_option
###########################################################
-E                  # 选项指示编译器仅对输入文件进行预处理
-S                  # 编译选项告诉 GCC 在为 C 代码产生了汇编语言文件后停止编译
-c                  # 编译，不链接。.c--->.o
-o                  # 指定输出文件名。default: a.out
-O                  # -O 主要进行跳转和延迟退栈两种优化；
-O0                 # -O0表示不做优化
-O1                 # -O1为默认优化
-O2                 # -O2除了完成-O1的优化之外，还进行一些额外的调整工作，如指令调整等
-O3                 # -O3则包括循环展开和其他一些与处理特性相关的优化工作
-w                  # 不生成任何警告信息
-Wall               # 生成所有警告信息。
-Wextra             # 输出-Wall不包含的警告等
-Werror             # 将警告视为错误输出
-g                  # 生成调试信息。GNU 调试器可利用该信息, -g3,
-pg                 # 要启用gprof很简单，gcc编译的时候带上-pg参数即可
-shared             # 生成共享目标文件。通常用在建立共享库时。
-static             # 禁止使用共享连接。 
-Idir               # 将 dir目录加入搜索头文件的目录路径
-Ldir               # 将 dir目录加入搜索库文件的目录路径
-llib               # 链接lib库
-pipe               # 使用管道代替编译中临时文件, 在使用非 gnu 汇编工具的时候, 可能有些问题
-ansi               # 关闭 gnu c中与 ansi c 不兼容的特性, 激活 ansi c 的专有特性
                    （包括禁止一些 asm inline typeof 关键字, 以及 UNIX,vax 等预处理宏）
___________________________________________________________
-nostdinc           # 使编译器不再系统缺省的头文件目录里面找头文件, 
                      一般和 -I 联合使用,明确限定头文件的位置
-D name=definition  # 加入宏定义，若不指定def，则默认为1
-imacros file       # 将 file 文件的宏, 扩展到 gcc/g++ 的输入文件, 
                      宏定义本身并不出现在输入文件中
-Dmacro             # 相当于 C 语言中的 #define macro　　
-Dmacro=defn        # 相当于 C 语言中的 #define macro=defn　　
-Umacro             # 相当于 C 语言中的 #undef macro
-undef              # 取消对任何非标准宏的定义 
-DMACRO             # 以字符串"1"定义 MACRO 宏
-DMACRO=DEFN        # 以字符串"DEFN"定义 MACRO 宏		
-Wl,option          # 通过该选项将参数 option 作为后续链接器 ld 使用的参数
-Wl,rpath=/path     # 为链接器指定一个非默认的运行时库的搜索路径，
                      运行采用了该选项编译的程序时，
                      链接器会在-rpath 指定的目录中搜索所需的 so 库文件，
                      以将其载入内存中



###########################################################	
### gcc_Libraies	
###########################################################
-l参数和-L参数
-l参数就是用来指定程序要链接的库，-l参数紧接着就是库名
就拿数学库来说，他的库名是m，他的库文件名是libm.so，很容易看出，
把库文件名的头lib和尾.so去掉就是库名 了
% gcc  xxx.c  -lm( 动态数学库)
好了现在我们知道怎么得到库名了，
比如我们自已要用到一个第三方提供的库名字叫libtest.so，
那么我们只要把 libtest.so拷贝到 /usr/lib里，编译时加上-ltest参数，
我们就能用上libtest.so库了
(当然要用libtest.so库里的函数，我们还 需要与 libtest.so配套的头文件)
___________________________________________________________
#Libraries 库文件路经参数设定
放在/lib和/usr/lib和/usr/local/lib里的库直接用-l参数就能链接了，
但如果库文件没放在这三个目录里，而是放在其他目录里， 
这时我们只用-l参数的话，链接还是会出错，
出错信息大概是：“/usr/bin/ld: cannot find-lxxx”，
也就是链接 程序ld在那3个目录里找不到libxxx.so，
这时另外一个参数-L就派上用场了，比如常用的X11的库 ，它放在/usr/X11R6/lib目录 下，
我们编译时就要用-L/usr/X11R6/lib -lX11参数，-L参数跟着的是库文件所在的目录名。
再比如我们把libtest.so放在/aaa/bbb/ccc目录下，
那链接参数就是:                    -L/aaa/bbb/ccc -ltest
___________________________________________________________
# libraries links
另外，大部分libxxxx.so只是一个链接，以RH9为例，
比如libm.so它链接到/lib/libm.so.x，/lib/libm.so.6 又链接到/lib/libm-2.3.2.so，
如果没有这样的链接，还是会出错，因为ld只会找libxxxx.so，所以如果你要用到xxxx库，
而只有libxxxx.so.x或者libxxxx-x.x.x.so，
做一个链接就可以了:                  ln -s libxxxx-x.x.x.so libxxxx.so
___________________________________________________________
-include和-I参数
-include用来包含头文件,-include参数很少用
-I参数是用来指定头文件目录，/usr/include目录一般是不用指定的，gcc知道去那里找，
但 是如果头文件不在/usr/icnclude里我们就要用-I参数指定了，比如头文件放在/myinclude目录里，
那编译命令行就要加上-I/myinclude 参数了，
如果不加你会得到一个”xxxx.h: No such file or directory”的错误。
-I参数可以用相对路径，比如头文件在当前 目录，可以用-I.来指定。



