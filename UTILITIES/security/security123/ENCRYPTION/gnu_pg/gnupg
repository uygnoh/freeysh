### ====================================================================== GNUPG 9FF9FF248EFA5B89
ysh@debian:~$ gpg --full-gen-key
gpg (GnuPG) 2.1.18; Copyright (C) 2017 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Please select what kind of key you want:            请选择您要使用的密钥种类：
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (sign only)
   (4) RSA (sign only)
Your selection? 1                                   您的选择？
RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (3072) 
Requested keysize is 3072 bits

Please specify how long the key should be valid.    请设定这把密钥的有效期限
         0 = key does not expire                    密钥永不过期
      <n>  = key expires in n days                  密钥在 n 天后过期
      <n>w = key expires in n weeks                 密钥在 n 周后过期
      <n>m = key expires in n months                密钥在 n 月后过期
      <n>y = key expires in n years                 密钥在 n 年后过期
Key is valid for? (0)  0              
Key does not expire at all
Is this correct? (y/N) y                            以上正确吗？(y/n)

% 用户名和电子邮件。可以给同样的密钥不同的身份，比如给同一个密钥关联多个电子邮件
GnuPG needs to construct a user ID to identify your key.

Real name: freeysh                      % 真实姓名
Email address: freeysh@163.com          % email地址
Comment: zfs                            % 注释
You selected this USER-ID:              % 用户ID
    "freeysh (zfs) <freeysh@163.com>"
    
% 更改姓名(N)、注释(C)、电子邮件地址(E)或确定(O)/退出(Q)？
Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? o


% 接着，系统会让你设定一个私钥的密码.这是为了防止误操作, 或者系统被侵入时有人擅自动用私钥
    Please Enter the passphrase to
    protect you new key
    Passphrase:_______________________________________
    <OK>                                <Cancel>


% 然后，系统就开始生成密钥了，这时会要求你做一些随机的举动，以生成一个随机数。
% 我们需要生成大量的随机字节。这个时候您可以多做些琐事(像是敲打键盘、移动鼠标、读写硬盘之类的)，
% 这会让随机数字发生器有更好的机会获得足够的熵数。
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.

% 几分钟以后，系统提示密钥已经生成了

gpg: key 70F0FA1A4101B6B2 marked as ultimately trusted          % gpg: 密钥 70F0FA1A4101B6B2 被标记为绝对信任
gpg: directory '/home/ysh/.gnupg/openpgp-revocs.d' created
gpg: revocation certificate stored as '/home/ysh/.gnupg/openpgp-revocs.d/68110A1DA9902F20DD9EAC5770F0FA1A4101B6B2.rev'
public and secret key created and signed.                       % 公钥和私钥已经生成并经签名。

pub   rsa1024 2019-02-20 [SC]
      68110A1DA9902F20DD9EAC5770F0FA1A4101B6B2
      68110A1DA9902F20DD9EAC5770F0FA1A4101B6B2
      
uid   freeysh (zfs) <freeysh@163.com>

sub   rsa1024 2019-02-20 [E]

% 请注意上面的字符串"70F0FA1A4101B6B2"，这是"用户 ID"的 Hash 字符串，可以用来替代"用户 ID"。
% 这时，最好再生成一张"撤销证书"，以备以后密钥作废时，可以请求外部的公钥服务器撤销你的公钥。
$ gpg --gen-revoke [用户 ID]
% 上面的"用户 ID"部分，可以填入你的邮件地址或者 Hash 字符串（以下同）。

        
### ======================================================== % gpg --list-keys 列出密钥
% 第一行显示公钥文件名（pubring.gpg），
% 第二行显示公钥特征（4096 位，Hash 字符串和生成时间），
% 第三行显示"用户 ID"，
% 第四行显示私钥特征
ysh@debian:~$ gpg --list-keys
gpg: checking the trustdb
gpg: marginals needed: 3  completes needed: 1  trust model: pgp
gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u
/home/ysh/.gnupg/pubring.kbx
----------------------------
pub   rsa1024 2019-06-30 [SC]
      4F3BBF6D0433BB7FA5B8251AE1206A7652692E4C
uid           [ultimate] freeysh (zfs) <freeysh@163.com>
sub   rsa1024 2019-06-30 [E]




### ================================================================= 删除某个密钥
% 如果你要从密钥列表中删除某个密钥，可以使用 delete-key 参数
gpg --delete-keys [用户 ID]
     --delete-keys           remove keys from the public keyring
     --delete-secret-keys    remove keys from the secret keyring

### ==================================================================== 输出密钥
% 公钥文件（.gnupg/pubring.gpg）以二进制形式储存，
% armor 参数可以将其转换为 ASCII 码显示。
% "用户 ID"指定哪个用户的公钥，
% output 参数指定输出文件名（public-key.txt）
    gpg --armor --output public-key.txt --export [用户 ID]


% 类似地，export-secret-keys 参数可以转换私钥。
    gpg --armor --output private-key.txt --export-secret-keys





### ======================================================== 把公钥发布到公钥服务器
% 公钥服务器是网络上专门储存用户公钥的服务器。send-keys 参数可以将公钥上传到服务器。
% --send-keys 用于指定待发布的公钥的id
% --keyserver 指定公钥服务器
    gpg --send-keys [用户 ID] --keyserver hkp://subkeys.pgp.net
% 使用上面的命令，你的公钥就被传到了服务器 subkeys.pgp.net，然后通过交换机制，
% 所有的公钥服务器最终都会包含你的公钥。
% 由于公钥服务器没有检查机制，任何人都可以用你的名义上传公钥，
% 所以没有办法保证服务器上的公钥的可靠性。
% 通常，你可以在网站上公布一个公钥指纹，让其他人核对下载到的公钥是否为真。
% fingerprint 参数生成公钥指纹。

    gpg --fingerprint [用户 ID]
    
    



### ======================================================== 导入他人的公钥，加密一个文件

下面我们来做个试验，尝试导入笔者的公钥，然后使用该公钥加密一个文件。
通过这个试验就可以学会怎样获取他人的公钥并用它加密信息。

1 在公钥服务器搜索笔者的公钥并导入到本机
使用如下的命令可以搜索到我的公钥：
    [root@centos gnupg-2.1.4]# gpg --search-keys cakin
    gpg: searching for "cakin" from hkp server keys.gnupg.net
    (1)    cakin (cakin) <798102175@qq.com>
          2048 bit RSA key F15FE9FE, created: 2018-10-14, expires: 2019-10-14
    Keys 1-1 of 1 for "cakin".  Enter number(s), N)ext, or Q)uit > 1
    gpg: requesting key F15FE9FE from hkp server keys.gnupg.net
    gpg: key F15FE9FE: "cakin (cakin) <798102175@qq.com>" not changed
    gpg: Total number processed: 1
    gpg:              unchanged: 1

如果有重名的情况，这里会列出多条记录。你可以输入n并回车把搜索结果浏览个遍。
当你看到id和uid都跟你要找的那个吻合时，输入搜索结果前面显示的数字就可以把相应的公钥下载到本机。
如上面的搜索结果，按数字1并回车就可以把我的公钥导入到本机。输入q并回车可退出搜索。

注：服务 keys.gnupg.net 背后是一组服务器，它们之间的信息同步需要一定的时间，
如果你刚刚提交了自己的公钥，可能不会立即搜索就有结果，只要过一段时间（大概1小时）就好了。
如果你用的是普通公钥服务器，比如 pgp.mit.edu 则不会有这个问题。


% 导入公钥还有另一种方法：如果我把公钥文件直接发送了给你，你也可以跳过公钥服务器。
% 下面假设我的公钥文件 public-key.txt 已发送给你，你运行如下命令就可以导入我的公钥了：
    [root@centos gnupg-2.1.4]# gpg --import public-key.txt
    gpg: key F15FE9FE: "cakin (cakin) <798102175@qq.com>" not changed
    gpg: Total number processed: 1
    gpg:              unchanged: 1




### ============================== 核对公钥指纹值并签收指纹（cakin把公钥发送给Alice）
% Alice把cakin的公钥导入到自己机器后，就已经可以用它来加密信息或者用于校验cakin的数字签名。
% 不过这样每次操作时都会提示公钥不可信，因为虽然Alice导入了cakin的公钥，但存在导入攻击者的公钥的可能性。
% 所以Alice需要进一步跟cakin核对公钥是否正确，然后签收（sign key）它。
% 因为公钥有可能出现冒牌货，所以每个公钥里都加入了指纹值，使用下面命令可以查看指纹值：

    [root@centos gnupg-2.1.4]# gpg --fingerprint cakin
    pub   2048R/F15FE9FE 2018-10-14 [expires: 2019-10-14]
          Key fingerprint = 9B42 B3CC DBA4 B411 ACEA  F0F5 08C9 3BF3 F15F E9FE
    uid                  cakin (cakin) <798102175@qq.com>
    sub   2048R/E672385C 2018-10-14 [expires: 2019-10-14]

% 其中：9B42 B3CC DBA4 B411 ACEA  F0F5 08C9 3BF3 F15F E9FE就是这个公钥的指纹值

% Alice应该通过打电话或者聊天工具等方式询问cakin并核对指纹值是否一致，
% 如果吻合的话就说明你取得的是真货了。



% Alice确定取得的公钥是真货之后，使用如下命令对这个公钥进行签收（sign key）：

    [root@centos gnupg-2.1.4]# gpg --sign-key cakin
     
    pub  2048R/F15FE9FE  created: 2018-10-14  expires: 2019-10-14  usage: SC  
                         trust: ultimate      validity: ultimate
    sub  2048R/E672385C  created: 2018-10-14  expires: 2019-10-14  usage: E   
    [ultimate] (1). cakin (cakin) <798102175@qq.com>
     
    "cakin (cakin) <798102175@qq.com>" was already signed by key F15FE9FE
    Nothing to sign with key F15FE9FE
     
    Key not changed so no update needed.















### ==================================================================== 输入密钥
% 除了生成自己的密钥，还需要将他人的公钥或者你的其他密钥输入系统。
% 这时可以使用 import 参数。
    gpg --import [密钥文件]

为了获得他人的公钥，可以让对方直接发给你，或者到公钥服务器上寻找。
    gpg --keyserver hkp://subkeys.pgp.net --search-keys [用户 ID]

正如前面提到的，我们无法保证服务器上的公钥是否可靠，下载后还需要用其他机制验证．





### ====================================================================== 加密
% 假定有一个文本文件 demo.txt，怎样对它加密呢？ encrypt 参数用于加密
% gpg --recipient [用户 ID] --output demo.en.txt --encrypt demo.txt
gpg --recipient freeysh --output demo.en.txt --encrypt demo.txt


recipient   指定接收者的公钥，
output      指定加密后的文件名，
encrypt     指定源文件。运行上面的命令后，
demo.en.txt 就是已加密的文件，可以把它发给对方。




### ======================================================================== 解密
% 对方收到加密文件以后，就用自己的私钥解密。
    gpg  --output demo.de.txt --decrypt demo.en.txt

decrypt     指定需要解密的文件，--decrypt
output      指定解密后生成的文件。
demo.de.txt 就是解密后的文件。

GPG 允许省略 decrypt 参数。gpg demo.en.txt
运行上面的命令以后，解密后的文件内容直接显示在标准输出。



### ================================================================== 对文件签名
% 有时，我们不需要加密文件，只需要对文件签名，表示这个文件确实是我本人发出的。sign 参数用来签名。
    gpg --sign demo.txt

% 运行上面的命令后，当前目录下生成 demo.txt.gpg 文件，这就是签名后的文件。
% 这个文件默认采用二进制储存，如果想生成 ASCII 码的签名文件，可以使用 clearsign 参数。
    gpg --clearsign demo.txt
% 运行上面的命令后 ，当前目录下生成 demo.txt.asc 文件，后缀名 asc 表示该文件是 ASCII 码形式的。


% 如果想生成单独的签名文件，与文件内容分开存放，可以使用 detach-sign 参数。
    gpg --detach-sign demo.txt

% 运行上面的命令后，当前目录下生成一个单独的签名文件 demo.txt.sig。
% 该文件是二进制形式的，如果想采用 ASCII 码形式，要加上 armor 参数。
    gpg --armor --detach-sign demo.txt
    
    
### ==================================================================  签名+加密  
% 上一节的参数，都是只签名不加密。如果想同时签名和加密，可以使用下面的命令。
    gpg --local-user [发信者 ID] --recipient [接收者 ID] --armor --sign --encrypt demo.txt

local-user  参数指定用发信者的私钥签名
recipient   参数指定用接收者的公钥加密
armor       参数表示采用 ASCII 码形式显示
sign        参数表示需要签名
encrypt     参数表示指定源文件


### ==================================================================== 验证签名
% 我们收到别人签名后的文件，需要用对方的公钥验证签名是否为真。verify 参数用来验证。

    gpg --verify demo.txt.asc demo.txt
    

