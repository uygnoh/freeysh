### ================================================================== SED
sed（意为流编辑器，源自英语“stream editor”的缩写）
是一个使用简单紧凑的编程语言来解析和转换文本Unix实用程序
% sed     选项    '动作'


### =================================================== Substitution command
sed 's/regexp/replacement/g' inputFileName > outputFileName

在某些版本的sed中，表达式的前面必须加上-e，以表示后面跟着一个表达式。
s表示替换，而g表示全局，这意味着行中的所有匹配项都将被替换。
要搜索的正则表达式（即pattern）放在第一个分隔符号（此处为斜杠）之后，
而要替换成的字符串跟在第二个分隔符号后面。
斜杠（/）是传统的符号，起源于ed中的“搜索”字符，
但其实在pattern和替换文本中都未出现的任何其他符号都可以用作分隔符号，
使其可读性更强；这有助于避免“倾斜牙签综合征”。
-----------------------------------------------------------
替换命令源自ed中的搜索-替换，实现了简单的解析和模板化 。
regexp提供模式匹配和通过子表达式保存文本的功能，
而replacement可以是纯文本，也可以是包含“完全匹配”&，
或第n 个子表达式（从\1到\9）这种特殊转义序列的格式字符串。
% 例如， sed -r "s/(cat|dog)s?/\1s/g
"用“cat”或“dog"替换所有出现的“cats”或“dogs”，
而不复制现有的“s”：在正则表达式中，(cat|dog)是第一个（也是唯一）保存的子表达式，
格式字符串中的\1将其替换到输出里。 


### ==================================================== Other sed commands
除了替换之外，使用大约25个sed命令可以进行其他形式的简单处理。
例如，下面使用d 命令删除空行或只包含空格的行：
sed '/^ *$/d' inputFileName

(^) matches the beginning of the line.
($) matches the end of the line.
(*) matches zero or more occurrences of the previous character


### =================================================== sed used as a filter
% 在Unix下，sed通常用作管道中的过滤器
Under Unix, sed is often used as a filter in a pipeline

generateData | sed 's/x/y/g'
也就是说，诸如“generateData”之类的程序生成数据，然后用sed把x替换成y。例如：
$ echo xyz xyz | sed 's/x/y/g'
yyz yyz




### ================================File-based sed scripts (基于文件的sed脚本)
将几个sed命令（每行一个命令）放入脚本文件（例如subst.sed）中,
然后使用-f选项从文件中运行命令（例如s/x/y/g）通常很有用：

sed -f subst.sed inputFileName > outputFileName


可以在脚本文件中放置任意数量的命令，使用脚本文件也可以避免shell转义或替换的问题。
这样的脚本文件可以直接从命令行执行，方法是在其前面加上一个包含sed命令的"shebang行"，
并为该文件分配可执行权限。
% 例如，可以使用以下内容创建文件subst.sed： 
!/bin/sed -f
s/x/y/g
% 然后，当前用户可以使用chmod命令使文件可执行：
chmod u+x subst.sed
%然后可以直接从命令行执行该文件：
subst.sed inputFileName > outputFileName


### ====================================================== In-place editing
就地编辑

GNU sed中引入的-i选项允许就地编辑文件
(实际上，在后台创建了一个临时输出文件，然后将原始文件替换为临时文件)
For example: 
sed -i 's/abc/def/' fileName

sed 'command' fileName
sed –e 'command1' –e 'command2' –e '命令3' fileName
sed -f command_file fileName
sed 's/^/FF/' fileName
sed 's/$/FF/' fileName


### ======================================================
sed [-hnV][-e<script>][-f<script文件>][文本文件]
___________________________________________________________
参数说明  

-n      一般sed命令会把所有数据输出到屏幕上
        加次选项,则只有经过sed特殊处理的那一行(或动作)才会列出
-e      直接在指令模式上进行sed的动作编辑
-i      直接修改文档的内容，而不是由屏幕输出
-f<script文件>或--file=<script文件> 以选项中指定的script文件来处理输入的文本文件
___________________________________________________________
动作说明

a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～
c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！
d ：删除，因为是删除啊，所以 d 后面通常不接任何咚咚；
i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；
p ：打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～
s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！
    例如 1,20s/old/new/g 就是啦！ 
	例如: 1,20s@old@new@g
	
___________________________________________________________
% 字符串替换
sed '1,2s/old_string/new_string/g'

% 用\可以追加多行
nl /etc/passwd | sed '2a drink tea or ....\
drink beer?'

% 把第2行到第5行的内容取代为“no 2-5number!”
nl /etc/passwd | sed '2,5c no 2-5number!'


___________________________________________________________
tail -f pppd.log | sed 's/145\.37\.23\.26/桥西/g'

tail -f pppd.log | sed -f sed.cmd

% sed.cmd 
s/145\.37\.23\.26/桥西/g
s/102\.157\.23\.109/柳荫街/g
s/145\.37\.123\.57/大山子/g
	
___________________________________________________________
% 模式描述中增加\(和\)
在正则表达式中圆括号,仍然代表它自身,
在正则表达式中出现的\(和\)不影响匹配操作
[a-zA-Z_][a-zA-Z0-9_]*->number
\([a-zA-Z_][a-zA-Z0-9_]*\)->number


___________________________________________________________
% 替换字符串中的 \0 \1 \2 ......


___________________________________________________________
举例: root->num, subs->number; adc = number;
s/\([a-zA-Z_][a-zA-Z0-9_]*\)->number/\1->num/g


___________________________________________________________
将日期格式“月-日-年”改为“年.月.日”,
比如:将 04-26-1997替换为1997.04.26使用命令:
s/\([0-9][0-9]\)-\([0-9][0-9]\)-\([0-9][0-9]*\)/\3.\1.\2/g




### ===================================================== sed
sed -i.commented '/^#/d;/^$/d' /etc/ntp.conf


sed 'p' /etc/passwd             # 打印/etc/passwd中的内容
sed -n 'p' /etc/passwd          # -n; 只显示被处理的内容
sed -n ' 1,5 p ' /etc/passwd    # 1,5; 打印第1到第5行
sed -n ' /^ysh/ p ' /etc/passwd # /^ysh/; 打印以"ysh"开头的行
sed ' /^#/ d ' ~/test           # 删除以"#"开头的行
sed ' /^#/ d; /^$/ d ' ~/test   # 删除以"#"开头的行和空白行

___________________________________________________________
### 删除以"#"开头的行和空白行;
### -i.bak; 表示直接修改原文件，并且备份原文件中的内空，以".bak"作为后缀名
sed -i.bak ' /^#/ d; /^$/ d ' ~/test







### ======================================================================= sed

sed --version

______________________________________________________________________sed print

sed ' p ' /etc/passwd
sed -n ' p ' /etc/passwd
sed -n '1,3 p ' /etc/passwd
sed -n '/^root/ p ' /etc/passwd


Using the sed PRINT command
The command P will print the pattern space(Matched lines)
The -n option supresses standard output so only matched lines display
Adding a range will print only those matched lines


__________________________________________________________________sed substitute

sed ' [range] s/<string>/<replacement>/ ' /etc/passwd
sed ' /^ysh/ s@/bin/bash@/bin/sh@ ' /etc/passwd

Using the sed SUBSTITUTE command

The substitute command in sed is your search and replace tool

The first character following the s represents the delimiters, often the / is used

Replacing the default shell of the user ysh from /bin/bash to /bin/sh



% 在/etc/passwd文件中的第6到第9行添加 4个空格，并打印出其内容
sed -n ' 6,9 s/^/    /p ' /etc/passwd

% 以 ysh为开头并以此作为边界替换其中的内容
sed -n ' /^ysh/ s@/bin/bash@/bin/sh@p ' /etc/passwd






___________________________________________________________ append\insert\delete

sed ' /^server 3/ a server ntp.example.com ' /etc/ntp.conf
sed ' /^server 0/ i server ntp.example.com ' /etc/ntp.conf
sed ' /^server\s[0-9]\.ubuntu/ d ' /etc/ntp.conf





______________________________________________________________ sed command line
ysh@debian:~$ sed ' {
> /^server 0/ i ntp.example.com
> /^server\s[0-9]\.ubuntu/ d
> } ' /etc/ntp.conf



Multiple sed expressions

Multiple expressions can be written on the command line by including brace 
brackets within the quoted sed instructions





_____________________________________________________________________ sed file
% cat ntp.sed
/^server 0/ i ntp.example.com
/^server\s[0-9]\.ubuntu/ d
sed -f ntp.sed /etc/ntp.conf


For code-reuse implement sed files

The sed file can be referenced with the -f option

*****Nothing is written to the file
      unless the -i option is used.
       with -i.bak a backup file is
        created prior to the edit *****



% cat ntp.sed
/^$/ d
/^\s*#/ d
/^server 0/ i ntp.example.com prefer
/^server\s[0-9]\.ubuntu/ d

sed -f ntp.sed /etc/ntp.conf
sudo sed -i.bak -f ntp.sed /etc/ntp.conf




______________________________________________________________________ sed ssh

Putting it all together with remote edits using SSH

ssh -t user@server sudo sed -i.bak -f /tmp/ntp.sed /etc/ntp.conf

-t      ;Assigns a TTY allowing for sudo password
-i      ;Creates backup with .bak extension
ntp.sed ;Sed file on the remote server
Danny can effectively update the ntp.conf files on multiple servers quickly and easily



scp ntp.sed ysh@192.168.0.105:/tmp/
ssh -t ysh@192.168.0.105 sudo sed -i.bak -f /tmp/ntp.sed /etc/ntp.conf




____________________________________________________________________ sed group

                    Substitution Grouping

s/              \([^,]*\)               /\U\1/

substitution    Groupint defined with   Replace string: upper cases
                escaped parentheses             first grouping

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

sed 's@\([^,]*\)@\U\1@' employees
sed 's@\([^,]*\),\([^,]*\)@\U\1\L\2@' employees

\([^,]*\)   ;The search string identifies all characters up to the first comma
\U\1        ;The replace string uppercases the first group
,           ;Each grouping is, itself, comma-separated

Working with the employyees file

Uppercase the first field of a comma separated file

Uppercase the first and lowercase the second field of acomma separated file



Demo Time: Format teh employees file

sed ' s/\([^,]*\)/\U\1/ ' empoyees
sed ' s/\([^,]*\),\([^,]*\)/\U\1\L\2/ ' empoyees
sed ' s/\([^,]*\),\([^,]*\)/\U\1,\L\2/ ' empoyees


% sed ' s/\([^,]*\),\([^,]*\)/\U\1,\L\2/ ' empoyees
% 把第1个单词转换成大写，把第2个单词转换成小写
% cat empoyees
Jones,Bob,232-78-3456
Jackeson,Jane,,
Federer,Jack,xxx-xx-xxx
Maw,Michael,1879-0
Alexander,Sally,345-89-8095
Beder,Ioana,567-34-9802
Staines,Brad,,



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

sed ' s/\(^\|[^0-9.]\)\([0-9]\+\)\([0-9]\{3\}\)/\1\2,\3/g ' /catlog


% cat catalog.sed
s/,/:/g
s/\(^\|[^0-9.]\)\([0-9]\+\)\([0-9]\{3\}\)/\1\2,\3/g
%或 s@\(^\|[^0-9.]\)\([0-9]\+\)\([0-9]\{3\}\)@\1\2,\3@g

sed -f catalog.sed /proc/loadavg





__________________________________________________  Executing Commands with sed
					

sed ' s/^/ls -l /e listoffiles.txt
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Making full use of the ever useful sed substitute
command coupled with execute, we can read arguments from the imput file.
We then substitute the start of the line with the command to be run
against the argument...let me show you

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
sed ' /^\// s/^/tar -rf catalog.tar /e ' cat.list

/^\//           ;Require a leading forward slash
-rf catlog.tar  ;Append matching lint to TAR file
cat.list        ;File will contain catalogs to archive
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
sed ' /^\// s/^/rm -f /e ' cat .list

rm -f           ;Teh origianl catalog is deleted
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% cat file.list
/etc/hosts
/etc/services

sed ' s/^/ls -l /e ' file.list
sed ' s/^/stat /e ' file.list

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~





~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% cat user.list
ysh1
ysh2

sed ' s/^/sudo useradd /e ' user.list
tail -n 2 /etc/passwd
sed ' s/^/sudo userdel -r /e ' user.list
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~




~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% cat cat.list
/home/ysh/catlog/garden

sed ' /^\// s/^/tar -rf catalog.tar /e ' cat.list


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~






