###
% https://vim.fandom.com/wiki/Open_vimrc_file
% https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
% github地址：https://github.com/tomasr/molokai 

### =================================================================== vim主题
% 复制molokai主题到/usr/share/vim/vim80/colors/目录下
cp molokai.vim /usr/share/vim/vim80/colors/

% 编辑.vimrc文件，增加一下配置
colorscheme  molokai  
set t_Co=256
set background=dark
let g:molokai_original=1
let g:rehash256=1

% 有关vim主题的命令
:colorscheme            "查看当前主题
:colorscheme space tab  "列出所有主题
:colorscheme your-theme "切换主题



### ===========================================================vim-plgu 安装

curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim


% 要安装插件，你必须如下所示首先在 Vim 配置文件中声明它们。
% 一般 Vim 的配置文件是 ~/.vimrc，
% 请记住，当你在配置文件中声明插件时，
% 列表应该以 call plug#begin(PLUGIN_DIRECTORY) 开始, 并以 plug#end() 结束。
% 例如，我们安装 “lightline.vim” 插件。为此，请在 ~/.vimrc 的顶部添加以下行。
___________________________________________________________
call plug#begin('~/.vim/plugged')                                          
"
"
Plug 'scrooloose/nerdtree'
call plug#end()

%在 vim 配置文件中添加上面的行后，通过输入以下命令重新加载：
:source ~/.vimrc




### =========================================================== plug-in 命令

:PlugStatus         #使用以下命令检查状态：
__________________________________________________________
:PlugInstall        #Install plug
___________________________________________________________
:PlugUpgrade        #升级 Vim-plug,更新插件
___________________________________________________________
:PlugDiff           #审查插件;然后按回车键查看上次 
___________________________________________________________
:PlugClean          #注释掉你以前在你的 vim 配置文件中添加的 plug 命令
___________________________________________________________
:PlugUpgrade        #升级 Vim-plug,更新插件



### ========================================================== Vim-字符替换
:1,$s@^@//@g			  #从第1行到最后一行，在行首加入”//“
:1,$s@^//@@g			  #删除行首”//“
:1,$s/old_string/new_string/g	       
:n1,n2 w！ /root/filename #把当前文件n1到n2行的内容,写入到/root/filename文件中   
:r filename   	          #导入"filename"文件内容到当前编辑的文件内容之中		




### ====================================================== Vim Command mode
		gg            	#移动到文件首
		G             	#移动到文件尾
		yy            	#复制当前行
		nyy          	#复制N行(包括当前行)
		dd           	#剪切当前行
		ndd           	#剪切N行(包括当前行)
		p             	#粘贴至光标所在行下
		x             	#剪切当前字符到剪贴板
		r            	#替换字符
		i             	#在当前字符的左边插入
		I             	#在当前行首插入
		a             	#在当前字符的右边插入
		A             	#在当前行尾插入
		o             	#在当前行下面插入一个新行
		O             	#在当前行上面插入一个新行
		0             	#移动光标到当前行首。（是数字0）
		^             	#移动光标到当前行的第一个字母位置。
		$             	#移动光标到行尾。
		
		
### ===================================================== Vim Last line mode
		:split        	#水平分割
		:vsplit       	#垂直分割
		ctrl+w        	#切换窗口
		! command     	#显示命令输出的内容
		:! witch ls   	#查看命令的启动路径
		:r ! date     	#导入时间到光标所在处
		:r!date       	#导入时间信息到光标所在行下面
		:set nu         #显示行号，设定之后，会在每一行的前缀显示该行的行号
		:set nonu       #与 set nu 相反，为取消行号！
________________________________________________________________________________
		:q              #如果已做过编辑处理，则vim不允许用户使用“:q”命令退出
		:q!             #强制退出vim编辑器，放弃编辑处理的结果
		:w              #保存编辑后的文件内容，但不退出vim编辑器
		:w!             #强制写文件，即强制覆盖原有文件。
		ZZ              #保存文件内容后退出vim编辑器,这是大写的 Z 喔！
		:wq             #保存文件内容后退出vim编辑器。
		:wq!            #强制保存文件内容后退出vim编辑器。
		:w filename     #把编辑处理后的结果写到指定的文件中保存
		:w! filename    #把编辑处理后的结果强制保存到指定的文件中，
		:wq! filename   #把编辑处理后的结果强制保存到指定的文件中，


### ====================================================% Vim Visual	
     v   字符可视化模式(Characterwise visual mode),文本选择是以字符为单位的
     V   行可视化模式  (Linewise visual mode),  文本选择是以行为单位的
ctrl+v   块可视化模式  (Blockwise visual mode), 可以选择一个矩形内的文本		

###  Vim可视化模式下缩进代码
1 选中要缩进的代码块内容
2 Shift+ <|>
################################################################################
################################################################################
################################################################################











" #############################################################################
" vim-plug: Vim plugin install              安装Vim 插件管理器
" =============================================================================
"
" Download plug.vim and put it in ~/.vim/autoload
"
"   curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim


" ### ============================= plug-in 插件管理器配置文件 
" Plug-in management           
call plug#begin('~/.vim/plugged')                                          


Plug 'scrooloose/nerdtree'

call plug#end()






" ### ============================== NERDTreeFind 插件配置文件
""" Plug-in nerdtree Configuration
""" Ctrl+H, Ctrl+L切换工作目录
      
nmap ,v :NERDTreeFind<cr>                       " 将,v}设置为开关NERDTree的快捷键
nmap ,g :NERDTreeToggle<cr>                     " 将,v}设置为开关NERDTree的快捷键
autocmd vimenter * NERDTree                     " 打开vim时自动打开NERDTree
autocmd vimenter * if !argc()|NERDTree|endif    " 打开vim时如果没有文件自动打开NERDTree
let g:NERDTreeHidden=0                          " 不显示隐藏文件
let g:NERDTreeDirArrowExpandable = '+'          " 修改树的显示图标
let g:NERDTreeDirArrowCollapsible = '-'
"let g:NERDTreeSize=20                          " 窗口尺寸
let g:NERDTreeShowLineNumbers=1                 " 窗口是否显示行号

""" ###########################################################################





""" ==================================================================== common
set cursorline          " 光标所在的当前行高亮
set nocompatible        " 不与 Vi 兼容（采用 Vim 自己的操作命令）
syntax on               " 打开语法高亮。自动识别代码，使用多种颜色显示
set showmode            " 在底部显示，当前处于命令模式还是插入模式
set showcmd             " 命令模式下，在底部显示，当前键入的指令
set mouse=a             " 支持使用鼠标
set encoding=utf-8      " 使用 utf-8 编码 
set t_Co=256            " 启用256色
set novisualbell        " turn off visual bell
set visualbell t_vb=    " turn off error beep/flash   


""" ### ================================================  配色方案(color scheme)
"
colorscheme  molokai  
set t_Co=256
set background=dark
let g:molokai_original=1
let g:rehash256=1


""" ======================================================== Tab键和缩进设置		
set noexpandtab         " 不要用空格代替制表符
set autoindent          " 设置自动缩进
set cindent             " cindent对c语法的缩进更加智能灵活   
set smartindent         " 比autoindent稍智能的自动缩进
set smarttab            " 解决 shiftwidth 和 tabstop 不等时的麻烦
set tabstop=4           " Tab键的宽度    
set softtabstop=4       " 统一缩进为4  
set shiftwidth=4        " 反向制表符中的空格数目  
"
"
" 使回格键（backspace）正常处理indent, eol, start等                       
" set backspace=indent,eol,start 
" 代表的意思是“缩进位置”，“行结束符”，“段首
" 这样设置可以使得 backspace 键在这三个特殊的位置也能进行回删动作
set backspace=2



" list开启对于制表符(tab),行尾空格符(trail),行结束符(eol)等等特殊符号的回显
" 有助于你观察这些特殊符号的状态，精确地控制文本的编辑
" set list listchars=eol:¬,tab:▸\ ,trail:.,
""

" 在被分割的窗口间显示空白，便于阅读
set fillchars=vert:\ ,stl:\ ,stlnc:\ 


		
""" ========================================================= File_Settings
set nowrap              " 不自动换行
set number              " 显示行号
set history=1000        " 历史记录数    
filetype on             " 侦测文件类型     
filetype plugin on      " 顾名思义，这是开启对应插件的 
filetype indent on      " 开启文件类型检查，并且载入与该类型对应的缩进规则
""set nobackup            " 用来控制我们是否为当前正在编辑的文件建立备份
""set noswapfile          " 不创建交换文件,交换文件主要用于系统崩溃时恢复文件
set ruler               " 在屏幕下方显示标尺
set showmode            " 在左下角显示当前的模式名称，没有显示则代表现在是常规模式
set scrolloff=3         " 光标移动到buffer的顶部和底部时保持3行距离  
set confirm             " 在处理未保存或只读文件的时候，弹出确认
set undofile            " 保留撤销历史


"打开文件监视。如果在编辑过程中文件发生外部改变（比如被别的编辑器编辑了），就会发出提示
set autoread 

" 命令模式下，底部操作指令按下 Tab 键自动补全。
" 第一次按下 Tab，会显示所有匹配的操作指令的清单；
" 第二次按下 Tab，会依次选择各个指令。
set wildmenu
set wildmode=longest:list,full


	
""" ======================================================== Find & Repalce
" set ignorecase        " 搜索忽略大小写    
set hlsearch            " 搜索逐字符高亮  
set incsearch           " 输入搜索内容时就显示搜索结果    
set showmatch           " 高亮显示匹配的括号     
set matchtime=5         " 匹配括号高亮的时间（单位是十分之一秒）
set smartcase           " 此选项的开启会让搜索模式更加聪明		



""" ======================================================= common-settings
""" 鼠标设置
set mouse=a  
set selection=exclusive  
set selectmode=mouse,key
""" 多个窗口切换
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
""" 自动括号补全
inoremap ( ()<ESC>i
inoremap [ []<ESC>i
inoremap { {}<ESC>i
inoremap < <><ESC>i
inoremap " ""<ESC>i
""" 命令行模式增强
cnoremap <C-a> <Home>
cnoremap <C-e> <End>








################################################################################
################################################################################
################################################################################
