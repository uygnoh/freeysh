### MYVIMRC
% https://dougblack.io/words/a-good-vimrc.html                        配置
% https://github.com/tomasr/molokai                                   主题
% https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim 插件
% 定制化及可扩展
vim提供一个vimrc的配置文件来配置vim，并且自己可以定制一些插件来实现
文件浏览（NERD Tree），代码补全（YouCompleteMe，语法检查（syntastic），文件模糊搜索（ctrlp），
显示vim状态栏（Vim Powerline）,主题颜色（Molokai）,显示文件结构（tagbar）等多种功能。

% vimrc; rc -> run commands; 
    Unix/Linux/Mac <=> ~/.vimrc
    system vimrc file: "VIM/vimrc"
    user   vimrc file: "$HOME/.vimrc"
% Each line is executed as a command.
    set ruler <=> :set ruler

### ==============================================================% Vim-字符替换
:1,$s@^@//@g			  #从第1行到最后一行，在行首加入”//“
:1,$s@^//@@g			  #删除行首”//“
:1,$s/old_string/new_string/g	       
:n1,n2 w！ /root/filename #把当前文件n1到n2行的内容,写入到/root/filename文件中   
:r filename   	          #导入"filename"文件内容到当前编辑的文件内容之中		

### ==============================================================% Vim 命令模式
gg            	#移动到文件首
G             	#移动到文件尾
yy            	#复制当前行
nyy          	#复制N行(包括当前行)
dd           	#剪切当前行
ndd           	#剪切N行(包括当前行)
p             	#粘贴至光标所在行下
x             	#剪切当前字符到剪贴板
r            	#替换字符
i             	#在当前字符的左边插入
I             	#在当前行首插入
a             	#在当前字符的右边插入
A             	#在当前行尾插入
o             	#在当前行下面插入一个新行
O             	#在当前行上面插入一个新行
0             	#移动光标到当前行首。（是数字0）
^             	#移动光标到当前行的第一个字母位置。
$             	#移动光标到行尾。
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
:split        	#水平分割
:vsplit       	#垂直分割
ctrl+w        	#切换窗口
! command     	#显示命令输出的内容
:! witch ls   	#查看命令的启动路径
:r ! date     	#导入时间到光标所在处
:r!date       	#导入时间信息到光标所在行下面
:set nu         #显示行号，设定之后，会在每一行的前缀显示该行的行号
:set nonu       #与 set nu 相反，为取消行号！
:q              #如果已做过编辑处理，则vim不允许用户使用“:q”命令退出
:q!             #强制退出vim编辑器，放弃编辑处理的结果
:w              #保存编辑后的文件内容，但不退出vim编辑器
:w!             #强制写文件，即强制覆盖原有文件。
:wq             #保存文件内容后退出vim编辑器。
:wq!            #强制保存文件内容后退出vim编辑器。
:w filename     #把编辑处理后的结果写到指定的文件中保存
:w! filename    #把编辑处理后的结果强制保存到指定的文件中，
:wq! filename   #把编辑处理后的结果强制保存到指定的文件中，
ZZ              #保存文件内容后退出vim编辑器,这是大写的 Z 喔！


    
### =======================================================%======vim VISUAL
% vim在命令行模式下的可视化操作
v                       -VISUAL-进入字符可视化模式
V                       -VISUAL LINE-进入行可视化模式
ctrl+v                  -VISUAL BLOCK-进入块可视化模式

%  Vim可视化模式下缩进代码
1 选中要缩进的代码块内容
2 Shift+ <|>


### =======================================================%======vim leader前缀 
定义<LEADER>为“,”，默认值为“\”
let mapleader=','
map <leader>w :w!<CR>

" change the mapleader from \ to,
" NOTE: This has to be set before <leader> is used.
let mapleader=','

" Quickly save your file.
map <leader>w :w!<CR>

" Easily create HTML unorded lists.
map <F3> i<ul><CR><Space><Space><li></li><CR><Esc>0i</ul><Esc>kcit
map <F4> <Esc>o<li></li><Esc>cit


### =======================================================%=====vim 底线命令模式 
% For more options see ":help option-list" and ":option".

% vim查看是否设置此功能
    :set hls?

% vim底线模式下编辑vimrc帮助
    :h set
    :color
    :mkvimrc!
    :q    
    
% vim底线模式下编辑vimrc文件
    :e ~/.vimrc
    :e /home/ysh/.vimrc
    :q
       
### =======================================================%======vim 文件缓冲区
:h :buffers
:e      <=> :edit
:h      <=> :help
:ls     <=> :buffers
:b 2    <=> :buffers 2  
:bn     <=> :bnext
:bp     <=> :bprevious
:bl     <=> :blast
:bf     <=> :bfirst


### =======================================================%=========vim map映射
% :map {lhs} {rhs} 
:map作用的模式中把键系列{lhs} 映射为{rhs}，{rhs}可进行映射扫描，也就是可递归映射
% :noremap 和:map命令相对，作用模式和命令格式都相同，只不过不允许再对{rhs}进行映射扫描，
也就是{lhs}定义后的映射就是{rhs}的键序列，不会再 对{rhs}键序列重新解释扫描。
它一般用于重定义一个命令，当然如果:map不需要递归映射的话，建议试用:noremap 
% :unmap是对应取消:map绑定的｛lhs｝，作用模式相同，命令格式 :unmap {lhs}。
:unmap td 
就是取消在其作用模式中td的绑定，比如之前td被绑定为:tabnew .<cr>，此时此绑定消失
% :nnorempa和:nmap的关系和:noremap和:map的关系一样，只是:nmap的非递归版 
% :mapclear时对应取消所有:map绑定的，慎用！ 
% :nmapclear是对应取消所有:map绑定的，慎用！ 
        map                 % 递归映射
        nore                % 表示非递归
        n                   % 表示在普通模式下生效
        v                   % 表示在可视模式下生效
        i                   % 表示在插入模式下生效
        c                   % 表示在命令行模式下生效
___________________________________________________________       
% 下表是map绑定中，对应的模式代号。现在先了解一下，等看完之后再回过头看这个模式代号就会明白了
% 字 符 模 式 ~ ; <Space> 普通、可视、选择和操作符等待 
        n                   % 普通 
        v                   % 可视和选择 
        s                   % 选择 
        x                   % 可视 
        o                   % 操作符等待 
        !                   % 插入和命令行 
        i                   % 插入 
        l                   % 插入、命令行和 Lang-Arg 模式的 ":lmap" 映射 
        c                   % 命令行 

___________________________________________________________

@递归映射        @非递归映射        @删除映射        @清楚映射
map             noremap          unmap           mapclear                               
nmap            nnoremap         nunmap          nmapclear
vmap            vnoremap         vunmap          vmapclear
imap            inoremap         iunmap          imapclear
cmap            cnoremap         cunmap          cmapclear
___________________________________________________________

% 看 完以上，应该可以发现一个规律，前4个是一组，后4个时一组，
% 后一组比前一组多一个n就是指只作用于普通模式。其中每组内*nore*是其对应的非递归 版、
% *un*是取消绑定某个<lhs>绑定、clear后缀是取消所有绑定。发现了这个规律，再翻到前面的模式代号表，
% 你大体可以猜到 vmap、xmap、smap、omap是什么意思了吧，以及相对应的nore版本、un版本、clear版本。 
% :map  {lhs} {rhs}
% 另外----------------------
{rhs} 之前可能显示一个特殊字符: 
    * 表示它不可重映射 
    & 表示仅脚本的局部映射可以被重映射 
    @ 表示缓冲区的局部映射 
% 到这一步你可以轻松的长吸一口气，因为相关的命令已经都了解了，
% 记不住没关系，可以随时:help map一下。不过别急，后面还有map更多的选项等着去攻克。 
___________________________________________________________
特殊参数： 它们必须映射命令的后边，在其他任何参数的前面。
1. <buffer> 
2. <silent> 
3. <special> 
4. <script> 
5. <expr> 
6. <unique> 

<buffer>如果这些映射命令的第一个参数是<buffer>，映射将只局限于当前缓冲区（也就是你此时正编辑的文件）内。
比如 :map <buffer> ,w /a<CR> 
它的意思时在当前缓冲区里定义键绑定，“,w”将在当前缓冲区里查找字符a。同样你可以在其他缓冲区里定义： 
:map <buffer> ,w /b<CR> 
% 比如我经常打开多个标签(:tabedit)，想要在各自标签里定义",w"键绑定，
那么你只要在每个标签页里分别定义就可，其作用域也只在各自的标签里。
同样要清除这些缓冲区的键绑定也要加上<buffer>参数，比如： 
:unmap <buffer> ,w 
:mapclear <buffer> 

<silent>是指执行键绑定时不在命令行上回显，比如： 
:map <silent> ,w /abcd<CR> 
你在输入,w查找abcd时，命令行上不会显示/abcd，如果没有<silent>参数就会显示出来 

<special>一般用于定义特殊键怕有副作用的场合。比如： 
:map <special> <F12> /Header<CR> 

<unique>一般用于定义新的键映射或者缩写命令的同时检查是否该键已经被映射，如果该映射或者缩写已经存在，则该命令会失败 

<expr>. 如果定义新映射的第一个参数是<expr>，那么参数会作为表达式来进行计算，结果使用实际使用的<rhs>，例如： 
:inoremap <expr> . InsertDot() 
这可以用来检查光标之前的文本并在一定条件下启动全能 (omni) 补全。 
___________________________________________________________

% <Leader> mapleader 
mapleader变量对所有map映射命令起效，它的作用是将参数<leader>替换成mapleader变量的值，比如： 
:map <Leader>A oanother line<Esc> 
如果mapleader变量没有设置，则用默认的反斜杠代替，因此这个映射等效于： 
:map \A oanother line<Esc> 
意思时输入\A键时，在下一行输入another line并返回到普通模式。 
% 如果设置了mapleader变量，比如： 
let mapleader = "," 
% 那么就等效于： 
:map ,A oanother line<Esc> 

% 设置mapleader和maplocalleader时最好区分开，不要出现冲突
<LocalLeader> maplocalleader 
<LocalLeader>和<Leader>类似，只不过它只作用于缓冲区。 

___________________________________________________________


% map KEY KEYSTROKES
<F1> .. <F12>   Function Keys   功能键
<BS>            Backspace       退格键
<CR>            Enter           回车键
<Return>        Enter           回车键
<Esc>           Escape          逃出
<Space>         Space           空格键
<Up>            Up arrow        向上方向箭头
<Down>          Down arrow      向下方向箭头 
<Left>          Left arrow      向左方向箭头
<Right>         Right arrow     向右方向箭头
<Insert>        Insert          插入
<Del>           Delete          删除
<Home>          Home            家
<End>           End             结束
<PageUp>        Page-Up         向上翻页
<PageDown>      Page-Down       向下翻页
<Tab>           Tab             制表
<bar>           '|'
<C-x>           大写C配合x，意味着ctrl+x组合键
<S-x>           大写S配合x，意味着shift+x组合键
<A-x>           大写A配合x，意味着alt+x组合键

map <F2> iJohn Sith<CR>123 Main Street<CR>Anytoen, NY<CR><ESC>
map <F3> i<ul><CR><Space><Space><li></li><CR><Esc>0i</ul><Esc>kcit
map <F4> <Esc>o<li></li><Esc>cit
              
### =======================================================%======常用的键盘映射
map <silent><F1> :tabnew<CR>
map <silent><F2> :NERDTreeToggle<CR>
map <silent><F3> gT<CR>
map <silent><F4> gt<CR>
map <silent><F10> :diffthis<CR>
 
imap <silent><F1> <ESC>:tabnew<CR>
imap <silent><F2> <ESC>:NERDTreeToggle<CR>
imap <silent><F3> <ESC>gT<CR>
imap <silent><F4> <ESC>gt<CR>
imap <silent><F10> <ESC>:diffthis<CR>

map s <nop>
map S :w<CR>
map Q :q<CR>
map R :source $HOME/.vimrc<CR>

% vim 分屏
map si :set splitright<CR>:vsplit<CR>
map sn :set nosplitright<CR>:vsplit<CR>
map su :set nosplitbelow<CR>:split<CR>
map se :set splitbelow<CR>:split<CR>

% 分屏模式下切换
map <LEADER>i <C-w>l
map <LEADER>u <C-w>k
map <LEADER>n <C-w>h
map <LEADER>e <C-w>j

map <up> :res +5<CR>
map <down> :res -5<CR>
map <left> :vertical resize-5<CR>
map <right> :vertical resize+5<CR>

% 标签
map tu :tabe<CR>
map tn :-tabnext<CR>
map ti :+tabnext<CR>
map sv <C-w>t<C-w>H
map sh <C-w>t<C-w>k





% MYVIMRC 中文释义 ======================================================== START
""" VIM & 行号 & 光标设置 
set novisualbell        " turn off visual bell
set visualbell t_vb=    " turn off error beep/flash
set nocompatible        " 不与vi兼容(采用vim自己的操作命令)    
set showcmd             " 输入的命令显示出来，看的清楚些
set magic               " 设置魔术 

set number              " 显示行号           
set nowrap              " 不自动换行
set history=1000        " 历史记录数  
set ruler               " 在屏幕下方显示标尺
set showmode            " 在左下角显示当前的模式名称，没有显示则代表现在是常规模式
set scrolloff=3         " 光标移动到buffer的顶部和底部时保持3行距离  
set wildmenu            " visual autocomplete for command menu


""" colors & molokai配色主题
set cursorline          " 高亮显示当前行
syntax enable           " 语法高亮 
syntax on               " 语法高亮

set t_Co=256            " 启用256色 
set background=dark     " 设置背景色
let g:molokai_original=1
let g:rehash256=1


""" tab & 缩进 & 正常处理indent, eol, start等  
set noexpandtab         " 不要用空格代替制表符
set tabstop=4           " Tab键的宽度    
set softtabstop=4       " 统一缩进为4  
set shiftwidth=4        " 反向制表符中的空格数目 

set autoindent          " 设置自动缩进
set smartindent         " 比autoindent稍智能的自动缩进
set cindent             " cindent对c语法的缩进更加智能灵活   
set smarttab            " 解决 shiftwidth 和 tabstop 不等时的麻烦
 
set backspace=2         
" 使回格键（backspace）正常处理indent, eol, start等                       
" set backspace=indent,eol,start 
" 代表的意思是“缩进位置”，“行结束符”，“段首
" 这样设置可以使得 backspace 键在这三个特殊的位置也能进行回删动作

" set list listchars=eol:¬,tab:▸\ ,trail:.,
" list 开启对于制表符（tab）、行尾空格符（trail）、行结束符（eol）等等特殊符号的回显，
" 有助于你观察这些特殊符号的状态，精确地控制文本的编辑。

" set fillchars=vert:\ ,stl:\ ,stlnc:\   
" 在被分割的窗口间显示空白，便于阅读


""" 文件类型侦测 & 查找 & 文件备份 
filetype on             " 侦测文件类型     
filetype indent on      " 文件类型，开启缩进规则
filetype plugin on      " 顾名思义，这是开启对应插件的 

" set ignorecase        " 搜索忽略大小写    
set hlsearch            " 搜索逐字符高亮  
set incsearch           " 输入搜索内容时就显示搜索结果    
set showmatch           " 高亮显示匹配的括号     
set matchtime=5         " 匹配括号高亮的时间（单位是十分之一秒）
set smartcase           " 此选项的开启会让搜索模式更加聪明

set nobackup            " 用来控制我们是否为当前正在编辑的文件建立备份
set confirm             " 在处理未保存或只读文件的时候，弹出确认


""" 编码设置 & 语言设置 & 鼠标设置
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936
set fileencoding=gb2312
set termencoding=utf-8

set langmenu=zh_CN.UTF-8  
set helplang=cn

set mouse=a  
set selection=exclusive  
set selectmode=mouse,key  


""" 窗口切换  & 自动括号补全 & 命令行模式增强
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

inoremap ( ()<ESC>i
inoremap [ []<ESC>i
inoremap { {}<ESC>i<CR><ESC>O 
""inoremap < <><ESC>i
inoremap " ""<ESC>i

cnoremap <C-a> <Home>
cnoremap <C-e> <End>
% MYVIMRC 中文释义 ========================================================== END

 




% =============================================================================
% a good vimrc

""""""""""""""" Colors
syntax enable           " enable syntax processing


""""""""""""""" Spaces & Tabs
set tabstop=4           " number of visual spaces per TAB
set softtabstop=4   " number of spaces in tab when editing
set expandtab       " tabs are spaces


""""""""""""""" UI Config
set number              " show line numbers
set showcmd             " show command in bottom bar
set cursorline          " highlight current line
filetype indent on      " load filetype-specific indent files
set lazyredraw          " redraw only when we need to.
set wildmenu            " visual autocomplete for command menu
set showmatch           " highlight matching [{()}]


""""""""""""""" Searching
et incsearch           " search as characters are entered
set hlsearch           " highlight matches

" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>


""""""""""""""" Folding
set foldenable          " enable folding
set foldlevelstart=10   " open most folds by default
set foldnestmax=10      " 10 nested fold max

" space open/closes folds
nnoremap <space> za

set foldmethod=indent   " fold based on indent level


""""""""""""""" Movement
" move vertically by visual line
nnoremap j gj
nnoremap k gk

" move to beginning/end of line
nnoremap B ^
nnoremap E $

" $/^ doesn't do anything
nnoremap $ <nop>
nnoremap ^ <nop>

" highlight last inserted text
nnoremap gV `[v`]


""""""""""""""" Leader Shortcuts
let mapleader=","       " leader is comma

" jk is escape
inoremap jk <esc>

" toggle gundo
nnoremap <leader>u :GundoToggle<CR>

" edit vimrc/zshrc and load vimrc bindings
nnoremap <leader>ev :vsp $MYVIMRC<CR>
nnoremap <leader>ez :vsp ~/.zshrc<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

" save session
nnoremap <leader>s :mksession<CR>

" open ag.vim
nnoremap <leader>a :Ag


""""""""""""""" CtrlP
" CtrlP settings
let g:ctrlp_match_window = 'bottom,order:ttb'
let g:ctrlp_switch_buffer = 0
let g:ctrlp_working_path_mode = 0
let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'


""""""""""""""" Launch Config
call pathogen#infect()                      " use pathogen
call pathogen#runtime_append_all_bundles()  " use pathogen

% The pathogen options extract all of the Vim plugins from their location in ~/.vim/bundles to their respective places in the ~/.vim folder.

""""""""""""""" Tmux
" allows cursor change in tmux mode
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif


""""""""""""""" Autogroups
augroup configgroup
    autocmd!
    autocmd VimEnter * highlight clear SignColumn
    autocmd BufWritePre *.php,*.py,*.js,*.txt,*.hs,*.java,*.md
                \:call <SID>StripTrailingWhitespaces()
    autocmd FileType java setlocal noexpandtab
    autocmd FileType java setlocal list
    autocmd FileType java setlocal listchars=tab:+\ ,eol:-
    autocmd FileType java setlocal formatprg=par\ -w80\ -T4
    autocmd FileType php setlocal expandtab
    autocmd FileType php setlocal list
    autocmd FileType php setlocal listchars=tab:+\ ,eol:-
    autocmd FileType php setlocal formatprg=par\ -w80\ -T4
    autocmd FileType ruby setlocal tabstop=2
    autocmd FileType ruby setlocal shiftwidth=2
    autocmd FileType ruby setlocal softtabstop=2
    autocmd FileType ruby setlocal commentstring=#\ %s
    autocmd FileType python setlocal commentstring=#\ %s
    autocmd BufEnter *.cls setlocal filetype=java
    autocmd BufEnter *.zsh-theme setlocal filetype=zsh
    autocmd BufEnter Makefile setlocal noexpandtab
    autocmd BufEnter *.sh setlocal tabstop=2
    autocmd BufEnter *.sh setlocal shiftwidth=2
    autocmd BufEnter *.sh setlocal softtabstop=2
augroup END


""""""""""""""" Backups
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup


""""""""""""""" Custom Functions
" toggle between number and relativenumber
function! ToggleNumber()
    if(&relativenumber == 1)
        set norelativenumber
        set number
    else
        set relativenumber
    endif
endfunc

" strips trailing whitespace at the end of files. this
" is called on buffer write in the autogroup above.
function! <SID>StripTrailingWhitespaces()
    " save last search & cursor position
    let _s=@/
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    let @/=_s
    call cursor(l, c)
endfunction


% =============================================================================



