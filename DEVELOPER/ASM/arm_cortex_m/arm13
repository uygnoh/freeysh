### ============================================================== 程序结构
1 汇编语言的源文件后缀名为”.s“。
  程序以段为单位组织代码，可以分为数据段和代码段，
  代码段的内容为执行代码，数据段存放代码运行时需要用到的数据。
  
2 一个汇编程序至少有一个代码段，当程序较长时，可以分割为多个代码段和数据段。
  多个段在程序编译链接时最终形成一个可执行的映象文件。
  链接器根据系统默认或用户设定的规则，将各个段安排在存储器中相应位置。
  
3 因此源程序中段之间的相应位置与可执行的映象文件中段的相对位置一般不会相同。



### ==============================================================
% 可执行映象文件通常由以下几部分组成
1 一个或多个代码段，代码段的属性为只读
2 零个或多个包含初始化数据的数据段，数据段的属性为可读可写。
3 零个或多个不包含初始化数据的数据段，数据段的属性为可读可写。
4 在汇编语言程序中，用AREA伪指令定义段，并说明所定义段的相关属性。
  ENTRY伪指令标识程序的入口点，接下来为指令序列，程序的末尾为END伪指令，
  该伪指令告诉编译器源文件的结束。
5 每一个程序段都必须有一条END指令，指示代码段的结束 。



### ========================================================== 子程序的调用
% 在ARM汇编语言程序中，子程序的调用一般是通过BL指令来实现的。
使用格式：   BL 子程序名

1 运行时，将子程序的返回地址存放在连接寄存器LR中，
  同时将程序计数器PC指向子程序入口点，
  当子程序执行完毕需要返回调用处时，
  只需要将LR中的返回地址重新复制给程序计数器PC即可。
2 在调用子程序的同时，也可以完成参数的传递和从子程序返回运算结果，
  通常可以使用R0～R3来完成。
  
以下是使用BL指令调用子程序的汇编语言源程序的基本结构：
AREA Init, CODE, READONLY
ENTRY
Start
    LDR R0, =0x3FF5000
    LDR R1, 0xFF
    STR R1, [R0]
    LDR R0, =0x3ff5008
    LDR R1, 0x01
    STR R1, [R0]
    BL  Next
    ...
    Next
        ...
        MOV PC, LR
    ...
END
    


### ============================================================== 汇编语言
1 汇编语言(Assembly Language)是一种用于电子计算机，微处理器，微控制器
  或其它可编程器件的低级语言，又称为“符号语言”。
2 在汇编语言中，用助记符代替机器指令的操作码，
  用地址符号或标号代替指令或操作数的地址。
3 在不同的设备中，汇编语言对应着不同的机器语言指令集，
  通过汇编过程转换成机器指令。一般情况下，不同平台之间不可直接移植。
4 它通常被用在底层，硬件操作和高要求的程序优化的场合。
  驱动程序，嵌入式操作系统和实时运行程序都需要汇编语言。
5 伪指令(Pseudo instruction)用于告诉汇编程序如何进行汇编的指令
  它既不控制机器的操作也不被汇编成机器码，
  只能为汇编程序所识别并指导汇编如何进行，
  并将相对于程序或相对于寄存器的地址载入寄存器中。
6 最早macro来源于“macro-assemblers”,
  意思是可以将一系列的计算机指令作一个程序那样使用，
  使用简单又能满足复杂要求。


















