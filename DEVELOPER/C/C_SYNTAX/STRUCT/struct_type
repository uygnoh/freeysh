### ======================================================= 结构作为函数的参数

int number_days(struct date days);

1 整个结构可以作为参数的值传入函数
2 这时候是在函数内新建一个结构变量，并复制调用者的结构的值
3 也可以返回一个结构
4 这与数组完全不同


#include <stdio.h>
#include <stdbool.h>

struct date {
	int month;
	int day;
	int year;
};

bool is_leap(struct date d);
int number_days(struct date d);


int main(int argc, cahr const *argv[]) {
	struct date today, tomorrow;
	
	printf("Enter today's date (mm dd yy):");
	scanf("%i %i %i", &today.month, &today.day, &today.year);
	
	if (today.day != number_days(today)) {
		tomorrow.day = today.day+1;
		tomorrow.month = today.month;
		tomorrow.year = today.year;
	} else if (today.month == 12) {
		tomorrow.day = 1;
		tomorrow.month = 1;
		tomorrow.year = today.year+1;
	} else {
		tomorrow.day = 1;
		tomorrow.month = today.month+1;
		tomorrow.year = today.year;
	}
	
	printf("Tomorrow's date is %i-%i-%i.\n", tomorrow.year, tomorrow.month, tomorrow.day);
	
	return 0;
}



int number_days(struct date d) {
	int days;
	const int day_per_month[12] = {31, 28, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31};
	
	if (d.month == 2 && is_leap(d)
		days = 29;
	else
		days = days_per_month[d.month-1];
	
	return days;
}


bool_is_leap(struct date d) {
	bool leap = false;
	
	if ( (d.year %4 == 0 && d.year%100 != 0) || d.year%400 == 0 )
		leap = true;
	return leap;
}



### ======================================================= 结构指针作为参数

K & R 说过(p, 131)
" if a large structure is to be passed to a
  function , it is generally more efficient to
  pass a pointer than to copy the whole
  structure "
  
  
  
struct date {
	int month;
	int day;
	int year;
} myday;

struct date *p = &myday;  

(*p).month = 12;
p->month = 12;
  
  
  
  
#include <stdio.h>

struct point {
	int x;
	int y;
}; 
  
struct point *get_struct(struct point *);
void ouput(struct point);
void print(const struct point *p);


int main(int argc, char const *argv[]) {
	struct point xyz = {0, 0};
	get_struct(&xyz);
	output(xyz);
	output(*get_struct(&xyz));
	print(get_struct(&xyz));
}


struct point *get_struct(struct point *p) {
	scanf("%d", &p->x);
	scanf("%d", &p->y);
	printf("%d, %d\n", p->x, p->y);
	return p;
}


void output(struct point p) {
	printf("%d, %d\n", p.x, p.y);
}


void print(const struct point *p) {
	printf("%d, %d\n", p->x, p->y);
}



  
