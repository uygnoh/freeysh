### =============================================== BASH Regular Expression

____________________________________________________________
.               匹配除了换行符外的任意 1个字符
____________________________________________________________
*               表示前面1个字符匹配0次或任意多次(aa* 匹配一个a)
____________________________________________________________
\               转义字符
____________________________________________________________
?               表示前面1个字符匹配0次或1次
____________________________________________________________
+               表示前面1个字符匹配1次或任意多次
____________________________________________________________
|               表示或关系
____________________________________________________________

[]              匹配中括号中任意 1个字符
____________________________________________________________
[^ ]            匹配除中括号指定的任意 1个字符([^0-9])
____________________________________________________________
\{n\}           表示其前面字符正好出现n次
                [0-9]\{4\} 匹配4位数字
____________________________________________________________           
\{n,\}          表示其前面数字出现不小于n次
                [0-9]\{2,\} 匹配2位以上数字
____________________________________________________________       
\{n,m\}         表示其前面字符出现至少n次，最多出现m次
                [a-z]\{6,8\} 匹配6到8位小写字母
                
                

### ============================================================== 位置锚定
^               匹配行首.例如: ^hello 匹配以hello开头的行
$               匹配行尾.例如: hello$ 匹配以hello结尾的行
^$              匹配空白行
^[[:space:]]*$  就是匹配N个空格，所以就是空白行 
\<              词首锚定，用于单词模式的左侧
\>              词尾锚定，用于单词模式的右侧
\<PATTERN\>     单词锚定，匹配整个单词，用于单词两侧。




### ============================================================== 分组机制
\(\)    将一个或多个字符捆绑在一起，当做一个整体时行处理。
        后向引用：引用前面分组括号中的模式所匹配到的字符(而不是模式本身)
Note：  分组括号中的模式所匹配到的内容会被正则表左式引擎记录于内部变量中，
        这些变量的命明方式为：\1, \2, \3, ...
        
        
        

### ========================================================= bash 特殊符号 
\               转义符
|               管道符
;               连续命令分割符
$               调用变量的值
&               工作台控制(job control),将命令放入后台执行
/               路径分割符
> >>            文件输出重定向,分别代表 覆盖和追加
< <<            文件输入重定向,分别代表 覆盖和追加
' '             单引号,不具备变量置换功能(单引号会把里面的内容原样输出)
" "             双引号,具有变量置换功能, $可保留相关功能
` `             反引号,它的中间为可执行指令.
$()             与反引号功能一样,用于调用系统命令
{}              中间为命令块的组合.
()              中间为 shell 的起始和结束
~               使用者的家目錄
!               邏輯運算意義上的非,not 的意思！


### ============================================================= 特殊符號
特殊符號         代表意義
[:alnum:]       字母和数字,可以用来替代'a-z, A-Z, 0-9' 
[:alpha:]       字母，可以用来替代'a-z, A-Z' 
[:blank:]       代表空白鍵 與[Tab] 按鍵兩者
[:cntrl:]       代表鍵盤上面的控制按鍵，亦即包括 CR, LF, Tab, Del.. 等等 
[:digit:]       数字,可以用来替代'0-9' 
[:graph:]       图形字符 
[:lower:]       小写字母,可以用来替代'a-z' 
[:print:]       可打印字符 
[:punct:]       代表標點符號 (punctuation symbol)，亦即：" ' ? ! ; : # $... 
[:space:]       空白字符, 包括空白鍵, [Tab], CR 等等
[:upper:]       大写字母,可以用来替代'A-Z' 
[:xdigit:]      十六进制字符, 因此包括： 0-9, A-F, a-f 的數字與字元
___________________________________________________________
  \\        	反斜杠
  \a        	终端鸣响
  \b        	退格
  \f        	换页
  \n        	换行
  \r        	回车
  \t        	水平制表符
  \v        	垂直制表符
  \0        	null字符
  




### ================================================================ 元字符和集合 
___________________________________________________________
            正则表达式的特殊字符(元字符)6个元字符

	            . 	* 	[	\ 	^ 	$
	            
	            
___________________________________________________________
转义字符(\), 正则表达式\*与字符串*匹配,与字符串\*不匹配
转义字符后除以上六种之外的不该出现其他字符,例如:不该出现\u,这样
的组合被视为undefined(未定义的),后出的软件有可能会有特殊的解释


	            \. \* \$ \^ \[ \\


	

___________________________________________________________	
                单字符正则表达式:定义集合(1)
                                
基本用法
在一对方括号之间的字符为集合的内容,
	如:单字符正则表达式[abcd]与a或b,c,d匹配
圆点,星号,反斜线在方括号内时,代表它们自己
	如:[\*.]可匹配3个单字符



___________________________________________________________
                单字符正则表达式:定义集合(2)
                
用减号-定义一个区间
	如[a-d] [A-Z] [a-zA-Z0-9]
	[][] 集合含左右中括号两个字符
	减号在最后,则失去表示区间的意义
	[ad-]只与3个字符匹配

用^表示补集
	^在开头,则表示与集合内字符之外的任意字符匹配
	如:[^a-z]匹配任一非小写字母
	[^][]匹配任一非中括号字符

^不在开头,则失去其表示补集的意义
	如:[a-z^]能匹配27个单字符
	
	
	
### ================================================================= 组合与锚点 

_________________________________________________
                    单字符正则表达式的组合(1)
串结
	如abc, [A-Z].[0-9]·
	
	
_________________________________________________
                        星号(*)
                        
                        
单字符正则表达式后跟*,匹配此单字符正则表达式的0次或任意多次出现
例:正则表达式12*4
% 与字符串1234不匹配,与1224,12224,14匹配
	
	
	
_________________________________________________	
                正则表达式[A-Z][0-9]*


此例中*作用的单字符正则表式为[0-9],
代表
[A-Z]
[A-Z][0-9]
[A-Z][0-9][0-9]
[A-Z][0-9][0-9][0-9],等等匹配

% 与A,A1,C45,D768匹配,与b64512,T56t不匹配


_________________________________________________
                单字符正则表达式的组合(2)
                
                
例:正则表达式[Cc]hapter *[1-4]
	在*号前有一个空格,允许数字1-4之前有多个或者0个空格。可匹配
	Chapter2, chapter 3等等。
例:正则表达式a\[i] *= *b\[j] *\* *c\[k]
	匹配字符串a[i]=b[j]*c[k],容许等号和星号两侧有空格
例:在vi中使用
	:1,$s/[0-9]*/xx/g



_________________________________________________
                    锚点:$与^
                    

$ 在尾部时有特殊意义,否则与其自身匹配
	例:123$ 匹配文件中行尾的123,不在行尾的123字符不匹配
	例:$123与字符串$123匹配
	例:.$ 匹配行尾的任意字符
	
^ 在首部时有特殊意义,否则与其自身匹配
	例:^printf匹配行首的printf字符串,不在行首的printf串不匹配
	例:Hel^lo与字符串Hel^lo匹配
	例:在vi中使用 :10,50s/^//g
	删除10-50行的每行行首的4个空格	
	
	
	
#### ========================================================  正则表达式扩展
ERE:扩展的正则表达式(ERE)
PCRE: Perl-compatible regular expression
___________________________________________________________
            对基本正则表达式( BRE )进行了改进:

()                  # 表示分组:
|				    # 表示逻辑运算:表示逻辑“或” 的符号 
(xy)*               # 可匹配空字符串,xy,xyxy,xyxyxy
(pink|green)        # 与pink或green匹配
\{m,n\}	            # 重复次数定义:与星号地位类似的+和?,限定重复次数 
*                   # 号表示它左边的单字符正则表达式的0次或多次重复
+                   # 号表示1次或多次: [0-9]+ 匹配长度至少为1数字串
?                   # 表示0次或一次: a?匹配零个或一个a	 
[1-9][0-9]\{6,8\}   # [限定重复次数 \{m,n\}]; 匹配6～8位数字





### ======================================================== RE 字符	意義與範例

___________________________________________________________
+	意義：重複『一個或一個以上』的前一個 RE 字符
    範例：搜尋 (god) (good) (goood)... 等等的字串。 
    那個 o+ 代表『一個以上的 o 』所以，
    底下的執行成果會將第 1, 9, 13 行列出來。

    egrep -n 'go+d' regular_express.txt
___________________________________________________________
?	意義：『零個或一個』的前一個 RE 字符
    範例：搜尋 (gd) (god) 這兩個字串。 
    那個 o? 代表『空的或 1 個 o 』所以，
    上面的執行成果會將第 13, 14 行列出來。 
    有沒有發現到，這兩個案例( 'go+d' 與 'go?d' )的結果集合與 'go*d' 相同？ 
    想想看，這是為什麼喔！ ^_^

    egrep -n 'go?d' regular_express.txt
    
    
___________________________________________________________
|	意義：用或( or )的方式找出數個字串
    範例：搜尋 gd 或 good 這兩個字串，注意，是『或』！ 
    所以，第 1,9,14 這三行都可以被列印出來喔！那如果還想要找出 dog 呢？

    egrep -n 'gd|good' regular_express.txt
    egrep -n 'gd|good|dog' regular_express.txt
    
___________________________________________________________
()	意義：找出『群組』字串
    範例：搜尋 (glad) 或 (good) 這兩個字串，
    因為 g 與 d 是重複的，所以， 我就可以將 la 與 oo 列於 ( ) 當中，
    並以 | 來分隔開來，就可以啦！

    egrep -n 'g(la|oo)d' regular_express.txt
    
___________________________________________________________
()+	意義：多個重複群組的判別
    範例：將『AxyzxyzxyzxyzC』用 echo 叫出，然後再使用如下的方法搜尋一下！

    echo 'AxyzxyzxyzxyzC' | egrep 'A(xyz)+C'

上面的例子意思是說，我要找開頭是 A 結尾是 C ，中間有一個以上的 "xyz" 字串的意思～

