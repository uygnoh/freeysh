                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module stm8s_tim4
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _assert_failed
                                     12 	.globl _TIM4_DeInit
                                     13 	.globl _TIM4_TimeBaseInit
                                     14 	.globl _TIM4_Cmd
                                     15 	.globl _TIM4_ITConfig
                                     16 	.globl _TIM4_UpdateDisableConfig
                                     17 	.globl _TIM4_UpdateRequestConfig
                                     18 	.globl _TIM4_SelectOnePulseMode
                                     19 	.globl _TIM4_PrescalerConfig
                                     20 	.globl _TIM4_ARRPreloadConfig
                                     21 	.globl _TIM4_GenerateEvent
                                     22 	.globl _TIM4_SetCounter
                                     23 	.globl _TIM4_SetAutoreload
                                     24 	.globl _TIM4_GetCounter
                                     25 	.globl _TIM4_GetPrescaler
                                     26 	.globl _TIM4_GetFlagStatus
                                     27 	.globl _TIM4_ClearFlag
                                     28 	.globl _TIM4_GetITStatus
                                     29 	.globl _TIM4_ClearITPendingBit
                                     30 ;--------------------------------------------------------
                                     31 ; ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DATA
                                     34 ;--------------------------------------------------------
                                     35 ; ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area INITIALIZED
                                     38 ;--------------------------------------------------------
                                     39 ; absolute external ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area DABS (ABS)
                                     42 
                                     43 ; default segment ordering for linker
                                     44 	.area HOME
                                     45 	.area GSINIT
                                     46 	.area GSFINAL
                                     47 	.area CONST
                                     48 	.area INITIALIZER
                                     49 	.area CODE
                                     50 
                                     51 ;--------------------------------------------------------
                                     52 ; global & static initialisations
                                     53 ;--------------------------------------------------------
                                     54 	.area HOME
                                     55 	.area GSINIT
                                     56 	.area GSFINAL
                                     57 	.area GSINIT
                                     58 ;--------------------------------------------------------
                                     59 ; Home
                                     60 ;--------------------------------------------------------
                                     61 	.area HOME
                                     62 	.area HOME
                                     63 ;--------------------------------------------------------
                                     64 ; code
                                     65 ;--------------------------------------------------------
                                     66 	.area CODE
                                     67 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 49: void TIM4_DeInit(void)
                                     68 ;	-----------------------------------------
                                     69 ;	 function TIM4_DeInit
                                     70 ;	-----------------------------------------
      000000                         71 _TIM4_DeInit:
                                     72 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 51: TIM4->CR1 = TIM4_CR1_RESET_VALUE;
      000000 35 00 53 40      [ 1]   73 	mov	0x5340+0, #0x00
                                     74 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 52: TIM4->IER = TIM4_IER_RESET_VALUE;
      000004 35 00 53 43      [ 1]   75 	mov	0x5343+0, #0x00
                                     76 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 53: TIM4->CNTR = TIM4_CNTR_RESET_VALUE;
      000008 35 00 53 46      [ 1]   77 	mov	0x5346+0, #0x00
                                     78 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 54: TIM4->PSCR = TIM4_PSCR_RESET_VALUE;
      00000C 35 00 53 47      [ 1]   79 	mov	0x5347+0, #0x00
                                     80 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 55: TIM4->ARR = TIM4_ARR_RESET_VALUE;
      000010 35 FF 53 48      [ 1]   81 	mov	0x5348+0, #0xff
                                     82 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 56: TIM4->SR1 = TIM4_SR1_RESET_VALUE;
      000014 35 00 53 44      [ 1]   83 	mov	0x5344+0, #0x00
                                     84 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 57: }
      000018 81               [ 4]   85 	ret
                                     86 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 65: void TIM4_TimeBaseInit(TIM4_Prescaler_TypeDef TIM4_Prescaler, uint8_t TIM4_Period)
                                     87 ;	-----------------------------------------
                                     88 ;	 function TIM4_TimeBaseInit
                                     89 ;	-----------------------------------------
      000019                         90 _TIM4_TimeBaseInit:
                                     91 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 68: assert_param(IS_TIM4_PRESCALER_OK(TIM4_Prescaler));
      000019 0D 03            [ 1]   92 	tnz	(0x03, sp)
      00001B 27 38            [ 1]   93 	jreq	00104$
      00001D 7B 03            [ 1]   94 	ld	a, (0x03, sp)
      00001F 4A               [ 1]   95 	dec	a
      000020 27 33            [ 1]   96 	jreq	00104$
      000022 7B 03            [ 1]   97 	ld	a, (0x03, sp)
      000024 A1 02            [ 1]   98 	cp	a, #0x02
      000026 27 2D            [ 1]   99 	jreq	00104$
      000028 7B 03            [ 1]  100 	ld	a, (0x03, sp)
      00002A A1 03            [ 1]  101 	cp	a, #0x03
      00002C 27 27            [ 1]  102 	jreq	00104$
      00002E 7B 03            [ 1]  103 	ld	a, (0x03, sp)
      000030 A1 04            [ 1]  104 	cp	a, #0x04
      000032 27 21            [ 1]  105 	jreq	00104$
      000034 7B 03            [ 1]  106 	ld	a, (0x03, sp)
      000036 A1 05            [ 1]  107 	cp	a, #0x05
      000038 27 1B            [ 1]  108 	jreq	00104$
      00003A 7B 03            [ 1]  109 	ld	a, (0x03, sp)
      00003C A1 06            [ 1]  110 	cp	a, #0x06
      00003E 27 15            [ 1]  111 	jreq	00104$
      000040 7B 03            [ 1]  112 	ld	a, (0x03, sp)
      000042 A1 07            [ 1]  113 	cp	a, #0x07
      000044 27 0F            [ 1]  114 	jreq	00104$
      000046 4B 44            [ 1]  115 	push	#0x44
      000048 5F               [ 1]  116 	clrw	x
      000049 89               [ 2]  117 	pushw	x
      00004A 4B 00            [ 1]  118 	push	#0x00
      00004C 4Br00            [ 1]  119 	push	#<___str_0
      00004E 4Bs00            [ 1]  120 	push	#(___str_0 >> 8)
      000050 CDr00r00         [ 4]  121 	call	_assert_failed
      000053 5B 06            [ 2]  122 	addw	sp, #6
      000055                        123 00104$:
                                    124 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 70: TIM4->PSCR = (uint8_t)(TIM4_Prescaler);
      000055 AE 53 47         [ 2]  125 	ldw	x, #0x5347
      000058 7B 03            [ 1]  126 	ld	a, (0x03, sp)
      00005A F7               [ 1]  127 	ld	(x), a
                                    128 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 72: TIM4->ARR = (uint8_t)(TIM4_Period);
      00005B AE 53 48         [ 2]  129 	ldw	x, #0x5348
      00005E 7B 04            [ 1]  130 	ld	a, (0x04, sp)
      000060 F7               [ 1]  131 	ld	(x), a
                                    132 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 73: }
      000061 81               [ 4]  133 	ret
                                    134 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 81: void TIM4_Cmd(FunctionalState NewState)
                                    135 ;	-----------------------------------------
                                    136 ;	 function TIM4_Cmd
                                    137 ;	-----------------------------------------
      000062                        138 _TIM4_Cmd:
                                    139 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 84: assert_param(IS_FUNCTIONALSTATE_OK(NewState));
      000062 0D 03            [ 1]  140 	tnz	(0x03, sp)
      000064 27 14            [ 1]  141 	jreq	00107$
      000066 7B 03            [ 1]  142 	ld	a, (0x03, sp)
      000068 4A               [ 1]  143 	dec	a
      000069 27 0F            [ 1]  144 	jreq	00107$
      00006B 4B 54            [ 1]  145 	push	#0x54
      00006D 5F               [ 1]  146 	clrw	x
      00006E 89               [ 2]  147 	pushw	x
      00006F 4B 00            [ 1]  148 	push	#0x00
      000071 4Br00            [ 1]  149 	push	#<___str_0
      000073 4Bs00            [ 1]  150 	push	#(___str_0 >> 8)
      000075 CDr00r00         [ 4]  151 	call	_assert_failed
      000078 5B 06            [ 2]  152 	addw	sp, #6
      00007A                        153 00107$:
                                    154 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 89: TIM4->CR1 |= TIM4_CR1_CEN;
      00007A C6 53 40         [ 1]  155 	ld	a, 0x5340
                                    156 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 87: if (NewState != DISABLE)
      00007D 0D 03            [ 1]  157 	tnz	(0x03, sp)
      00007F 27 06            [ 1]  158 	jreq	00102$
                                    159 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 89: TIM4->CR1 |= TIM4_CR1_CEN;
      000081 AA 01            [ 1]  160 	or	a, #0x01
      000083 C7 53 40         [ 1]  161 	ld	0x5340, a
      000086 81               [ 4]  162 	ret
      000087                        163 00102$:
                                    164 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 93: TIM4->CR1 &= (uint8_t)(~TIM4_CR1_CEN);
      000087 A4 FE            [ 1]  165 	and	a, #0xfe
      000089 C7 53 40         [ 1]  166 	ld	0x5340, a
                                    167 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 95: }
      00008C 81               [ 4]  168 	ret
                                    169 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 107: void TIM4_ITConfig(TIM4_IT_TypeDef TIM4_IT, FunctionalState NewState)
                                    170 ;	-----------------------------------------
                                    171 ;	 function TIM4_ITConfig
                                    172 ;	-----------------------------------------
      00008D                        173 _TIM4_ITConfig:
      00008D 88               [ 1]  174 	push	a
                                    175 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 110: assert_param(IS_TIM4_IT_OK(TIM4_IT));
      00008E 7B 04            [ 1]  176 	ld	a, (0x04, sp)
      000090 4A               [ 1]  177 	dec	a
      000091 27 0F            [ 1]  178 	jreq	00107$
      000093 4B 6E            [ 1]  179 	push	#0x6e
      000095 5F               [ 1]  180 	clrw	x
      000096 89               [ 2]  181 	pushw	x
      000097 4B 00            [ 1]  182 	push	#0x00
      000099 4Br00            [ 1]  183 	push	#<___str_0
      00009B 4Bs00            [ 1]  184 	push	#(___str_0 >> 8)
      00009D CDr00r00         [ 4]  185 	call	_assert_failed
      0000A0 5B 06            [ 2]  186 	addw	sp, #6
      0000A2                        187 00107$:
                                    188 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 111: assert_param(IS_FUNCTIONALSTATE_OK(NewState));
      0000A2 0D 05            [ 1]  189 	tnz	(0x05, sp)
      0000A4 27 14            [ 1]  190 	jreq	00109$
      0000A6 7B 05            [ 1]  191 	ld	a, (0x05, sp)
      0000A8 4A               [ 1]  192 	dec	a
      0000A9 27 0F            [ 1]  193 	jreq	00109$
      0000AB 4B 6F            [ 1]  194 	push	#0x6f
      0000AD 5F               [ 1]  195 	clrw	x
      0000AE 89               [ 2]  196 	pushw	x
      0000AF 4B 00            [ 1]  197 	push	#0x00
      0000B1 4Br00            [ 1]  198 	push	#<___str_0
      0000B3 4Bs00            [ 1]  199 	push	#(___str_0 >> 8)
      0000B5 CDr00r00         [ 4]  200 	call	_assert_failed
      0000B8 5B 06            [ 2]  201 	addw	sp, #6
      0000BA                        202 00109$:
                                    203 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 116: TIM4->IER |= (uint8_t)TIM4_IT;
      0000BA C6 53 43         [ 1]  204 	ld	a, 0x5343
                                    205 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 113: if (NewState != DISABLE)
      0000BD 0D 05            [ 1]  206 	tnz	(0x05, sp)
      0000BF 27 07            [ 1]  207 	jreq	00102$
                                    208 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 116: TIM4->IER |= (uint8_t)TIM4_IT;
      0000C1 1A 04            [ 1]  209 	or	a, (0x04, sp)
      0000C3 C7 53 43         [ 1]  210 	ld	0x5343, a
      0000C6 20 0C            [ 2]  211 	jra	00104$
      0000C8                        212 00102$:
                                    213 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 121: TIM4->IER &= (uint8_t)(~TIM4_IT);
      0000C8 88               [ 1]  214 	push	a
      0000C9 7B 05            [ 1]  215 	ld	a, (0x05, sp)
      0000CB 43               [ 1]  216 	cpl	a
      0000CC 6B 02            [ 1]  217 	ld	(0x02, sp), a
      0000CE 84               [ 1]  218 	pop	a
      0000CF 14 01            [ 1]  219 	and	a, (0x01, sp)
      0000D1 C7 53 43         [ 1]  220 	ld	0x5343, a
      0000D4                        221 00104$:
                                    222 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 123: }
      0000D4 84               [ 1]  223 	pop	a
      0000D5 81               [ 4]  224 	ret
                                    225 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 131: void TIM4_UpdateDisableConfig(FunctionalState NewState)
                                    226 ;	-----------------------------------------
                                    227 ;	 function TIM4_UpdateDisableConfig
                                    228 ;	-----------------------------------------
      0000D6                        229 _TIM4_UpdateDisableConfig:
                                    230 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 134: assert_param(IS_FUNCTIONALSTATE_OK(NewState));
      0000D6 0D 03            [ 1]  231 	tnz	(0x03, sp)
      0000D8 27 14            [ 1]  232 	jreq	00107$
      0000DA 7B 03            [ 1]  233 	ld	a, (0x03, sp)
      0000DC 4A               [ 1]  234 	dec	a
      0000DD 27 0F            [ 1]  235 	jreq	00107$
      0000DF 4B 86            [ 1]  236 	push	#0x86
      0000E1 5F               [ 1]  237 	clrw	x
      0000E2 89               [ 2]  238 	pushw	x
      0000E3 4B 00            [ 1]  239 	push	#0x00
      0000E5 4Br00            [ 1]  240 	push	#<___str_0
      0000E7 4Bs00            [ 1]  241 	push	#(___str_0 >> 8)
      0000E9 CDr00r00         [ 4]  242 	call	_assert_failed
      0000EC 5B 06            [ 2]  243 	addw	sp, #6
      0000EE                        244 00107$:
                                    245 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 139: TIM4->CR1 |= TIM4_CR1_UDIS;
      0000EE C6 53 40         [ 1]  246 	ld	a, 0x5340
                                    247 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 137: if (NewState != DISABLE)
      0000F1 0D 03            [ 1]  248 	tnz	(0x03, sp)
      0000F3 27 06            [ 1]  249 	jreq	00102$
                                    250 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 139: TIM4->CR1 |= TIM4_CR1_UDIS;
      0000F5 AA 02            [ 1]  251 	or	a, #0x02
      0000F7 C7 53 40         [ 1]  252 	ld	0x5340, a
      0000FA 81               [ 4]  253 	ret
      0000FB                        254 00102$:
                                    255 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 143: TIM4->CR1 &= (uint8_t)(~TIM4_CR1_UDIS);
      0000FB A4 FD            [ 1]  256 	and	a, #0xfd
      0000FD C7 53 40         [ 1]  257 	ld	0x5340, a
                                    258 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 145: }
      000100 81               [ 4]  259 	ret
                                    260 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 155: void TIM4_UpdateRequestConfig(TIM4_UpdateSource_TypeDef TIM4_UpdateSource)
                                    261 ;	-----------------------------------------
                                    262 ;	 function TIM4_UpdateRequestConfig
                                    263 ;	-----------------------------------------
      000101                        264 _TIM4_UpdateRequestConfig:
                                    265 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 158: assert_param(IS_TIM4_UPDATE_SOURCE_OK(TIM4_UpdateSource));
      000101 0D 03            [ 1]  266 	tnz	(0x03, sp)
      000103 27 14            [ 1]  267 	jreq	00107$
      000105 7B 03            [ 1]  268 	ld	a, (0x03, sp)
      000107 4A               [ 1]  269 	dec	a
      000108 27 0F            [ 1]  270 	jreq	00107$
      00010A 4B 9E            [ 1]  271 	push	#0x9e
      00010C 5F               [ 1]  272 	clrw	x
      00010D 89               [ 2]  273 	pushw	x
      00010E 4B 00            [ 1]  274 	push	#0x00
      000110 4Br00            [ 1]  275 	push	#<___str_0
      000112 4Bs00            [ 1]  276 	push	#(___str_0 >> 8)
      000114 CDr00r00         [ 4]  277 	call	_assert_failed
      000117 5B 06            [ 2]  278 	addw	sp, #6
      000119                        279 00107$:
                                    280 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 163: TIM4->CR1 |= TIM4_CR1_URS;
      000119 C6 53 40         [ 1]  281 	ld	a, 0x5340
                                    282 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 161: if (TIM4_UpdateSource != TIM4_UPDATESOURCE_GLOBAL)
      00011C 0D 03            [ 1]  283 	tnz	(0x03, sp)
      00011E 27 06            [ 1]  284 	jreq	00102$
                                    285 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 163: TIM4->CR1 |= TIM4_CR1_URS;
      000120 AA 04            [ 1]  286 	or	a, #0x04
      000122 C7 53 40         [ 1]  287 	ld	0x5340, a
      000125 81               [ 4]  288 	ret
      000126                        289 00102$:
                                    290 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 167: TIM4->CR1 &= (uint8_t)(~TIM4_CR1_URS);
      000126 A4 FB            [ 1]  291 	and	a, #0xfb
      000128 C7 53 40         [ 1]  292 	ld	0x5340, a
                                    293 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 169: }
      00012B 81               [ 4]  294 	ret
                                    295 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 179: void TIM4_SelectOnePulseMode(TIM4_OPMode_TypeDef TIM4_OPMode)
                                    296 ;	-----------------------------------------
                                    297 ;	 function TIM4_SelectOnePulseMode
                                    298 ;	-----------------------------------------
      00012C                        299 _TIM4_SelectOnePulseMode:
                                    300 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 182: assert_param(IS_TIM4_OPM_MODE_OK(TIM4_OPMode));
      00012C 7B 03            [ 1]  301 	ld	a, (0x03, sp)
      00012E 4A               [ 1]  302 	dec	a
      00012F 27 13            [ 1]  303 	jreq	00107$
      000131 0D 03            [ 1]  304 	tnz	(0x03, sp)
      000133 27 0F            [ 1]  305 	jreq	00107$
      000135 4B B6            [ 1]  306 	push	#0xb6
      000137 5F               [ 1]  307 	clrw	x
      000138 89               [ 2]  308 	pushw	x
      000139 4B 00            [ 1]  309 	push	#0x00
      00013B 4Br00            [ 1]  310 	push	#<___str_0
      00013D 4Bs00            [ 1]  311 	push	#(___str_0 >> 8)
      00013F CDr00r00         [ 4]  312 	call	_assert_failed
      000142 5B 06            [ 2]  313 	addw	sp, #6
      000144                        314 00107$:
                                    315 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 187: TIM4->CR1 |= TIM4_CR1_OPM;
      000144 C6 53 40         [ 1]  316 	ld	a, 0x5340
                                    317 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 185: if (TIM4_OPMode != TIM4_OPMODE_REPETITIVE)
      000147 0D 03            [ 1]  318 	tnz	(0x03, sp)
      000149 27 06            [ 1]  319 	jreq	00102$
                                    320 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 187: TIM4->CR1 |= TIM4_CR1_OPM;
      00014B AA 08            [ 1]  321 	or	a, #0x08
      00014D C7 53 40         [ 1]  322 	ld	0x5340, a
      000150 81               [ 4]  323 	ret
      000151                        324 00102$:
                                    325 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 191: TIM4->CR1 &= (uint8_t)(~TIM4_CR1_OPM);
      000151 A4 F7            [ 1]  326 	and	a, #0xf7
      000153 C7 53 40         [ 1]  327 	ld	0x5340, a
                                    328 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 193: }
      000156 81               [ 4]  329 	ret
                                    330 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 215: void TIM4_PrescalerConfig(TIM4_Prescaler_TypeDef Prescaler, TIM4_PSCReloadMode_TypeDef TIM4_PSCReloadMode)
                                    331 ;	-----------------------------------------
                                    332 ;	 function TIM4_PrescalerConfig
                                    333 ;	-----------------------------------------
      000157                        334 _TIM4_PrescalerConfig:
                                    335 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 218: assert_param(IS_TIM4_PRESCALER_RELOAD_OK(TIM4_PSCReloadMode));
      000157 0D 04            [ 1]  336 	tnz	(0x04, sp)
      000159 27 14            [ 1]  337 	jreq	00104$
      00015B 7B 04            [ 1]  338 	ld	a, (0x04, sp)
      00015D 4A               [ 1]  339 	dec	a
      00015E 27 0F            [ 1]  340 	jreq	00104$
      000160 4B DA            [ 1]  341 	push	#0xda
      000162 5F               [ 1]  342 	clrw	x
      000163 89               [ 2]  343 	pushw	x
      000164 4B 00            [ 1]  344 	push	#0x00
      000166 4Br00            [ 1]  345 	push	#<___str_0
      000168 4Bs00            [ 1]  346 	push	#(___str_0 >> 8)
      00016A CDr00r00         [ 4]  347 	call	_assert_failed
      00016D 5B 06            [ 2]  348 	addw	sp, #6
      00016F                        349 00104$:
                                    350 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 219: assert_param(IS_TIM4_PRESCALER_OK(Prescaler));
      00016F 0D 03            [ 1]  351 	tnz	(0x03, sp)
      000171 27 38            [ 1]  352 	jreq	00109$
      000173 7B 03            [ 1]  353 	ld	a, (0x03, sp)
      000175 4A               [ 1]  354 	dec	a
      000176 27 33            [ 1]  355 	jreq	00109$
      000178 7B 03            [ 1]  356 	ld	a, (0x03, sp)
      00017A A1 02            [ 1]  357 	cp	a, #0x02
      00017C 27 2D            [ 1]  358 	jreq	00109$
      00017E 7B 03            [ 1]  359 	ld	a, (0x03, sp)
      000180 A1 03            [ 1]  360 	cp	a, #0x03
      000182 27 27            [ 1]  361 	jreq	00109$
      000184 7B 03            [ 1]  362 	ld	a, (0x03, sp)
      000186 A1 04            [ 1]  363 	cp	a, #0x04
      000188 27 21            [ 1]  364 	jreq	00109$
      00018A 7B 03            [ 1]  365 	ld	a, (0x03, sp)
      00018C A1 05            [ 1]  366 	cp	a, #0x05
      00018E 27 1B            [ 1]  367 	jreq	00109$
      000190 7B 03            [ 1]  368 	ld	a, (0x03, sp)
      000192 A1 06            [ 1]  369 	cp	a, #0x06
      000194 27 15            [ 1]  370 	jreq	00109$
      000196 7B 03            [ 1]  371 	ld	a, (0x03, sp)
      000198 A1 07            [ 1]  372 	cp	a, #0x07
      00019A 27 0F            [ 1]  373 	jreq	00109$
      00019C 4B DB            [ 1]  374 	push	#0xdb
      00019E 5F               [ 1]  375 	clrw	x
      00019F 89               [ 2]  376 	pushw	x
      0001A0 4B 00            [ 1]  377 	push	#0x00
      0001A2 4Br00            [ 1]  378 	push	#<___str_0
      0001A4 4Bs00            [ 1]  379 	push	#(___str_0 >> 8)
      0001A6 CDr00r00         [ 4]  380 	call	_assert_failed
      0001A9 5B 06            [ 2]  381 	addw	sp, #6
      0001AB                        382 00109$:
                                    383 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 222: TIM4->PSCR = (uint8_t)Prescaler;
      0001AB AE 53 47         [ 2]  384 	ldw	x, #0x5347
      0001AE 7B 03            [ 1]  385 	ld	a, (0x03, sp)
      0001B0 F7               [ 1]  386 	ld	(x), a
                                    387 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 225: TIM4->EGR = (uint8_t)TIM4_PSCReloadMode;
      0001B1 AE 53 45         [ 2]  388 	ldw	x, #0x5345
      0001B4 7B 04            [ 1]  389 	ld	a, (0x04, sp)
      0001B6 F7               [ 1]  390 	ld	(x), a
                                    391 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 226: }
      0001B7 81               [ 4]  392 	ret
                                    393 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 234: void TIM4_ARRPreloadConfig(FunctionalState NewState)
                                    394 ;	-----------------------------------------
                                    395 ;	 function TIM4_ARRPreloadConfig
                                    396 ;	-----------------------------------------
      0001B8                        397 _TIM4_ARRPreloadConfig:
                                    398 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 237: assert_param(IS_FUNCTIONALSTATE_OK(NewState));
      0001B8 0D 03            [ 1]  399 	tnz	(0x03, sp)
      0001BA 27 14            [ 1]  400 	jreq	00107$
      0001BC 7B 03            [ 1]  401 	ld	a, (0x03, sp)
      0001BE 4A               [ 1]  402 	dec	a
      0001BF 27 0F            [ 1]  403 	jreq	00107$
      0001C1 4B ED            [ 1]  404 	push	#0xed
      0001C3 5F               [ 1]  405 	clrw	x
      0001C4 89               [ 2]  406 	pushw	x
      0001C5 4B 00            [ 1]  407 	push	#0x00
      0001C7 4Br00            [ 1]  408 	push	#<___str_0
      0001C9 4Bs00            [ 1]  409 	push	#(___str_0 >> 8)
      0001CB CDr00r00         [ 4]  410 	call	_assert_failed
      0001CE 5B 06            [ 2]  411 	addw	sp, #6
      0001D0                        412 00107$:
                                    413 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 242: TIM4->CR1 |= TIM4_CR1_ARPE;
      0001D0 C6 53 40         [ 1]  414 	ld	a, 0x5340
                                    415 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 240: if (NewState != DISABLE)
      0001D3 0D 03            [ 1]  416 	tnz	(0x03, sp)
      0001D5 27 06            [ 1]  417 	jreq	00102$
                                    418 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 242: TIM4->CR1 |= TIM4_CR1_ARPE;
      0001D7 AA 80            [ 1]  419 	or	a, #0x80
      0001D9 C7 53 40         [ 1]  420 	ld	0x5340, a
      0001DC 81               [ 4]  421 	ret
      0001DD                        422 00102$:
                                    423 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 246: TIM4->CR1 &= (uint8_t)(~TIM4_CR1_ARPE);
      0001DD A4 7F            [ 1]  424 	and	a, #0x7f
      0001DF C7 53 40         [ 1]  425 	ld	0x5340, a
                                    426 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 248: }
      0001E2 81               [ 4]  427 	ret
                                    428 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 257: void TIM4_GenerateEvent(TIM4_EventSource_TypeDef TIM4_EventSource)
                                    429 ;	-----------------------------------------
                                    430 ;	 function TIM4_GenerateEvent
                                    431 ;	-----------------------------------------
      0001E3                        432 _TIM4_GenerateEvent:
                                    433 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 260: assert_param(IS_TIM4_EVENT_SOURCE_OK(TIM4_EventSource));
      0001E3 7B 03            [ 1]  434 	ld	a, (0x03, sp)
      0001E5 4A               [ 1]  435 	dec	a
      0001E6 27 0F            [ 1]  436 	jreq	00104$
      0001E8 4B 04            [ 1]  437 	push	#0x04
      0001EA 4B 01            [ 1]  438 	push	#0x01
      0001EC 5F               [ 1]  439 	clrw	x
      0001ED 89               [ 2]  440 	pushw	x
      0001EE 4Br00            [ 1]  441 	push	#<___str_0
      0001F0 4Bs00            [ 1]  442 	push	#(___str_0 >> 8)
      0001F2 CDr00r00         [ 4]  443 	call	_assert_failed
      0001F5 5B 06            [ 2]  444 	addw	sp, #6
      0001F7                        445 00104$:
                                    446 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 263: TIM4->EGR = (uint8_t)(TIM4_EventSource);
      0001F7 AE 53 45         [ 2]  447 	ldw	x, #0x5345
      0001FA 7B 03            [ 1]  448 	ld	a, (0x03, sp)
      0001FC F7               [ 1]  449 	ld	(x), a
                                    450 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 264: }
      0001FD 81               [ 4]  451 	ret
                                    452 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 272: void TIM4_SetCounter(uint8_t Counter)
                                    453 ;	-----------------------------------------
                                    454 ;	 function TIM4_SetCounter
                                    455 ;	-----------------------------------------
      0001FE                        456 _TIM4_SetCounter:
                                    457 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 275: TIM4->CNTR = (uint8_t)(Counter);
      0001FE AE 53 46         [ 2]  458 	ldw	x, #0x5346
      000201 7B 03            [ 1]  459 	ld	a, (0x03, sp)
      000203 F7               [ 1]  460 	ld	(x), a
                                    461 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 276: }
      000204 81               [ 4]  462 	ret
                                    463 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 284: void TIM4_SetAutoreload(uint8_t Autoreload)
                                    464 ;	-----------------------------------------
                                    465 ;	 function TIM4_SetAutoreload
                                    466 ;	-----------------------------------------
      000205                        467 _TIM4_SetAutoreload:
                                    468 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 287: TIM4->ARR = (uint8_t)(Autoreload);
      000205 AE 53 48         [ 2]  469 	ldw	x, #0x5348
      000208 7B 03            [ 1]  470 	ld	a, (0x03, sp)
      00020A F7               [ 1]  471 	ld	(x), a
                                    472 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 288: }
      00020B 81               [ 4]  473 	ret
                                    474 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 295: uint8_t TIM4_GetCounter(void)
                                    475 ;	-----------------------------------------
                                    476 ;	 function TIM4_GetCounter
                                    477 ;	-----------------------------------------
      00020C                        478 _TIM4_GetCounter:
                                    479 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 298: return (uint8_t)(TIM4->CNTR);
      00020C C6 53 46         [ 1]  480 	ld	a, 0x5346
                                    481 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 299: }
      00020F 81               [ 4]  482 	ret
                                    483 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 306: TIM4_Prescaler_TypeDef TIM4_GetPrescaler(void)
                                    484 ;	-----------------------------------------
                                    485 ;	 function TIM4_GetPrescaler
                                    486 ;	-----------------------------------------
      000210                        487 _TIM4_GetPrescaler:
                                    488 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 309: return (TIM4_Prescaler_TypeDef)(TIM4->PSCR);
      000210 C6 53 47         [ 1]  489 	ld	a, 0x5347
                                    490 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 310: }
      000213 81               [ 4]  491 	ret
                                    492 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 319: FlagStatus TIM4_GetFlagStatus(TIM4_FLAG_TypeDef TIM4_FLAG)
                                    493 ;	-----------------------------------------
                                    494 ;	 function TIM4_GetFlagStatus
                                    495 ;	-----------------------------------------
      000214                        496 _TIM4_GetFlagStatus:
                                    497 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 324: assert_param(IS_TIM4_GET_FLAG_OK(TIM4_FLAG));
      000214 7B 03            [ 1]  498 	ld	a, (0x03, sp)
      000216 4A               [ 1]  499 	dec	a
      000217 27 0F            [ 1]  500 	jreq	00107$
      000219 4B 44            [ 1]  501 	push	#0x44
      00021B 4B 01            [ 1]  502 	push	#0x01
      00021D 5F               [ 1]  503 	clrw	x
      00021E 89               [ 2]  504 	pushw	x
      00021F 4Br00            [ 1]  505 	push	#<___str_0
      000221 4Bs00            [ 1]  506 	push	#(___str_0 >> 8)
      000223 CDr00r00         [ 4]  507 	call	_assert_failed
      000226 5B 06            [ 2]  508 	addw	sp, #6
      000228                        509 00107$:
                                    510 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 326: if ((TIM4->SR1 & (uint8_t)TIM4_FLAG)  != 0)
      000228 C6 53 44         [ 1]  511 	ld	a, 0x5344
      00022B 14 03            [ 1]  512 	and	a, (0x03, sp)
      00022D 27 03            [ 1]  513 	jreq	00102$
                                    514 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 328: bitstatus = SET;
      00022F A6 01            [ 1]  515 	ld	a, #0x01
      000231 81               [ 4]  516 	ret
      000232                        517 00102$:
                                    518 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 332: bitstatus = RESET;
      000232 4F               [ 1]  519 	clr	a
                                    520 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 334: return ((FlagStatus)bitstatus);
                                    521 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 335: }
      000233 81               [ 4]  522 	ret
                                    523 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 344: void TIM4_ClearFlag(TIM4_FLAG_TypeDef TIM4_FLAG)
                                    524 ;	-----------------------------------------
                                    525 ;	 function TIM4_ClearFlag
                                    526 ;	-----------------------------------------
      000234                        527 _TIM4_ClearFlag:
                                    528 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 347: assert_param(IS_TIM4_GET_FLAG_OK(TIM4_FLAG));
      000234 7B 03            [ 1]  529 	ld	a, (0x03, sp)
      000236 4A               [ 1]  530 	dec	a
      000237 27 0F            [ 1]  531 	jreq	00104$
      000239 4B 5B            [ 1]  532 	push	#0x5b
      00023B 4B 01            [ 1]  533 	push	#0x01
      00023D 5F               [ 1]  534 	clrw	x
      00023E 89               [ 2]  535 	pushw	x
      00023F 4Br00            [ 1]  536 	push	#<___str_0
      000241 4Bs00            [ 1]  537 	push	#(___str_0 >> 8)
      000243 CDr00r00         [ 4]  538 	call	_assert_failed
      000246 5B 06            [ 2]  539 	addw	sp, #6
      000248                        540 00104$:
                                    541 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 350: TIM4->SR1 = (uint8_t)(~TIM4_FLAG);
      000248 7B 03            [ 1]  542 	ld	a, (0x03, sp)
      00024A 43               [ 1]  543 	cpl	a
      00024B C7 53 44         [ 1]  544 	ld	0x5344, a
                                    545 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 351: }
      00024E 81               [ 4]  546 	ret
                                    547 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 360: ITStatus TIM4_GetITStatus(TIM4_IT_TypeDef TIM4_IT)
                                    548 ;	-----------------------------------------
                                    549 ;	 function TIM4_GetITStatus
                                    550 ;	-----------------------------------------
      00024F                        551 _TIM4_GetITStatus:
      00024F 88               [ 1]  552 	push	a
                                    553 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 367: assert_param(IS_TIM4_IT_OK(TIM4_IT));
      000250 7B 04            [ 1]  554 	ld	a, (0x04, sp)
      000252 4A               [ 1]  555 	dec	a
      000253 27 0F            [ 1]  556 	jreq	00108$
      000255 4B 6F            [ 1]  557 	push	#0x6f
      000257 4B 01            [ 1]  558 	push	#0x01
      000259 5F               [ 1]  559 	clrw	x
      00025A 89               [ 2]  560 	pushw	x
      00025B 4Br00            [ 1]  561 	push	#<___str_0
      00025D 4Bs00            [ 1]  562 	push	#(___str_0 >> 8)
      00025F CDr00r00         [ 4]  563 	call	_assert_failed
      000262 5B 06            [ 2]  564 	addw	sp, #6
      000264                        565 00108$:
                                    566 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 369: itstatus = (uint8_t)(TIM4->SR1 & (uint8_t)TIM4_IT);
      000264 C6 53 44         [ 1]  567 	ld	a, 0x5344
      000267 14 04            [ 1]  568 	and	a, (0x04, sp)
      000269 6B 01            [ 1]  569 	ld	(0x01, sp), a
                                    570 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 371: itenable = (uint8_t)(TIM4->IER & (uint8_t)TIM4_IT);
      00026B C6 53 43         [ 1]  571 	ld	a, 0x5343
      00026E 14 04            [ 1]  572 	and	a, (0x04, sp)
                                    573 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 373: if ((itstatus != (uint8_t)RESET ) && (itenable != (uint8_t)RESET ))
      000270 0D 01            [ 1]  574 	tnz	(0x01, sp)
      000272 27 06            [ 1]  575 	jreq	00102$
      000274 4D               [ 1]  576 	tnz	a
      000275 27 03            [ 1]  577 	jreq	00102$
                                    578 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 375: bitstatus = (ITStatus)SET;
      000277 A6 01            [ 1]  579 	ld	a, #0x01
                                    580 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 379: bitstatus = (ITStatus)RESET;
      000279 21                     581 	.byte 0x21
      00027A                        582 00102$:
      00027A 4F               [ 1]  583 	clr	a
      00027B                        584 00103$:
                                    585 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 381: return ((ITStatus)bitstatus);
                                    586 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 382: }
      00027B 5B 01            [ 2]  587 	addw	sp, #1
      00027D 81               [ 4]  588 	ret
                                    589 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 391: void TIM4_ClearITPendingBit(TIM4_IT_TypeDef TIM4_IT)
                                    590 ;	-----------------------------------------
                                    591 ;	 function TIM4_ClearITPendingBit
                                    592 ;	-----------------------------------------
      00027E                        593 _TIM4_ClearITPendingBit:
                                    594 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 394: assert_param(IS_TIM4_IT_OK(TIM4_IT));
      00027E 7B 03            [ 1]  595 	ld	a, (0x03, sp)
      000280 4A               [ 1]  596 	dec	a
      000281 27 0F            [ 1]  597 	jreq	00104$
      000283 4B 8A            [ 1]  598 	push	#0x8a
      000285 4B 01            [ 1]  599 	push	#0x01
      000287 5F               [ 1]  600 	clrw	x
      000288 89               [ 2]  601 	pushw	x
      000289 4Br00            [ 1]  602 	push	#<___str_0
      00028B 4Bs00            [ 1]  603 	push	#(___str_0 >> 8)
      00028D CDr00r00         [ 4]  604 	call	_assert_failed
      000290 5B 06            [ 2]  605 	addw	sp, #6
      000292                        606 00104$:
                                    607 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 397: TIM4->SR1 = (uint8_t)(~TIM4_IT);
      000292 7B 03            [ 1]  608 	ld	a, (0x03, sp)
      000294 43               [ 1]  609 	cpl	a
      000295 C7 53 44         [ 1]  610 	ld	0x5344, a
                                    611 ;	../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c: 398: }
      000298 81               [ 4]  612 	ret
                                    613 	.area CODE
                                    614 	.area CONST
      000000                        615 ___str_0:
      000000 2E 2E 2F 2E 2E 2F 2E   616 	.ascii "../../../Libraries/STM8S_StdPeriph_Driver/src/stm8s_tim4.c"
             2E 2F 4C 69 62 72 61
             72 69 65 73 2F 53 54
             4D 38 53 5F 53 74 64
             50 65 72 69 70 68 5F
             44 72 69 76 65 72 2F
             73 72 63 2F 73 74 6D
             38 73 5F 74 69 6D 34
             2E 63
      00003A 00                     617 	.db 0x00
                                    618 	.area INITIALIZER
                                    619 	.area CABS (ABS)
