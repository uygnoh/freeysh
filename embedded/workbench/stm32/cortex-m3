###########################################################
### 异常 & 中断
###########################################################
% 异常编号  异常类型    优先级     描述
0          Reserved            (0x00000000)
1          Reset      -3       复位(0x00000004)
2          NMI        -2       不可屏幕中断(0x00000008)
3          HardFault  -1       所有的错误都可能引发，前提是相应的错误处理末便能
4          MemManage  0        储存器管理错误
5          BusFault   1        总线错误
6          UsageFault 2        程序错误
7          %Reserved
8          %Reserved
9          %Reserved
10         %Reserved
11         SVCall              请求管调用
12         Debug Monitor       调式监控
13         %Reserved   
14         PendSV              可挡挂起的服务调用
15         SysTick             系统节拍定时器



% 不同优先级分组下优先级寄存器中的抢占优先级域和子优先级域定义
优先级分组    抢占优先级域  子优先级域
0           Bit[7:1]    Bit[0:0]
1           Bit[7:2]    Bit[1:0]
2           Bit[7:3]    Bit[2:0]
3           Bit[7:4]    Bit[3:0]
4           Bit[7:5]    Bit[4:0]
5           Bit[7:6]    Bit[5:0]
6           Bit[7:7]    Bit[6:0]
7           --------    Bit[7:0]




###########################################################
### 向量表 & 向量表重定位
###########################################################
% 一般来说，起始地址(0x00000000)处应该是启动存储器
% 它可以为FLASH存储器或ROM设备，而运行时不能对其修改
% 不过，有些应用可能需要在运行时修改或定义向量表
% 为了进行这种处理，Cortex-m3/m4处理器实现了一种向量表重定位的特性
% 向量表重定位特性提供了一个名为向量表偏移寄存器(VTOR)的可编程寄存器



% 复制向量表到SRAM开头处(0x20000000)的代码实例
#define HW32_REG(ADDRESS)   (*((volatile unsingned long *)(ADDRESS)))
#define VTOR_NEW_ADDR       0x20000000
int i;
for (i = 0; i < 48; i++) //在设置VTOR前首先将向量表复制到SRAM
{
    将向量表的入口从FLASH复制到SRAM
    HW32_REG((VTOR_NEW_ADDR + (i<<2))) = HW32_REG((i<<2));
}
__DMB(); //数据存储器屏障，确保到存储器的写操作结束
SCB->VTOR = VTOR_NEW_ADDR;  //将VTOR设置为新的向量表位置
__DSB(); //数据同步屏障，确保接下来的所有指令都使用新配置











