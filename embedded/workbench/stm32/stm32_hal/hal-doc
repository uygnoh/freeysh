###########################################################
### % hal (hardware abstract layer)硬件抽象层
###########################################################
1 CMSIS     Cortex Microcontroller Software Interface Standard
2 BSP       Board Support Package
3 MSP       mcu support package


###########################################################
### % 
###########################################################
1  __weak void HAL_USART_MspInit(USART_HandleTypeDef *husart)
% 函数被__weak修饰了，意思就是，如果别处没定义，这个函数就是他，
% 如果别处重定义了，就用新的函数，这样就实现了重载。这有一个很大的好处，
% 就是实现oo思想中的差异化编程，hal实现所有硬件通用的功能，
% 而把不通用的部分通过可重载的函数开放给用户修改。

体现oo的还有个地方，每个函数中，都会接收到一个handle指针，这其实和this指针非常类似，
每个函数都不用知道自己到底是在操作某一个具体的对象，只需要根据handle的指向来操作就可以了。


回到上面的重载。在hal库中有一点比较大的改变是，中断都是通过回调函数来开放给用户的，
具体使用方式也是重载相关回调函数，不像标准库是直接在stm32fxxx_it.c里填写相关中断处理函数。
这样做的好处是，hal帮我们处理了一些中断来临时的杂务，只把我们感兴趣的事件开放给用户。






