###########################################################
### % STM32标准库程序配置流程
###########################################################
1 rcc_configuration();
2 gpio_configuration();
3 nvic_configuration();
4 xxx_configuration();


typedef 的真正意思是给一个已经存在的数据类型(注意:是类型不是变量)取一个别
名,而非定义一个新的数据类型



###########################################################
### % STM32通用功能和复用功能I/O
###########################################################
% General-purpose and alternate-function I/O
% /* GPIOx_CRL和GPIOx_CRH 配置表 */
%           %               CNF1   CNF0  MODE1  MODE0   PxODR  
Input       Analog            0     0     0      0      x     模拟输入
Input       Input floating    0     1     0      0      x     浮空输入
Input       Input pull-down   1     0     0      0      0     下拉输入
Input       Input pull-up     1     0     0      0      1     上拉输入
Output      Push-pull         0     0     01-10-11      0 or 1通用推完输出 
Output      Open-drain        0     1     01-10-11      0 or 1通用开漏输出
Output      Push-pull         1     0     01-10-11      x     推挽式复用功能
Output      Open-drain        1     1     01-10-11      x     开漏式复用功能
% 注意：下拉输入和上拉输入是通过端口输出寄存器 GPIOxODR 来区分。
% 01-10-11  输出最大速度分别是： 10 MHz, 2 MHz, 50 MHz.



% /* GPIOx 端口配置 */
/* 设置GPIOA引脚的工作模式 [ GPIOA.0 GPIO.1, 推挽式输出，50MHz ] */
	GPIOA->CRL = 0x00000033
/* 在GPIOA.0，GPIO.1引脚输出一个高电平 */
	GPIOA->ODR = 0x00000003



% /* AFIO 复用功能输入输出 */
AFIO_EVCR       事件控制寄存器
AFIIO_MAPR      复用重映射和调试 I/O 配置寄存器
AFIO_EXTICR1    外部中断配置寄存器 1
AFIO_EXTICR2    外部中断配置寄存器 2
AFIO_EXTICR3    外部中断配置寄存器 3
AFIO_EXTICR4    外部中断配置寄存器 4



% /* GPIO 通用功能输入输出寄存器 */
2个32位配置寄存器	GPIOx_CRL, GPIOx_CRH
2个32位数据寄存器	GPIOx_IDR, GPIOx_ODR
1个32端口位设置/清除寄存器	GPIOx_BSRR
1个32位端口位清除寄存器	GPIOx_BRR
1个32位锁定寄存器	GPIOx_LCKR



% /* 端口复用功能和重映射功能 */
1.端口复用功能 AFIO
	如果一个端口配置成复用功能，将使引脚和输出寄存器断开，并和片上外设的输出信号连接。
	复用功能最好配置成 浮空输入模式， 模拟输入不支持复用功能
	开启复用功能相关端口

2.重映射
	将芯片内部的外设模块固定分配的端口重新映射到其他端口的功能。
	没有重映射， 部分重映射， 完全重映射
	重映射功能可以额外的增加资源

% /* USART1 端口重映射启用 */
GPIO_PinRemapConfig(GPIO_Remap_USART1, ENABLE);





###########################################################
### % STM32时钟系统
###########################################################
% /* STM32时钟源 */
内部高速时钟HSI, 外部高速时钟HSE, 
内部低速时钟LSI, 外部低速时钟LSE, 
PLL时钟
PLL         锁相环，启到倍频作用
Prescaler   分频器
Multiplier  倍频器
MCO         微控制器时钟输出端口 
CSS         时钟监视系统，一旦HSE时钟失效，则自动切换至 SYSCLK=HSI



% /* 使用外部高速晶体振荡器, 配置为72MHz */
void rcc_configure(void)
{
	/* HSE_configuration */
	RCC_DeInit();                                         /* 初始化为缺省值               */
	RCC_HSEConfig(RCC_HSE_ON);                            /* 使能外部高速时钟             */			
	while (RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET);  /* 等待外部高速时钟稳定          */ 	
	FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable); /* enable prefetch buffer     */
	FLASH_SetLatency(FLASH_Latency_2);                    /* flash 2 wait state         */
	RCC_HCLKConfig(RCC_SYSCLK_Div1);                      /* HCLK  ==  SYSCLK           */
	RCC_PCLK2Config(RCC_HCLK_Div1);                       /* PCLK2 ==  HCLK             */
	RCC_PCLK1Config(RCC_HCLK_Div2);                       /* PCLK1 ==  HCLK/2           */
	RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);  /* PLLCLK == 8MHz*9 ==72MHz   */
	RCC_PLLCmd(ENABLE);                                   /* enable PLLCLK              */
	while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);  /* wait till  PLLCLK is ready */
	RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);            /* select PPLL as system clock*/
	while (RCC_GetSYSCLKSource() != 0x08);                /* wait till PLL is used as system clock source */
	
	/* usart1_configuration */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
}
% /* RCC 时钟配置流程 */
RCC_DeInit();                                        /* 1  将RCC寄存器重新设置为默认值 */    
RCC_HSEConfig(RCC_HSE_ON);                           /* 2  打开外部高速时钟晶振HSE */          
HSEStartUpStatus = RCC_WaitForHSEStartUp();          /* 3  等待外部高速时钟晶振工作 */          
RCC_HCLkConfig();                                    /* 4  设置AHB时钟 */                   
RCC_PCLK2Config();                                   /* 5  设置高速APB时钟 */	                
RCC_PCLK1Config();                                   /* 6  设置低速APB时钟	 */                
RCC_PLLConfig();                                     /* 7  设置PLL */                      
RCC_PLLCmd(ENABLE);                                  /* 8  打开PLL */                
while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);  /* 9  等待PLL工作稳定	 */        
RCC_SYSCLKConfig();                                  /* 10 设置系统时钟 */             
while(RCC_GetSYSCLKSource() != 0x08);                /* 11 判断是否 PLL 是系统时钟 */   
RCC_APB2PerphClockCmd();                             /* 12 打开要使用的外设时钟 */        
RCC_APB1PerphClockCmd();
					
					
					
					
					
					
	
###########################################################
### % STM32中断系统
###########################################################					
% NVIC嵌套向量中断控制器



% 外部中断/事件控制器(EXTI)
% External interrupt/event controller (EXTI)
对于互联型产品,外部中断/事件控制器由20个产生事件/中断请求的边沿检测器组成,对于其它
产品,则有19个能产生事件/中断请求的边沿检测器。每个输入线可以独立地配置输入类型(脉冲
或挂起)和对应的触发事件(上升沿或下降沿或者双边沿都触发)。每个输入线都可以独立地被屏
蔽。挂起寄存器保持着状态线的中断请求。
1 中断屏蔽寄存器(EXTI_IMR),       Interrupt mask register (EXTI_IMR)
2 事件屏蔽寄存器(EXTI_EMR),       Event mask register (EXTI_EMR)
3 上升沿触发选择寄存器(EXTI_RTSR), Rising trigger selection register (EXTI_RTSR)
4 下降沿触发选择寄存器(EXTI_FTSR), Falling trigger selection register (EXTI_FTSR)
5 软件中断事件寄存器(EXTI_SWIER),  Software interrupt event register (EXTI_SWIER)
6 挂起寄存器(EXTI_PR),           Pending register (EXTI_PR)



% 中断配置
1 时钟配置
2 GPIO配置
3 EXTI配置
(中断源的选择，清除中断标志为了避免误操作，触发模式)
4 NVIC配置
(配置NVIC是那一个组， 指定主优先级&从优先级， 中断通道是否开启 )
5 中断服务子程序



% STM32中断系统配置例程
{
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);   //使能GPIOB时钟
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);    //使能GPIO的复用功能
    
    
    // GPIO, 配置PB6为外部中断
    GPIO_DeInit(GPIOB);
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    GPIO_Init(GPIOB, &GPIO_InitStructure);
    
    
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource6); //选择 GPIO 管脚用作外部中断线路
    //EXTI, 外部中断配置
    EXIT_DeInit();
    EXTI_InitTypeDef EXTI_InitStructure;
    EXTI_InitStructure.EXTI_Line = EXTI_Line6;
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    EXTI_Init(&EXTI_InitStructure);
    EXTI_ClearITpendingBit(EXTI_Line6); //清除EXTI_Line6中断标志，为了安全
    
    
    //NVIC配置
    NVIC_InitTypeDef NVIC_InitStructure;
    /* 配置组为第1组，先占优先级 1 位， 从优先级 3 位 */
    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
    NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQChannel; /* 外部中断线 9-5 中断 */
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_InitStructure(&NVIC_InitStructure);
    
 
    //中断服务子程序
    void EXTI9_5_IRQHandler(void)
    {
        GPIO_ResetBits(GPIOA, GPIO_Pin_3);
        Delay_MS(1000);
        EXTI_ClearITPendingBit(EXTI_Line6); //清除中断标志位
    }
        
}






###########################################################
### % STM32定时器
###########################################################
% TIM1 和 TIM8 是能够产生 3 对PWM互补输出的高级定时器，用于3相电机 ，时钟由APB2产生
% 其余 6 个为普通定时器， 时钟由APB1的输出产生
1 定时功能
2 计数功能
3 输入补获
4 比较输出
5 PWM脉冲宽度调制



% 通用定时器是一个通过可编程预分频器驱动的 16位自动重装载计数器构成
% 测量输入信号的脉冲长度(输入采集), 产生输出波形(输出比较和PWM)
% 定时器的硬件是完全独立的，而且没有互相共享任何资源
% 定时器还可以与定时器形成级联，组成更大的定时范围
Note: 只要你使用的库默认配置时钟为 72MHz，无论是TIM1还是TIMx, 它们的计数频率都是 72MHz
1 时钟源选择
2 时基单元
3 输入补获
4 输出比较



% 通用定时器计数模式
1 当TIMx_CR1寄存器中有DIR位为0时，执行向上计数
  向上计数模式中，计数器从0计数到自动装值(TIMx_ARR计数器的内容),
  然后从0开始计数并且产生一个计数向上溢出事件
2 当TIMx_CR1寄存器中有DIR位为1时，执行向下计数
  向下计数模式中，计数器从自动装载值(TIMx_ARR计数器的内容)开始向下计数到0,
  然后从自动装入值重新开始到0，并且产生一个计数向下溢出事件
3 当TIMx_CR1寄存器中的CMS位不为00时，为中央对齐模式
  而中央对齐模式(向上/向下计数)，是计数器从0开始计数到自动装入值，
  产生一个计数溢出事件，然后向下计数到1并且产生一个计数器溢出事件，
  然后再从0开始计数。



% 用定时器2实现1S中断一次
RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE); //开启定时器2时钟
NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);      //Nvic
NVIC_InitTypeDef NVIC_InitStructure;
NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQChannel;
NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
NVIC_InitStructure.NVIC_IRQChannelcmd = ENABLE;
NVIC_Init(&NVIC_InitStructure);

TIM_DeInit(TIM2);
TIM_InternalClockConfig(TIM2);  //选择内部时钟=72MHz

TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
TIM_OCInitTypeDef TIM_OCInitStructure;
TIM_TimeBaseStructure.TIM_Period = 2000;    //自动重装载寄存器值
//CK_PSC预分频值为35999，则时钟分频为35999+1=36000
//CK_PSC=72MHz, CK_CNT=(72MHz/36000=2000Hz), 自动重装载寄存器值(2000), 1S更新
TIM_TimeBaseStructure.TIM_Prescaler = 35999;
TIM_TimeBaseStructure.TIM_clockDivsion = 0x00;
TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
TIM_Cmd(TIM2, ENABLE);

TIM_PrescalerConfig(TIM2, 35999, TIM_PSCReloadMode_Immediate); //让定时器预分频值立即装入
TIM_ClearFlag(TIM2, TIM_FLAG_Update); //清除中断标志
TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE); //使能定时器中断








###########################################################
### % usart通用异步同步收发器
###########################################################
/* 串口1(USART1)初始化配置(寄存器版)
 * 2018.10.29
 * @freeysh
 * 设置 USART1模块，UE使能位，M位来定义字长， 
 * 停止位位数，TE位，BRR寄存器选择波特率 
 */
USART1->CR1 |= (1<<13);
USART1->CR1 &= ~(1<<12);
USART1->CR2 &= ~(3<<12);	/* USART->CR2 &= ~((1<<12) | (1<<13)); */
USART1->CR1 |= (1<<3);

/*
 * USART 波特率配置 
 * 波特率 9600, 系统时钟 72MHz,
 * Tx/Rx波特率 = ƒck/(16*USARTDIV)
 * 9600 = 72*1000*1000/(16*U)
 * U = 72000000/(9600*16)
 */
float Div;
u16 M,F,BRR;
u32 Bound;
Bound = 9600;
Div = (float)(72*1000*1000)/(Bound*16);
M = Div;	// 取整数部分
F = (Div-M)*16; // 小数部分
% /* 整合整数部分和小数部分 */
BRR = M<<4 + F;
USART1->BRR = BRR;


/* 发送一个字符 'A' 到 USART的DR寄存器 */
	int i, data,;
	data = 'A';
	USART->DR = data;
	for (i = 0; i < 30; i++) 
	{
		data++;
		while ((USART1->SR & (1<<6) == 0);
	}
	
	
	
	
% usart通信过程	
/* 数据发送过程 */
	1. 设置 USART_CR1寄存器中 UE位置位 来激活USART
	2. 设置 USART_CR1寄存器中 的M位    来定义字长
	3. 设置 USART_CR2寄存器中 编写停止位位数
	*  如果采用多缓冲器通信，配置 USART_CR3寄存器中的 DMA使能位(DMAT)
	4. 设置 USART_CR1中的 TE位，发送一个空闲帧作为第一次数据的发送
	5. 设置 USART_BRR寄存器，设定要求的波特率
	6. 把发送的数据写进 USART_DR寄存器 (此动作自动清除 TXE位)。
	   -----在只有一个缓冲器的情况下，对每个待发送的数据重复此步骤

/* 数据接收过程 */
	1. 设置 USART_CR1寄存器中 UE位置位 来激活USART
	2. 设置 USART_CR1寄存器中 的M位    来定义字长
	3. 设置 USART_CR2寄存器中 编写停止位位数
	*  如果采用多缓冲器通信，配置 USART_CR3寄存器中的 DMA使能位(DMAT)
	4. 设置 USART_BRR寄存器，设定要求的波特率
	5. 设置 USART_CR1中的 RE位，激活接收器，使他开始寻找起始位

/* 当一个字符被接收时 */
	RXNE位被置位。它表明移位寄存器的内容被转移到 RDR.
	RXNEIE位被置位。则产生中断信号.
	在接收期间如果检测到帧错误，噪音或溢出错误，错误标志将被置起.



% /* usart寄存器 */
USART_SR	状态寄存器
USART_DR	数据寄存器
USART_BRR	波特比率寄存器
USART_CR1	控制寄存器 1
USART_CR2	控制寄存器 2
USART_CR3	控制寄存器 3
1. 起始位
2. 数据位 (8, 9)
3. 奇偶校验位 (9 bit)
4. 停止位 (1, 1.5, 2)
5. 波特率设置 (速度)






###########################################################
### % ADC模拟数字转换器
###########################################################
被控制对象 --->非电量 --->模拟传感器 --->模拟电量 --->A/D转换器 --->数字量 --->单片机
单片机 ---> 数字量 --->D/A转换器 --->模拟电量 --->执行元件 --->控制操作 --->被控制对象
% 将模拟量转换为数字量的过程称为模数转换，完成这一转换的器件称为ADC
% 将数字量转换为模拟量的过程称为数模转换，完成这一转换的器件称为DAC



% ADC转换器主要参数
1 分辨率
% 分辨率是指AD转换器输出数字量的最低有效位变化一个数码时，对应输入模拟量的变化
% 最大输入电压为5V，8位的A/D转换器，它分辨最小的输入电压变体化量为[5V/2^8=19.53mV]
2 相对精度
% 相对精度是指A/D转换器实际输出数字量与理论输出数字量之间的最大差值
% 通常用最低有效位LSB的倍数来表示
3 转换速度
% 转换速度是指A/D转换器完成一次转换所需要的时间
% 即从转换开始到输出端出现的稳定的数字信号所需要的时间



% STM32的ADC功能描述
1 STM32的ADC是12位逐次逼近型的模数转换器
2 它有18个通道，可以测量16个外部和2个内部信号源
3 各通道的AD转换可以 单次，连续，扫描，间断，模式执行
4 ADC的结果可以左对齐或右对齐方式存储在16位数据寄存器中
5 模拟看门狗特性允许应用程序检测输入电压是否超出用户定义的高/低阀值
6 STM32的ADC最大转换速率为1MHz，也就是1uS(在ADCCLK=14M,采样周期为1.5个ADC时钟下得到)
7 不要让ADC的时钟超过14MHz，否则将导致结果准确度下降



% ADC模数转换器配置流程
{
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,  ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
    
    //将PC5引脚配置为模拟输入模式
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    
    //ADC1的配置
    ADC_InitTypeDef   ADC_InitStructure;
    ADC_InitStructure.ADC_Mode               = ADC_Mode_Independent; //独立模式
    ADC_InitStructure.ADC_ScanConvMode       = ENABLE; //连续多通道模式
    ADC_InitStructure.ADC_ContinuousConVMode = ENABLE; //连续转换模式
    ADC_InitStructure.ADC_ExternalTrigConv   = ADC_ExternalTrigConv_None;//不受外界决定 
    ADC_InitStructure.ADC_DataAlign          = ADC_DataAlign_Right;//数据右对齐
    ADC_InitStructure.ADC_NBrOfChannel       = 1;      //扫描通道数1
    
    ADC_RegularChannelConfig(ADC1, ADC_Channel_15, 1, ADC_SampleTime_55Cycles5)
    ADC_Cmd(ADC1, ENABLE);
    ADC_SoftwareStartConvCmd(ADC1, ENABLE);
}
% 获得ADC1中的数据，并转换
u32 conresult;
u32 Test_ConverisonResult(void)
{
    if (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == SET)
    {
        conresult = ADC_GetConversionValue(ADC1);
        //2^12=4096 VDDA=3.3V=3300mV
        conresult = conresult * 3300;
        conresult = conresult / 4096;
    }
    ADC_ClearITPendingBit(ADC1, ADC_IT_EOC); //清除ADC中断
    return(conresult);
}
//数码管显示转换结果，显示在4位数码管上
while (1)
{
    conversionValue = Test_ConversionResult();
    ConversionValue = ConversionValue * 1000;
    NumbTube_Display(conversionValue, 4);
}





###########################################################
### % RTC实时时钟
###########################################################
void RTC_Configuration(void)
{
1 % 打开APB1总线上的PWR,BKP时钟
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);
    
2 % 使能RTC和后备寄存器访问, PWR_CR DBP=1
    PWR_BackupAccessCmd(ENABLE);
    
3 % 复位备份寄存器设置
    BKP_DeInit();
    
4 % 打开外部低速晶体振荡器
    RCC_LSEConfig(RCC_LSE_ON);
    // % 等侍LSE起振
    while(RCC_GetFlagStatus(RCC_FLAG_LSIRDY) == RESET);   
    // % 选择LSE为RTC时钟源
    RCC_RTCCLKConfig(RTCCLKSource_LSE);
    //使能 RTC 时钟
    RCC_RTCCLKCmd(ENABLE);
    
5 % 等侍 RTC 寄存器同步(APB1)完成
    RTC_WaitForSynchro();
    
6 % 等侍最近一次对 RTC寄存器 的写操作完成
    RTC_WaitForLastTask();
    
7 % 使能RTC秒中断, 使能闹钟中断
    RTC_ITConfig(RTC_IT_SEC, ENABLE);
    RTC_ITConfig(RTC_IT_ALR, ENABLE);
    // % 等侍最近一次对 RTC寄存器 的写操作完成
    RTC_WaitForLastTask();
    
8 % 设置RTC时钟分频为32767， 则计数频率 = (32.768KHz / (32767 + 1)) = 1Hz
    //设置为0，为1分频
    RTC_SetPrescaler(32767);
    // % 等侍最近一次对 RTC寄存器 的写操作完成
    RTC_WaitForLastTask();
    
9 % 设置当前的时间值; 年 月 日 时 分 秒 星期
    //t = 秒 + (分*60) + (时*3600) (日*24*3600)
    RTC_SetCounter((u32)t);
    // % 等侍最近一次对 RTC寄存器 的写操作完成
    RTC_WaitForLastTask();
    
10 % 失能RTC和后备寄存器访问, PWR_CR DBP=0
    //PWR_CR DBP:取消后备区域的写保护
    //注:如果RTC的时钟是HSE/128,该位必须保持为’1’。
    PWR_BackupAccessCmd(DISENABLE);

}




###########################################################
### % STM32内部温度传感器
###########################################################
1 该温度传感器在内部和 ADCx_IN16 输入通道相连
2 温度传感器模拟输入推荐采样时间是 17.1uS
3 -40~125度， 精度为正负1.5度



% 使用温度传感器
1 选择ADC_IN16输入通道
2 选择采样时间为 17.1uS
3 设置ADC控制寄存器2(ADC_CR2)的TSVREFE位，以唤醒关电模式下的温度传感器
4 通过设置ADON位启动ADC转换(或用外部触发)
5 读ADC数据寄存器上的Vsense数据结果
6 利用下列公式得出温度





###########################################################
### % STM32_PWM
###########################################################
% PWM(Pulse Width Modulation)脉冲宽度调制
1 PWM信号是数字的，在给定的任意时刻，满幅值的直流供电要么是完全有(ON), 要么是完全无(OFF)
2 电压或电流源是以种通(ON)或断(OFF)的重复脉冲序列被加载到模拟负载上
3 改变脉冲的周期可以达到高频的效果
4 改变脉冲的宽度或占空比可以达到调压的效果



STM32_PWM输出模式
% STM32_PWM有2种模式， 模式1和模式2， 由TIMx_CCMRx寄存器中的OCxM位确定
% (110为模式1; 111为模式2)
110 PWM模式1在向上计数时， 一旦 TIMx_CNT < TIMx_CCR1 时，通道1为有效电平(OC1REF=1)，否则为无效电平(OC1REF=0)
    PWM模式1在向下计数时， 一旦 TIMx_CNT > TIMx_CCR1 时，通道1为无效电平(OC1REF=0)，否则为有效电平(OC1REF=1)

110 PWM模式2在向上计数时， 一旦 TIMx_CNT < TIMx_CCR1 时，通道1为无效电平(OC1REF=0)，否则为有效电平(OC1REF=1)
    PWM模式2在向下计数时， 一旦 TIMx_CNT > TIMx_CCR1 时，通道1为有效电平(OC1REF=1)，否则为无效电平(OC1REF=0)


% pwm占空比计算公式
占空比 = (TIMx_CRRx / TIMx_ARR) * 100%



% 通过PWM控制LED的亮度，配置PA1为TIM2的PWM输出
1 RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
2 RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
3 void GPIO_Configuration(void)
{
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_MOde_AF_PP;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
}   
4 void TIM_configuration(void)
{
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    TIM_OCInitTypeDef TIM_OCInitStructure;
    
    TIM_TimeBaseStructure.TIM_Prescaler = 0; //72MHz
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_counterMode_Up;
    TIM_TimeBaseStructure.TIM_Period = 0xff; 
    TIM_TimeBaseStructure.TIM_ClockDivision = 0x00;
    TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
    
    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
    TIM_OCInitStructure.TIM_Channel = TIM_Channel_2;
    TIM_OCInitStructure.TIM_Pulse = 0xff;
    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
    TIM_OC2PreloadConfig(TIM2, TIM_OCPreload_Enable);
    TIM_Cmd(TIM2, ENABLE);
}




###########################################################
### % SMG_数码管 | SPI
###########################################################
% 数码管控制软件模拟， 74hc595是低位先传数据的
% 数码管位段控制->PC8=0，为共阳数码管
% 74H595控制  ->RCK(PA1) ->SCK(PA5) ->MISO(PA6) ->MOSI(PA7) ->595_ncs(PA0)
1 数码管位段控制->PC8=0; 595_ncs=0
GPIO_ResetBits(GPIOC, GPIO_Pin_8);
GPIO_ResetBits(GPIOA, GPIO_Pin_0);
/*********************************************************/
2 SCK上升沿， MOSI数据输入，完成这个数据通信 00100101, 先传最高位
u8 data = 0x25;
u8 i;
for (i = 0; i < 8; i++)
{
    GPIO_ResetBits(GPIOA, GPIO_Pin_5);     //->SCK(PA5)=0,先把SCK置低
    if ((data & 0x80) == 0x00)
        GPIO_ResetBits(GPIOA, GPIO_Pin_7); //->MOSI(PA7)=0,主机发送数据，从机接受数据
    else
        GPIO_setBits(GPIOA, GPIO_Pin_7);   //->MOSI(PA7)=1,主机发送数据，从机接受数据
    GPIO_setBits(GPIOA, GPIO_Pin_5);       //->SCK(PA5)=1,先把SCK拉高，产生一个上升沿
    date = data<<1;                        //数据向右移动1位
}
/*********************************************************/
22 SCK上升沿， MOSI数据输入，完成这个数据通信 00100101, 先传最低位数据
u8 data = 0x25;
u8 i;
for (i = 0; i < 8; i++)
{
    GPIO_ResetBits(GPIOA, GPIO_Pin_5);     //->SCK(PA5)=0,先把SCK置低
    if ((data & 0x01) == 0x00)
        GPIO_ResetBits(GPIOA, GPIO_Pin_7); //->MOSI(PA7)=0,主机发送数据，从机接受数据
    else
        GPIO_setBits(GPIOA, GPIO_Pin_7);   //->MOSI(PA7)=1,主机发送数据，从机接受数据
    GPIO_setBits(GPIOA, GPIO_Pin_5);       //->SCK(PA5)=1,先把SCK拉高，产生一个上升沿
    date = data>>1;                        //数据向左移动1位
}
3 RCK(PA1)上升沿数据进行锁存
GPIO_ResetBits(GPIOA, GPIO_Pin_1);         //->SCK(PA1)=0,先把RCK置低
Delay_MS(2);
GPIO_setBits(GPIOA, GPIO_Pin_1);           //->SCK(PA1)=1,再把RCK拉高



% SPI_SMG/SPI是一个全双工的同步串行接口
% 在数据传输过程中，总线上只能是一个主机和一个从机进行通信
1 MISO(Master In Slave Out) 主机输入，从机输出信号
2 MOSI(Master Out Slave In) 主机输出，从机输入信号
3 SCK (Serial Clock)        串行时钟信号
4 SS  (Slave Select)        从机选择信号，低电平有效
% CPOL时钟极性；决定时钟SCK的有效脉冲(正脉冲，负脉冲)
% CPHA时钟相位；决定数据线什么时候输出数据或采集数据 
1 % 数据与时钟的相位关系图
CPOL/CPHA           第一位数据的输出        其它位输出       数据采集
CPOL=0, CPHA=0      在第1个SCK上升沿之前    SCK下降沿       SCK上升沿
CPOL=1, CPHA=1      第1个SCK下降沿         SCK下降沿       SCK上升沿
CPOL=1, CPHA=0      在第1个SCK下降沿之前    SCK上升沿       SCK下降沿
CPOL=0, CPHA=1      第1个SCK上升沿         SCK上升沿       SCK下降沿
2 % 根据SPI_CR1寄存器中的LSBFIRST位，输出数据位时可以MSB在先也可以LSB在先
3 % 根据SPI_CR1寄存器中的DFF位，每个数据帧可以是8位或是16位



% 74HC595_SPI通信
 
 



