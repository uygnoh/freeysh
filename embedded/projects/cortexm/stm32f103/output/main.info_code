
output/main.elf:     file format elf32-littlearm


Disassembly of section .text:

080001e4 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop

080001e8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80001e8:	e7fe      	b.n	80001e8 <HardFault_Handler>
 80001ea:	bf00      	nop

080001ec <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80001ec:	e7fe      	b.n	80001ec <MemManage_Handler>
 80001ee:	bf00      	nop

080001f0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80001f0:	e7fe      	b.n	80001f0 <BusFault_Handler>
 80001f2:	bf00      	nop

080001f4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80001f4:	e7fe      	b.n	80001f4 <UsageFault_Handler>
 80001f6:	bf00      	nop

080001f8 <SVC_Handler>:
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop

080001fc <DebugMon_Handler>:
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop

08000200 <PendSV_Handler>:
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop

08000204 <SysTick_Handler>:
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop

08000208 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000208:	b430      	push	{r4, r5}
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800020a:	2400      	movs	r4, #0
  RCC->CIR = 0x009F0000;
 800020c:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
  RCC->CR |= (uint32_t)0x00000001;
 8000210:	4b3a      	ldr	r3, [pc, #232]	; (80002fc <SystemInit+0xf4>)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000212:	493b      	ldr	r1, [pc, #236]	; (8000300 <SystemInit+0xf8>)
  RCC->CR |= (uint32_t)0x00000001;
 8000214:	6818      	ldr	r0, [r3, #0]
{
 8000216:	b082      	sub	sp, #8
  RCC->CR |= (uint32_t)0x00000001;
 8000218:	f040 0001 	orr.w	r0, r0, #1
 800021c:	6018      	str	r0, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800021e:	6858      	ldr	r0, [r3, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000220:	461a      	mov	r2, r3
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000222:	4001      	ands	r1, r0
 8000224:	6059      	str	r1, [r3, #4]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000226:	6819      	ldr	r1, [r3, #0]
 8000228:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 800022c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8000230:	6019      	str	r1, [r3, #0]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000232:	6819      	ldr	r1, [r3, #0]
 8000234:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000238:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800023a:	6859      	ldr	r1, [r3, #4]
 800023c:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 8000240:	6059      	str	r1, [r3, #4]
  RCC->CIR = 0x009F0000;
 8000242:	609d      	str	r5, [r3, #8]
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000244:	9400      	str	r4, [sp, #0]
 8000246:	9401      	str	r4, [sp, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000248:	6819      	ldr	r1, [r3, #0]
 800024a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800024e:	6019      	str	r1, [r3, #0]
 8000250:	e003      	b.n	800025a <SystemInit+0x52>
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000252:	9b00      	ldr	r3, [sp, #0]
 8000254:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000258:	d009      	beq.n	800026e <SystemInit+0x66>
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800025a:	6813      	ldr	r3, [r2, #0]
 800025c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000260:	9301      	str	r3, [sp, #4]
    StartUpCounter++;  
 8000262:	9b00      	ldr	r3, [sp, #0]
 8000264:	3301      	adds	r3, #1
 8000266:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d0f1      	beq.n	8000252 <SystemInit+0x4a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800026e:	4b23      	ldr	r3, [pc, #140]	; (80002fc <SystemInit+0xf4>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8000276:	bf18      	it	ne
 8000278:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800027a:	9301      	str	r3, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800027c:	9b01      	ldr	r3, [sp, #4]
 800027e:	2b01      	cmp	r3, #1
 8000280:	d006      	beq.n	8000290 <SystemInit+0x88>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000282:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000286:	4b1f      	ldr	r3, [pc, #124]	; (8000304 <SystemInit+0xfc>)
 8000288:	609a      	str	r2, [r3, #8]
}
 800028a:	b002      	add	sp, #8
 800028c:	bc30      	pop	{r4, r5}
 800028e:	4770      	bx	lr
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000290:	491d      	ldr	r1, [pc, #116]	; (8000308 <SystemInit+0x100>)
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000292:	4b1a      	ldr	r3, [pc, #104]	; (80002fc <SystemInit+0xf4>)
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000294:	6808      	ldr	r0, [r1, #0]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000296:	461a      	mov	r2, r3
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000298:	f040 0010 	orr.w	r0, r0, #16
 800029c:	6008      	str	r0, [r1, #0]
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800029e:	6808      	ldr	r0, [r1, #0]
 80002a0:	f020 0003 	bic.w	r0, r0, #3
 80002a4:	6008      	str	r0, [r1, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80002a6:	6808      	ldr	r0, [r1, #0]
 80002a8:	f040 0002 	orr.w	r0, r0, #2
 80002ac:	6008      	str	r0, [r1, #0]
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80002ae:	6859      	ldr	r1, [r3, #4]
 80002b0:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80002b2:	6859      	ldr	r1, [r3, #4]
 80002b4:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80002b6:	6859      	ldr	r1, [r3, #4]
 80002b8:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80002bc:	6059      	str	r1, [r3, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80002be:	6859      	ldr	r1, [r3, #4]
 80002c0:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 80002c4:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80002c6:	6859      	ldr	r1, [r3, #4]
 80002c8:	f441 11e8 	orr.w	r1, r1, #1900544	; 0x1d0000
 80002cc:	6059      	str	r1, [r3, #4]
    RCC->CR |= RCC_CR_PLLON;
 80002ce:	6819      	ldr	r1, [r3, #0]
 80002d0:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80002d4:	6019      	str	r1, [r3, #0]
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80002d6:	6813      	ldr	r3, [r2, #0]
 80002d8:	019b      	lsls	r3, r3, #6
 80002da:	d5fc      	bpl.n	80002d6 <SystemInit+0xce>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80002dc:	6853      	ldr	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80002de:	4907      	ldr	r1, [pc, #28]	; (80002fc <SystemInit+0xf4>)
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80002e0:	f023 0303 	bic.w	r3, r3, #3
 80002e4:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80002e6:	6853      	ldr	r3, [r2, #4]
 80002e8:	f043 0302 	orr.w	r3, r3, #2
 80002ec:	6053      	str	r3, [r2, #4]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80002ee:	684b      	ldr	r3, [r1, #4]
 80002f0:	f003 030c 	and.w	r3, r3, #12
 80002f4:	2b08      	cmp	r3, #8
 80002f6:	d1fa      	bne.n	80002ee <SystemInit+0xe6>
 80002f8:	e7c3      	b.n	8000282 <SystemInit+0x7a>
 80002fa:	bf00      	nop
 80002fc:	40021000 	.word	0x40021000
 8000300:	f8ff0000 	.word	0xf8ff0000
 8000304:	e000ed00 	.word	0xe000ed00
 8000308:	40022000 	.word	0x40022000

0800030c <SystemCoreClockUpdate>:
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800030c:	4a11      	ldr	r2, [pc, #68]	; (8000354 <SystemCoreClockUpdate+0x48>)
 800030e:	6853      	ldr	r3, [r2, #4]
 8000310:	f003 030c 	and.w	r3, r3, #12
  switch (tmp)
 8000314:	2b08      	cmp	r3, #8
 8000316:	d10e      	bne.n	8000336 <SystemCoreClockUpdate+0x2a>
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000318:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800031a:	6851      	ldr	r1, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;
 800031c:	f3c3 4383 	ubfx	r3, r3, #18, #4
      if (pllsource == 0x00)
 8000320:	03c9      	lsls	r1, r1, #15
      pllmull = ( pllmull >> 18) + 2;
 8000322:	f103 0302 	add.w	r3, r3, #2
      if (pllsource == 0x00)
 8000326:	d510      	bpl.n	800034a <SystemCoreClockUpdate+0x3e>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8000328:	6852      	ldr	r2, [r2, #4]
 800032a:	0392      	lsls	r2, r2, #14
 800032c:	d40d      	bmi.n	800034a <SystemCoreClockUpdate+0x3e>
          SystemCoreClock = HSE_VALUE * pllmull;
 800032e:	4a0a      	ldr	r2, [pc, #40]	; (8000358 <SystemCoreClockUpdate+0x4c>)
 8000330:	fb02 f303 	mul.w	r3, r2, r3
 8000334:	e000      	b.n	8000338 <SystemCoreClockUpdate+0x2c>
  switch (tmp)
 8000336:	4b08      	ldr	r3, [pc, #32]	; (8000358 <SystemCoreClockUpdate+0x4c>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000338:	4a06      	ldr	r2, [pc, #24]	; (8000354 <SystemCoreClockUpdate+0x48>)
 800033a:	4908      	ldr	r1, [pc, #32]	; (800035c <SystemCoreClockUpdate+0x50>)
 800033c:	6852      	ldr	r2, [r2, #4]
 800033e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000342:	5c8a      	ldrb	r2, [r1, r2]
  SystemCoreClock >>= tmp;  
 8000344:	40d3      	lsrs	r3, r2
 8000346:	610b      	str	r3, [r1, #16]
}
 8000348:	4770      	bx	lr
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 800034a:	4a05      	ldr	r2, [pc, #20]	; (8000360 <SystemCoreClockUpdate+0x54>)
 800034c:	fb02 f303 	mul.w	r3, r2, r3
 8000350:	e7f2      	b.n	8000338 <SystemCoreClockUpdate+0x2c>
 8000352:	bf00      	nop
 8000354:	40021000 	.word	0x40021000
 8000358:	007a1200 	.word	0x007a1200
 800035c:	20000000 	.word	0x20000000
 8000360:	003d0900 	.word	0x003d0900

08000364 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000364:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
 8000366:	4b2f      	ldr	r3, [pc, #188]	; (8000424 <GPIO_DeInit+0xc0>)
 8000368:	4298      	cmp	r0, r3
 800036a:	d01c      	beq.n	80003a6 <GPIO_DeInit+0x42>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 800036c:	4b2e      	ldr	r3, [pc, #184]	; (8000428 <GPIO_DeInit+0xc4>)
 800036e:	4298      	cmp	r0, r3
 8000370:	d023      	beq.n	80003ba <GPIO_DeInit+0x56>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 8000372:	4b2e      	ldr	r3, [pc, #184]	; (800042c <GPIO_DeInit+0xc8>)
 8000374:	4298      	cmp	r0, r3
 8000376:	d02a      	beq.n	80003ce <GPIO_DeInit+0x6a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 8000378:	4b2d      	ldr	r3, [pc, #180]	; (8000430 <GPIO_DeInit+0xcc>)
 800037a:	4298      	cmp	r0, r3
 800037c:	d031      	beq.n	80003e2 <GPIO_DeInit+0x7e>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
  }    
  else if (GPIOx == GPIOE)
 800037e:	4b2d      	ldr	r3, [pc, #180]	; (8000434 <GPIO_DeInit+0xd0>)
 8000380:	4298      	cmp	r0, r3
 8000382:	d006      	beq.n	8000392 <GPIO_DeInit+0x2e>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
  } 
  else if (GPIOx == GPIOF)
 8000384:	4b2c      	ldr	r3, [pc, #176]	; (8000438 <GPIO_DeInit+0xd4>)
 8000386:	4298      	cmp	r0, r3
 8000388:	d041      	beq.n	800040e <GPIO_DeInit+0xaa>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOG)
 800038a:	4b2c      	ldr	r3, [pc, #176]	; (800043c <GPIO_DeInit+0xd8>)
 800038c:	4298      	cmp	r0, r3
 800038e:	d032      	beq.n	80003f6 <GPIO_DeInit+0x92>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    }
  }
}
 8000390:	bd08      	pop	{r3, pc}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 8000392:	2101      	movs	r1, #1
 8000394:	2040      	movs	r0, #64	; 0x40
 8000396:	f000 fbcb 	bl	8000b30 <RCC_APB2PeriphResetCmd>
}
 800039a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 800039e:	2100      	movs	r1, #0
 80003a0:	2040      	movs	r0, #64	; 0x40
 80003a2:	f000 bbc5 	b.w	8000b30 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 80003a6:	2101      	movs	r1, #1
 80003a8:	2004      	movs	r0, #4
 80003aa:	f000 fbc1 	bl	8000b30 <RCC_APB2PeriphResetCmd>
}
 80003ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 80003b2:	2100      	movs	r1, #0
 80003b4:	2004      	movs	r0, #4
 80003b6:	f000 bbbb 	b.w	8000b30 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80003ba:	2101      	movs	r1, #1
 80003bc:	2008      	movs	r0, #8
 80003be:	f000 fbb7 	bl	8000b30 <RCC_APB2PeriphResetCmd>
}
 80003c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 80003c6:	2100      	movs	r1, #0
 80003c8:	2008      	movs	r0, #8
 80003ca:	f000 bbb1 	b.w	8000b30 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80003ce:	2101      	movs	r1, #1
 80003d0:	2010      	movs	r0, #16
 80003d2:	f000 fbad 	bl	8000b30 <RCC_APB2PeriphResetCmd>
}
 80003d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 80003da:	2100      	movs	r1, #0
 80003dc:	2010      	movs	r0, #16
 80003de:	f000 bba7 	b.w	8000b30 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 80003e2:	2101      	movs	r1, #1
 80003e4:	2020      	movs	r0, #32
 80003e6:	f000 fba3 	bl	8000b30 <RCC_APB2PeriphResetCmd>
}
 80003ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 80003ee:	2100      	movs	r1, #0
 80003f0:	2020      	movs	r0, #32
 80003f2:	f000 bb9d 	b.w	8000b30 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 80003f6:	2101      	movs	r1, #1
 80003f8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80003fc:	f000 fb98 	bl	8000b30 <RCC_APB2PeriphResetCmd>
}
 8000400:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 8000404:	2100      	movs	r1, #0
 8000406:	f44f 7080 	mov.w	r0, #256	; 0x100
 800040a:	f000 bb91 	b.w	8000b30 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 800040e:	2101      	movs	r1, #1
 8000410:	2080      	movs	r0, #128	; 0x80
 8000412:	f000 fb8d 	bl	8000b30 <RCC_APB2PeriphResetCmd>
}
 8000416:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 800041a:	2100      	movs	r1, #0
 800041c:	2080      	movs	r0, #128	; 0x80
 800041e:	f000 bb87 	b.w	8000b30 <RCC_APB2PeriphResetCmd>
 8000422:	bf00      	nop
 8000424:	40010800 	.word	0x40010800
 8000428:	40010c00 	.word	0x40010c00
 800042c:	40011000 	.word	0x40011000
 8000430:	40011400 	.word	0x40011400
 8000434:	40011800 	.word	0x40011800
 8000438:	40011c00 	.word	0x40011c00
 800043c:	40012000 	.word	0x40012000

08000440 <GPIO_AFIODeInit>:
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 8000440:	2101      	movs	r1, #1
{
 8000442:	b508      	push	{r3, lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 8000444:	4608      	mov	r0, r1
 8000446:	f000 fb73 	bl	8000b30 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
}
 800044a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 800044e:	2100      	movs	r1, #0
 8000450:	2001      	movs	r0, #1
 8000452:	f000 bb6d 	b.w	8000b30 <RCC_APB2PeriphResetCmd>
 8000456:	bf00      	nop

08000458 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000458:	b430      	push	{r4, r5}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800045a:	78cc      	ldrb	r4, [r1, #3]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 800045c:	06e3      	lsls	r3, r4, #27
 800045e:	bf48      	it	mi
 8000460:	788b      	ldrbmi	r3, [r1, #2]
 8000462:	f004 050f 	and.w	r5, r4, #15
 8000466:	bf48      	it	mi
 8000468:	431d      	orrmi	r5, r3
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 800046a:	880b      	ldrh	r3, [r1, #0]
 800046c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8000470:	d033      	beq.n	80004da <GPIO_Init+0x82>
 8000472:	2c48      	cmp	r4, #72	; 0x48
  {
    tmpreg = GPIOx->CRL;
 8000474:	6802      	ldr	r2, [r0, #0]
 8000476:	f000 80f4 	beq.w	8000662 <GPIO_Init+0x20a>
 800047a:	2c28      	cmp	r4, #40	; 0x28
 800047c:	f000 8133 	beq.w	80006e6 <GPIO_Init+0x28e>
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 8000480:	07d9      	lsls	r1, r3, #31
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000482:	bf44      	itt	mi
 8000484:	f022 020f 	bicmi.w	r2, r2, #15
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000488:	432a      	orrmi	r2, r5
      if (currentpin == pos)
 800048a:	0799      	lsls	r1, r3, #30
        tmpreg &= ~pinmask;
 800048c:	bf44      	itt	mi
 800048e:	f022 02f0 	bicmi.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 8000492:	ea42 1205 	orrmi.w	r2, r2, r5, lsl #4
      if (currentpin == pos)
 8000496:	0759      	lsls	r1, r3, #29
        tmpreg &= ~pinmask;
 8000498:	bf44      	itt	mi
 800049a:	f422 6270 	bicmi.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 800049e:	ea42 2205 	orrmi.w	r2, r2, r5, lsl #8
      if (currentpin == pos)
 80004a2:	0719      	lsls	r1, r3, #28
        tmpreg &= ~pinmask;
 80004a4:	bf44      	itt	mi
 80004a6:	f422 4270 	bicmi.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 80004aa:	ea42 3205 	orrmi.w	r2, r2, r5, lsl #12
      if (currentpin == pos)
 80004ae:	06d9      	lsls	r1, r3, #27
        tmpreg &= ~pinmask;
 80004b0:	bf44      	itt	mi
 80004b2:	f422 2270 	bicmi.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 80004b6:	ea42 4205 	orrmi.w	r2, r2, r5, lsl #16
      if (currentpin == pos)
 80004ba:	0699      	lsls	r1, r3, #26
        tmpreg &= ~pinmask;
 80004bc:	bf44      	itt	mi
 80004be:	f422 0270 	bicmi.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 80004c2:	ea42 5205 	orrmi.w	r2, r2, r5, lsl #20
      if (currentpin == pos)
 80004c6:	0659      	lsls	r1, r3, #25
        tmpreg &= ~pinmask;
 80004c8:	bf44      	itt	mi
 80004ca:	f022 6270 	bicmi.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 80004ce:	ea42 6205 	orrmi.w	r2, r2, r5, lsl #24
      if (currentpin == pos)
 80004d2:	0619      	lsls	r1, r3, #24
 80004d4:	f100 8104 	bmi.w	80006e0 <GPIO_Init+0x288>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80004d8:	6002      	str	r2, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80004da:	2bff      	cmp	r3, #255	; 0xff
 80004dc:	d94b      	bls.n	8000576 <GPIO_Init+0x11e>
 80004de:	2c28      	cmp	r4, #40	; 0x28
  {
    tmpreg = GPIOx->CRH;
 80004e0:	6842      	ldr	r2, [r0, #4]
 80004e2:	d04a      	beq.n	800057a <GPIO_Init+0x122>
 80004e4:	2c48      	cmp	r4, #72	; 0x48
 80004e6:	f040 808e 	bne.w	8000606 <GPIO_Init+0x1ae>
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 80004ea:	05d9      	lsls	r1, r3, #23
 80004ec:	d505      	bpl.n	80004fa <GPIO_Init+0xa2>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80004ee:	f44f 7180 	mov.w	r1, #256	; 0x100
        tmpreg &= ~pinmask;
 80004f2:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 80004f6:	432a      	orrs	r2, r5
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80004f8:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 80004fa:	059c      	lsls	r4, r3, #22
 80004fc:	d506      	bpl.n	800050c <GPIO_Init+0xb4>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80004fe:	f44f 7100 	mov.w	r1, #512	; 0x200
        tmpreg &= ~pinmask;
 8000502:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 8000506:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800050a:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 800050c:	0559      	lsls	r1, r3, #21
 800050e:	d506      	bpl.n	800051e <GPIO_Init+0xc6>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000510:	f44f 6180 	mov.w	r1, #1024	; 0x400
        tmpreg &= ~pinmask;
 8000514:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8000518:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800051c:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 800051e:	051c      	lsls	r4, r3, #20
 8000520:	d506      	bpl.n	8000530 <GPIO_Init+0xd8>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000522:	f44f 6100 	mov.w	r1, #2048	; 0x800
        tmpreg &= ~pinmask;
 8000526:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 800052a:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800052e:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8000530:	04d9      	lsls	r1, r3, #19
 8000532:	d506      	bpl.n	8000542 <GPIO_Init+0xea>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000534:	f44f 5180 	mov.w	r1, #4096	; 0x1000
        tmpreg &= ~pinmask;
 8000538:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 800053c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000540:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8000542:	049c      	lsls	r4, r3, #18
 8000544:	d506      	bpl.n	8000554 <GPIO_Init+0xfc>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000546:	f44f 5100 	mov.w	r1, #8192	; 0x2000
        tmpreg &= ~pinmask;
 800054a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 800054e:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000552:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8000554:	0459      	lsls	r1, r3, #17
 8000556:	d506      	bpl.n	8000566 <GPIO_Init+0x10e>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000558:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        tmpreg &= ~pinmask;
 800055c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8000560:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000564:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8000566:	041c      	lsls	r4, r3, #16
 8000568:	d504      	bpl.n	8000574 <GPIO_Init+0x11c>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800056a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
        tmpreg |= (currentmode << pos);
 800056e:	f365 721f 	bfi	r2, r5, #28, #4
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000572:	6103      	str	r3, [r0, #16]
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000574:	6042      	str	r2, [r0, #4]
  }
}
 8000576:	bc30      	pop	{r4, r5}
 8000578:	4770      	bx	lr
      if (currentpin == pos)
 800057a:	05d9      	lsls	r1, r3, #23
 800057c:	d505      	bpl.n	800058a <GPIO_Init+0x132>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800057e:	f44f 7180 	mov.w	r1, #256	; 0x100
        tmpreg &= ~pinmask;
 8000582:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 8000586:	432a      	orrs	r2, r5
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000588:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 800058a:	059c      	lsls	r4, r3, #22
 800058c:	d506      	bpl.n	800059c <GPIO_Init+0x144>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800058e:	f44f 7100 	mov.w	r1, #512	; 0x200
        tmpreg &= ~pinmask;
 8000592:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 8000596:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800059a:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 800059c:	0559      	lsls	r1, r3, #21
 800059e:	d506      	bpl.n	80005ae <GPIO_Init+0x156>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80005a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
        tmpreg &= ~pinmask;
 80005a4:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 80005a8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80005ac:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80005ae:	051c      	lsls	r4, r3, #20
 80005b0:	d506      	bpl.n	80005c0 <GPIO_Init+0x168>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80005b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
        tmpreg &= ~pinmask;
 80005b6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 80005ba:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80005be:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80005c0:	04d9      	lsls	r1, r3, #19
 80005c2:	d506      	bpl.n	80005d2 <GPIO_Init+0x17a>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80005c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
        tmpreg &= ~pinmask;
 80005c8:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 80005cc:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80005d0:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80005d2:	049c      	lsls	r4, r3, #18
 80005d4:	d506      	bpl.n	80005e4 <GPIO_Init+0x18c>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80005d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
        tmpreg &= ~pinmask;
 80005da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 80005de:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80005e2:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80005e4:	0459      	lsls	r1, r3, #17
 80005e6:	d506      	bpl.n	80005f6 <GPIO_Init+0x19e>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80005e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        tmpreg &= ~pinmask;
 80005ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 80005f0:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80005f4:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80005f6:	041b      	lsls	r3, r3, #16
 80005f8:	d5bc      	bpl.n	8000574 <GPIO_Init+0x11c>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80005fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
        tmpreg |= (currentmode << pos);
 80005fe:	f365 721f 	bfi	r2, r5, #28, #4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000602:	6143      	str	r3, [r0, #20]
 8000604:	e7b6      	b.n	8000574 <GPIO_Init+0x11c>
      if (currentpin == pos)
 8000606:	05d9      	lsls	r1, r3, #23
        tmpreg &= ~pinmask;
 8000608:	bf44      	itt	mi
 800060a:	f022 020f 	bicmi.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 800060e:	432a      	orrmi	r2, r5
      if (currentpin == pos)
 8000610:	059c      	lsls	r4, r3, #22
        tmpreg &= ~pinmask;
 8000612:	bf44      	itt	mi
 8000614:	f022 02f0 	bicmi.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 8000618:	ea42 1205 	orrmi.w	r2, r2, r5, lsl #4
      if (currentpin == pos)
 800061c:	0559      	lsls	r1, r3, #21
        tmpreg &= ~pinmask;
 800061e:	bf44      	itt	mi
 8000620:	f422 6270 	bicmi.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8000624:	ea42 2205 	orrmi.w	r2, r2, r5, lsl #8
      if (currentpin == pos)
 8000628:	051c      	lsls	r4, r3, #20
        tmpreg &= ~pinmask;
 800062a:	bf44      	itt	mi
 800062c:	f422 4270 	bicmi.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 8000630:	ea42 3205 	orrmi.w	r2, r2, r5, lsl #12
      if (currentpin == pos)
 8000634:	04d9      	lsls	r1, r3, #19
        tmpreg &= ~pinmask;
 8000636:	bf44      	itt	mi
 8000638:	f422 2270 	bicmi.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 800063c:	ea42 4205 	orrmi.w	r2, r2, r5, lsl #16
      if (currentpin == pos)
 8000640:	049c      	lsls	r4, r3, #18
        tmpreg &= ~pinmask;
 8000642:	bf44      	itt	mi
 8000644:	f422 0270 	bicmi.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 8000648:	ea42 5205 	orrmi.w	r2, r2, r5, lsl #20
      if (currentpin == pos)
 800064c:	0459      	lsls	r1, r3, #17
        tmpreg &= ~pinmask;
 800064e:	bf44      	itt	mi
 8000650:	f022 6270 	bicmi.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8000654:	ea42 6205 	orrmi.w	r2, r2, r5, lsl #24
      if (currentpin == pos)
 8000658:	041c      	lsls	r4, r3, #16
 800065a:	d58b      	bpl.n	8000574 <GPIO_Init+0x11c>
        tmpreg |= (currentmode << pos);
 800065c:	f365 721f 	bfi	r2, r5, #28, #4
 8000660:	e788      	b.n	8000574 <GPIO_Init+0x11c>
      if (currentpin == pos)
 8000662:	07d9      	lsls	r1, r3, #31
 8000664:	d504      	bpl.n	8000670 <GPIO_Init+0x218>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000666:	2101      	movs	r1, #1
        tmpreg &= ~pinmask;
 8000668:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 800066c:	432a      	orrs	r2, r5
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800066e:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8000670:	0799      	lsls	r1, r3, #30
 8000672:	d505      	bpl.n	8000680 <GPIO_Init+0x228>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000674:	2102      	movs	r1, #2
        tmpreg &= ~pinmask;
 8000676:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 800067a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800067e:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8000680:	0759      	lsls	r1, r3, #29
 8000682:	d505      	bpl.n	8000690 <GPIO_Init+0x238>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000684:	2104      	movs	r1, #4
        tmpreg &= ~pinmask;
 8000686:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 800068a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800068e:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 8000690:	0719      	lsls	r1, r3, #28
 8000692:	d505      	bpl.n	80006a0 <GPIO_Init+0x248>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000694:	2108      	movs	r1, #8
        tmpreg &= ~pinmask;
 8000696:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 800069a:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800069e:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 80006a0:	06d9      	lsls	r1, r3, #27
 80006a2:	d505      	bpl.n	80006b0 <GPIO_Init+0x258>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80006a4:	2110      	movs	r1, #16
        tmpreg &= ~pinmask;
 80006a6:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 80006aa:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80006ae:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 80006b0:	0699      	lsls	r1, r3, #26
 80006b2:	d505      	bpl.n	80006c0 <GPIO_Init+0x268>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80006b4:	2120      	movs	r1, #32
        tmpreg &= ~pinmask;
 80006b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 80006ba:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80006be:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 80006c0:	0659      	lsls	r1, r3, #25
 80006c2:	d505      	bpl.n	80006d0 <GPIO_Init+0x278>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80006c4:	2140      	movs	r1, #64	; 0x40
        tmpreg &= ~pinmask;
 80006c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 80006ca:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80006ce:	6101      	str	r1, [r0, #16]
      if (currentpin == pos)
 80006d0:	0619      	lsls	r1, r3, #24
 80006d2:	f57f af01 	bpl.w	80004d8 <GPIO_Init+0x80>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80006d6:	2180      	movs	r1, #128	; 0x80
        tmpreg |= (currentmode << pos);
 80006d8:	f365 721f 	bfi	r2, r5, #28, #4
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80006dc:	6101      	str	r1, [r0, #16]
 80006de:	e6fb      	b.n	80004d8 <GPIO_Init+0x80>
        tmpreg |= (currentmode << pos);
 80006e0:	f365 721f 	bfi	r2, r5, #28, #4
 80006e4:	e6f8      	b.n	80004d8 <GPIO_Init+0x80>
      if (currentpin == pos)
 80006e6:	07d9      	lsls	r1, r3, #31
 80006e8:	d504      	bpl.n	80006f4 <GPIO_Init+0x29c>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80006ea:	2101      	movs	r1, #1
        tmpreg &= ~pinmask;
 80006ec:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 80006f0:	432a      	orrs	r2, r5
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80006f2:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 80006f4:	0799      	lsls	r1, r3, #30
 80006f6:	d505      	bpl.n	8000704 <GPIO_Init+0x2ac>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80006f8:	2102      	movs	r1, #2
        tmpreg &= ~pinmask;
 80006fa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 80006fe:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000702:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8000704:	0759      	lsls	r1, r3, #29
 8000706:	d505      	bpl.n	8000714 <GPIO_Init+0x2bc>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000708:	2104      	movs	r1, #4
        tmpreg &= ~pinmask;
 800070a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 800070e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000712:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8000714:	0719      	lsls	r1, r3, #28
 8000716:	d505      	bpl.n	8000724 <GPIO_Init+0x2cc>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000718:	2108      	movs	r1, #8
        tmpreg &= ~pinmask;
 800071a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 800071e:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000722:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8000724:	06d9      	lsls	r1, r3, #27
 8000726:	d505      	bpl.n	8000734 <GPIO_Init+0x2dc>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000728:	2110      	movs	r1, #16
        tmpreg &= ~pinmask;
 800072a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 800072e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000732:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8000734:	0699      	lsls	r1, r3, #26
 8000736:	d505      	bpl.n	8000744 <GPIO_Init+0x2ec>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000738:	2120      	movs	r1, #32
        tmpreg &= ~pinmask;
 800073a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 800073e:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000742:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8000744:	0659      	lsls	r1, r3, #25
 8000746:	d505      	bpl.n	8000754 <GPIO_Init+0x2fc>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000748:	2140      	movs	r1, #64	; 0x40
        tmpreg &= ~pinmask;
 800074a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 800074e:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000752:	6141      	str	r1, [r0, #20]
      if (currentpin == pos)
 8000754:	0619      	lsls	r1, r3, #24
 8000756:	f57f aebf 	bpl.w	80004d8 <GPIO_Init+0x80>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800075a:	2180      	movs	r1, #128	; 0x80
        tmpreg |= (currentmode << pos);
 800075c:	f365 721f 	bfi	r2, r5, #28, #4
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000760:	6141      	str	r1, [r0, #20]
 8000762:	e6b9      	b.n	80004d8 <GPIO_Init+0x80>

08000764 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000764:	f64f 71ff 	movw	r1, #65535	; 0xffff
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000768:	2202      	movs	r2, #2
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800076a:	2304      	movs	r3, #4
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 800076c:	8001      	strh	r1, [r0, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800076e:	7082      	strb	r2, [r0, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000770:	70c3      	strb	r3, [r0, #3]
}
 8000772:	4770      	bx	lr

08000774 <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000774:	6883      	ldr	r3, [r0, #8]
 8000776:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8000778:	bf14      	ite	ne
 800077a:	2001      	movne	r0, #1
 800077c:	2000      	moveq	r0, #0
 800077e:	4770      	bx	lr

08000780 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 8000780:	6880      	ldr	r0, [r0, #8]
}
 8000782:	b280      	uxth	r0, r0
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop

08000788 <GPIO_ReadOutputDataBit>:
  uint8_t bitstatus = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000788:	68c3      	ldr	r3, [r0, #12]
 800078a:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 800078c:	bf14      	ite	ne
 800078e:	2001      	movne	r0, #1
 8000790:	2000      	moveq	r0, #0
 8000792:	4770      	bx	lr

08000794 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 8000794:	68c0      	ldr	r0, [r0, #12]
}
 8000796:	b280      	uxth	r0, r0
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop

0800079c <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 800079c:	6101      	str	r1, [r0, #16]
}
 800079e:	4770      	bx	lr

080007a0 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80007a0:	6141      	str	r1, [r0, #20]
}
 80007a2:	4770      	bx	lr

080007a4 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 80007a4:	b90a      	cbnz	r2, 80007aa <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 80007a6:	6141      	str	r1, [r0, #20]
  }
}
 80007a8:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80007aa:	6101      	str	r1, [r0, #16]
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop

080007b0 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 80007b0:	60c1      	str	r1, [r0, #12]
}
 80007b2:	4770      	bx	lr

080007b4 <GPIO_PinLockConfig>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 80007b4:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80007b8:	6183      	str	r3, [r0, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 80007ba:	6181      	str	r1, [r0, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80007bc:	6183      	str	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80007be:	6983      	ldr	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80007c0:	6983      	ldr	r3, [r0, #24]
}
 80007c2:	4770      	bx	lr

080007c4 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 80007c4:	b410      	push	{r4}
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 80007c6:	f64f 7480 	movw	r4, #65408	; 0xff80
  tmpreg = AFIO->EVCR;
 80007ca:	4a04      	ldr	r2, [pc, #16]	; (80007dc <GPIO_EventOutputConfig+0x18>)
 80007cc:	6813      	ldr	r3, [r2, #0]
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 80007ce:	4023      	ands	r3, r4
 80007d0:	4319      	orrs	r1, r3
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
  tmpreg |= GPIO_PinSource;
 80007d2:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  AFIO->EVCR = tmpreg;
 80007d6:	6011      	str	r1, [r2, #0]
}
 80007d8:	bc10      	pop	{r4}
 80007da:	4770      	bx	lr
 80007dc:	40010000 	.word	0x40010000

080007e0 <GPIO_EventOutputCmd>:
void GPIO_EventOutputCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
 80007e0:	4b01      	ldr	r3, [pc, #4]	; (80007e8 <GPIO_EventOutputCmd+0x8>)
 80007e2:	6018      	str	r0, [r3, #0]
}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	4220001c 	.word	0x4220001c

080007ec <GPIO_PinRemapConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80007ec:	2800      	cmp	r0, #0
  {
    tmpreg = AFIO->MAPR2;
 80007ee:	4b19      	ldr	r3, [pc, #100]	; (8000854 <GPIO_PinRemapConfig+0x68>)
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80007f0:	f400 1240 	and.w	r2, r0, #3145728	; 0x300000
    tmpreg = AFIO->MAPR2;
 80007f4:	bfb4      	ite	lt
 80007f6:	69db      	ldrlt	r3, [r3, #28]
    tmpreg = AFIO->MAPR;
 80007f8:	685b      	ldrge	r3, [r3, #4]
  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80007fa:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
{
 80007fe:	b430      	push	{r4, r5}
  tmp = GPIO_Remap & LSB_MASK;
 8000800:	b284      	uxth	r4, r0
  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8000802:	d01e      	beq.n	8000842 <GPIO_PinRemapConfig+0x56>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8000804:	02c2      	lsls	r2, r0, #11
 8000806:	d513      	bpl.n	8000830 <GPIO_PinRemapConfig+0x44>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8000808:	2203      	movs	r2, #3
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 800080a:	f3c0 4503 	ubfx	r5, r0, #16, #4
    tmp1 = ((uint32_t)0x03) << tmpmask;
 800080e:	40aa      	lsls	r2, r5
    tmpreg &= ~tmp1;
 8000810:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000814:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }

  if (NewState != DISABLE)
 8000818:	b119      	cbz	r1, 8000822 <GPIO_PinRemapConfig+0x36>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 800081a:	0d42      	lsrs	r2, r0, #21
 800081c:	0112      	lsls	r2, r2, #4
 800081e:	4094      	lsls	r4, r2
 8000820:	4323      	orrs	r3, r4
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
  {
    AFIO->MAPR2 = tmpreg;
 8000822:	4a0c      	ldr	r2, [pc, #48]	; (8000854 <GPIO_PinRemapConfig+0x68>)
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000824:	2800      	cmp	r0, #0
    AFIO->MAPR2 = tmpreg;
 8000826:	bfb4      	ite	lt
 8000828:	61d3      	strlt	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
 800082a:	6053      	strge	r3, [r2, #4]
  }  
}
 800082c:	bc30      	pop	{r4, r5}
 800082e:	4770      	bx	lr
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000830:	0d42      	lsrs	r2, r0, #21
 8000832:	0112      	lsls	r2, r2, #4
 8000834:	fa04 f202 	lsl.w	r2, r4, r2
 8000838:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 800083c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000840:	e7ea      	b.n	8000818 <GPIO_PinRemapConfig+0x2c>
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8000842:	4d04      	ldr	r5, [pc, #16]	; (8000854 <GPIO_PinRemapConfig+0x68>)
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8000844:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8000848:	686a      	ldr	r2, [r5, #4]
 800084a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800084e:	606a      	str	r2, [r5, #4]
 8000850:	e7e2      	b.n	8000818 <GPIO_PinRemapConfig+0x2c>
 8000852:	bf00      	nop
 8000854:	40010000 	.word	0x40010000

08000858 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8000858:	b410      	push	{r4}
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 800085a:	240f      	movs	r4, #15
 800085c:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8000860:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000864:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000868:	f001 0103 	and.w	r1, r1, #3
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 800086c:	689a      	ldr	r2, [r3, #8]
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 800086e:	0089      	lsls	r1, r1, #2
 8000870:	408c      	lsls	r4, r1
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8000872:	ea22 0204 	bic.w	r2, r2, r4
 8000876:	609a      	str	r2, [r3, #8]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8000878:	689a      	ldr	r2, [r3, #8]
 800087a:	fa00 f101 	lsl.w	r1, r0, r1
 800087e:	4311      	orrs	r1, r2
 8000880:	6099      	str	r1, [r3, #8]
}
 8000882:	bc10      	pop	{r4}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop

08000888 <GPIO_ETH_MediaInterfaceConfig>:
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
 8000888:	4b01      	ldr	r3, [pc, #4]	; (8000890 <GPIO_ETH_MediaInterfaceConfig+0x8>)
 800088a:	6018      	str	r0, [r3, #0]
}
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	422000dc 	.word	0x422000dc

08000894 <RCC_DeInit>:

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000894:	f44f 001f 	mov.w	r0, #10420224	; 0x9f0000
  RCC->CR |= (uint32_t)0x00000001;
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <RCC_DeInit+0x38>)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800089a:	4a0d      	ldr	r2, [pc, #52]	; (80008d0 <RCC_DeInit+0x3c>)
  RCC->CR |= (uint32_t)0x00000001;
 800089c:	6819      	ldr	r1, [r3, #0]
 800089e:	f041 0101 	orr.w	r1, r1, #1
 80008a2:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80008a4:	6859      	ldr	r1, [r3, #4]
 80008a6:	400a      	ands	r2, r1
 80008a8:	605a      	str	r2, [r3, #4]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80008b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80008b4:	601a      	str	r2, [r3, #0]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80008bc:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80008be:	685a      	ldr	r2, [r3, #4]
 80008c0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80008c4:	605a      	str	r2, [r3, #4]
  RCC->CIR = 0x009F0000;
 80008c6:	6098      	str	r0, [r3, #8]
#endif /* STM32F10X_CL */

}
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	40021000 	.word	0x40021000
 80008d0:	f8ff0000 	.word	0xf8ff0000

080008d4 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <RCC_HSEConfig+0x34>)
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 80008d6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  RCC->CR &= CR_HSEON_Reset;
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80008e0:	601a      	str	r2, [r3, #0]
  RCC->CR &= CR_HSEBYP_Reset;
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80008e8:	601a      	str	r2, [r3, #0]
  switch(RCC_HSE)
 80008ea:	d008      	beq.n	80008fe <RCC_HSEConfig+0x2a>
 80008ec:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 80008f0:	d104      	bne.n	80008fc <RCC_HSEConfig+0x28>
      RCC->CR |= CR_HSEON_Set;
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 80008f8:	601a      	str	r2, [r3, #0]
      break;
      
    default:
      break;
  }
}
 80008fa:	4770      	bx	lr
 80008fc:	4770      	bx	lr
      RCC->CR |= CR_HSEON_Set;
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000904:	601a      	str	r2, [r3, #0]
      break;
 8000906:	4770      	bx	lr
 8000908:	40021000 	.word	0x40021000

0800090c <RCC_WaitForHSEStartUp>:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t StartUpCounter = 0;
 800090c:	2300      	movs	r3, #0
{
 800090e:	b082      	sub	sp, #8

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000910:	4a09      	ldr	r2, [pc, #36]	; (8000938 <RCC_WaitForHSEStartUp+0x2c>)
  __IO uint32_t StartUpCounter = 0;
 8000912:	9301      	str	r3, [sp, #4]
    statusreg = RCC->CR;
 8000914:	6813      	ldr	r3, [r2, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000916:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    StartUpCounter++;  
 800091a:	9b01      	ldr	r3, [sp, #4]
 800091c:	f103 0301 	add.w	r3, r3, #1
 8000920:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000922:	9b01      	ldr	r3, [sp, #4]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000924:	d102      	bne.n	800092c <RCC_WaitForHSEStartUp+0x20>
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000926:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800092a:	d1f3      	bne.n	8000914 <RCC_WaitForHSEStartUp+0x8>
    statusreg = RCC->CR;
 800092c:	4b02      	ldr	r3, [pc, #8]	; (8000938 <RCC_WaitForHSEStartUp+0x2c>)
 800092e:	6818      	ldr	r0, [r3, #0]
}
 8000930:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8000934:	b002      	add	sp, #8
 8000936:	4770      	bx	lr
 8000938:	40021000 	.word	0x40021000

0800093c <RCC_AdjustHSICalibrationValue>:
  tmpreg = RCC->CR;
 800093c:	4a03      	ldr	r2, [pc, #12]	; (800094c <RCC_AdjustHSICalibrationValue+0x10>)
 800093e:	6813      	ldr	r3, [r2, #0]
  tmpreg &= CR_HSITRIM_Mask;
 8000940:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8000944:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
  RCC->CR = tmpreg;
 8000948:	6010      	str	r0, [r2, #0]
}
 800094a:	4770      	bx	lr
 800094c:	40021000 	.word	0x40021000

08000950 <RCC_HSICmd>:
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000950:	4b01      	ldr	r3, [pc, #4]	; (8000958 <RCC_HSICmd+0x8>)
 8000952:	6018      	str	r0, [r3, #0]
}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	42420000 	.word	0x42420000

0800095c <RCC_PLLConfig>:
  tmpreg = RCC->CFGR;
 800095c:	4a03      	ldr	r2, [pc, #12]	; (800096c <RCC_PLLConfig+0x10>)
 800095e:	6853      	ldr	r3, [r2, #4]
  tmpreg &= CFGR_PLL_Mask;
 8000960:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000964:	4319      	orrs	r1, r3
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8000966:	4301      	orrs	r1, r0
  RCC->CFGR = tmpreg;
 8000968:	6051      	str	r1, [r2, #4]
}
 800096a:	4770      	bx	lr
 800096c:	40021000 	.word	0x40021000

08000970 <RCC_PLLCmd>:
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8000970:	4b01      	ldr	r3, [pc, #4]	; (8000978 <RCC_PLLCmd+0x8>)
 8000972:	6018      	str	r0, [r3, #0]
}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	42420060 	.word	0x42420060

0800097c <RCC_SYSCLKConfig>:
  tmpreg = RCC->CFGR;
 800097c:	4a03      	ldr	r2, [pc, #12]	; (800098c <RCC_SYSCLKConfig+0x10>)
 800097e:	6853      	ldr	r3, [r2, #4]
  tmpreg &= CFGR_SW_Mask;
 8000980:	f023 0303 	bic.w	r3, r3, #3
  tmpreg |= RCC_SYSCLKSource;
 8000984:	4318      	orrs	r0, r3
  RCC->CFGR = tmpreg;
 8000986:	6050      	str	r0, [r2, #4]
}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40021000 	.word	0x40021000

08000990 <RCC_GetSYSCLKSource>:
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 8000990:	4b02      	ldr	r3, [pc, #8]	; (800099c <RCC_GetSYSCLKSource+0xc>)
 8000992:	6858      	ldr	r0, [r3, #4]
}
 8000994:	f000 000c 	and.w	r0, r0, #12
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	40021000 	.word	0x40021000

080009a0 <RCC_HCLKConfig>:
  tmpreg = RCC->CFGR;
 80009a0:	4a03      	ldr	r2, [pc, #12]	; (80009b0 <RCC_HCLKConfig+0x10>)
 80009a2:	6853      	ldr	r3, [r2, #4]
  tmpreg &= CFGR_HPRE_Reset_Mask;
 80009a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpreg |= RCC_SYSCLK;
 80009a8:	4318      	orrs	r0, r3
  RCC->CFGR = tmpreg;
 80009aa:	6050      	str	r0, [r2, #4]
}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40021000 	.word	0x40021000

080009b4 <RCC_PCLK1Config>:
  tmpreg = RCC->CFGR;
 80009b4:	4a03      	ldr	r2, [pc, #12]	; (80009c4 <RCC_PCLK1Config+0x10>)
 80009b6:	6853      	ldr	r3, [r2, #4]
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 80009b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
  tmpreg |= RCC_HCLK;
 80009bc:	4318      	orrs	r0, r3
  RCC->CFGR = tmpreg;
 80009be:	6050      	str	r0, [r2, #4]
}
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40021000 	.word	0x40021000

080009c8 <RCC_PCLK2Config>:
  tmpreg = RCC->CFGR;
 80009c8:	4a03      	ldr	r2, [pc, #12]	; (80009d8 <RCC_PCLK2Config+0x10>)
 80009ca:	6853      	ldr	r3, [r2, #4]
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 80009cc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
  tmpreg |= RCC_HCLK << 3;
 80009d0:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
  RCC->CFGR = tmpreg;
 80009d4:	6050      	str	r0, [r2, #4]
}
 80009d6:	4770      	bx	lr
 80009d8:	40021000 	.word	0x40021000

080009dc <RCC_ITConfig>:
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80009dc:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <RCC_ITConfig+0x14>)
 80009de:	7813      	ldrb	r3, [r2, #0]
  if (NewState != DISABLE)
 80009e0:	b919      	cbnz	r1, 80009ea <RCC_ITConfig+0xe>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 80009e2:	ea23 0000 	bic.w	r0, r3, r0
 80009e6:	7010      	strb	r0, [r2, #0]
}
 80009e8:	4770      	bx	lr
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80009ea:	4318      	orrs	r0, r3
 80009ec:	7010      	strb	r0, [r2, #0]
 80009ee:	4770      	bx	lr
 80009f0:	40021009 	.word	0x40021009

080009f4 <RCC_USBCLKConfig>:
  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 80009f4:	4b01      	ldr	r3, [pc, #4]	; (80009fc <RCC_USBCLKConfig+0x8>)
 80009f6:	6018      	str	r0, [r3, #0]
}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	424200d8 	.word	0x424200d8

08000a00 <RCC_ADCCLKConfig>:
  tmpreg = RCC->CFGR;
 8000a00:	4a03      	ldr	r2, [pc, #12]	; (8000a10 <RCC_ADCCLKConfig+0x10>)
 8000a02:	6853      	ldr	r3, [r2, #4]
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8000a04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  tmpreg |= RCC_PCLK2;
 8000a08:	4318      	orrs	r0, r3
  RCC->CFGR = tmpreg;
 8000a0a:	6050      	str	r0, [r2, #4]
}
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40021000 	.word	0x40021000

08000a14 <RCC_LSEConfig>:
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000a14:	2200      	movs	r2, #0
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <RCC_LSEConfig+0x1c>)
  switch(RCC_LSE)
 8000a18:	2801      	cmp	r0, #1
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000a1a:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000a1c:	701a      	strb	r2, [r3, #0]
  switch(RCC_LSE)
 8000a1e:	d005      	beq.n	8000a2c <RCC_LSEConfig+0x18>
 8000a20:	2804      	cmp	r0, #4
 8000a22:	d102      	bne.n	8000a2a <RCC_LSEConfig+0x16>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8000a24:	2205      	movs	r2, #5
 8000a26:	701a      	strb	r2, [r3, #0]
}
 8000a28:	4770      	bx	lr
 8000a2a:	4770      	bx	lr
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8000a2c:	7018      	strb	r0, [r3, #0]
      break;
 8000a2e:	4770      	bx	lr
 8000a30:	40021020 	.word	0x40021020

08000a34 <RCC_LSICmd>:
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8000a34:	4b01      	ldr	r3, [pc, #4]	; (8000a3c <RCC_LSICmd+0x8>)
 8000a36:	6018      	str	r0, [r3, #0]
}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	42420480 	.word	0x42420480

08000a40 <RCC_RTCCLKConfig>:
  RCC->BDCR |= RCC_RTCCLKSource;
 8000a40:	4a02      	ldr	r2, [pc, #8]	; (8000a4c <RCC_RTCCLKConfig+0xc>)
 8000a42:	6a13      	ldr	r3, [r2, #32]
 8000a44:	4318      	orrs	r0, r3
 8000a46:	6210      	str	r0, [r2, #32]
}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40021000 	.word	0x40021000

08000a50 <RCC_RTCCLKCmd>:
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000a50:	4b01      	ldr	r3, [pc, #4]	; (8000a58 <RCC_RTCCLKCmd+0x8>)
 8000a52:	6018      	str	r0, [r3, #0]
}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	4242043c 	.word	0x4242043c

08000a5c <RCC_GetClocksFreq>:
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000a5c:	4a1e      	ldr	r2, [pc, #120]	; (8000ad8 <RCC_GetClocksFreq+0x7c>)
{
 8000a5e:	b410      	push	{r4}
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000a60:	6853      	ldr	r3, [r2, #4]
 8000a62:	f003 030c 	and.w	r3, r3, #12
  switch (tmp)
 8000a66:	2b08      	cmp	r3, #8
 8000a68:	d10f      	bne.n	8000a8a <RCC_GetClocksFreq+0x2e>
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000a6a:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000a6c:	6851      	ldr	r1, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;
 8000a6e:	f3c3 4383 	ubfx	r3, r3, #18, #4
      if (pllsource == 0x00)
 8000a72:	03c9      	lsls	r1, r1, #15
      pllmull = ( pllmull >> 18) + 2;
 8000a74:	f103 0302 	add.w	r3, r3, #2
      if (pllsource == 0x00)
 8000a78:	d528      	bpl.n	8000acc <RCC_GetClocksFreq+0x70>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000a7a:	6852      	ldr	r2, [r2, #4]
 8000a7c:	0392      	lsls	r2, r2, #14
 8000a7e:	d425      	bmi.n	8000acc <RCC_GetClocksFreq+0x70>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8000a80:	4a16      	ldr	r2, [pc, #88]	; (8000adc <RCC_GetClocksFreq+0x80>)
 8000a82:	fb02 f303 	mul.w	r3, r2, r3
 8000a86:	6003      	str	r3, [r0, #0]
 8000a88:	e001      	b.n	8000a8e <RCC_GetClocksFreq+0x32>
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <RCC_GetClocksFreq+0x80>)
 8000a8c:	6003      	str	r3, [r0, #0]
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000a8e:	4912      	ldr	r1, [pc, #72]	; (8000ad8 <RCC_GetClocksFreq+0x7c>)
  presc = APBAHBPrescTable[tmp];
 8000a90:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <RCC_GetClocksFreq+0x84>)
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000a92:	684c      	ldr	r4, [r1, #4]
  tmp = tmp >> 4;
 8000a94:	f3c4 1403 	ubfx	r4, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 8000a98:	5d14      	ldrb	r4, [r2, r4]
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000a9a:	40e3      	lsrs	r3, r4
 8000a9c:	6043      	str	r3, [r0, #4]
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000a9e:	684c      	ldr	r4, [r1, #4]
  tmp = tmp >> 8;
 8000aa0:	f3c4 2402 	ubfx	r4, r4, #8, #3
  presc = APBAHBPrescTable[tmp];
 8000aa4:	5d14      	ldrb	r4, [r2, r4]
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000aa6:	fa23 f404 	lsr.w	r4, r3, r4
 8000aaa:	6084      	str	r4, [r0, #8]
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000aac:	684c      	ldr	r4, [r1, #4]
  tmp = tmp >> 11;
 8000aae:	f3c4 24c2 	ubfx	r4, r4, #11, #3
  presc = APBAHBPrescTable[tmp];
 8000ab2:	5d14      	ldrb	r4, [r2, r4]
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000ab4:	40e3      	lsrs	r3, r4
 8000ab6:	60c3      	str	r3, [r0, #12]
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000ab8:	6849      	ldr	r1, [r1, #4]
}
 8000aba:	bc10      	pop	{r4}
  tmp = tmp >> 14;
 8000abc:	f3c1 3181 	ubfx	r1, r1, #14, #2
  presc = ADCPrescTable[tmp];
 8000ac0:	440a      	add	r2, r1
 8000ac2:	7c12      	ldrb	r2, [r2, #16]
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000ac4:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ac8:	6103      	str	r3, [r0, #16]
}
 8000aca:	4770      	bx	lr
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8000acc:	4a05      	ldr	r2, [pc, #20]	; (8000ae4 <RCC_GetClocksFreq+0x88>)
 8000ace:	fb02 f303 	mul.w	r3, r2, r3
 8000ad2:	6003      	str	r3, [r0, #0]
 8000ad4:	e7db      	b.n	8000a8e <RCC_GetClocksFreq+0x32>
 8000ad6:	bf00      	nop
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	007a1200 	.word	0x007a1200
 8000ae0:	20000014 	.word	0x20000014
 8000ae4:	003d0900 	.word	0x003d0900

08000ae8 <RCC_AHBPeriphClockCmd>:
    RCC->AHBENR |= RCC_AHBPeriph;
 8000ae8:	4a04      	ldr	r2, [pc, #16]	; (8000afc <RCC_AHBPeriphClockCmd+0x14>)
 8000aea:	6953      	ldr	r3, [r2, #20]
  if (NewState != DISABLE)
 8000aec:	b919      	cbnz	r1, 8000af6 <RCC_AHBPeriphClockCmd+0xe>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000aee:	ea23 0000 	bic.w	r0, r3, r0
 8000af2:	6150      	str	r0, [r2, #20]
}
 8000af4:	4770      	bx	lr
    RCC->AHBENR |= RCC_AHBPeriph;
 8000af6:	4318      	orrs	r0, r3
 8000af8:	6150      	str	r0, [r2, #20]
 8000afa:	4770      	bx	lr
 8000afc:	40021000 	.word	0x40021000

08000b00 <RCC_APB2PeriphClockCmd>:
    RCC->APB2ENR |= RCC_APB2Periph;
 8000b00:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <RCC_APB2PeriphClockCmd+0x14>)
 8000b02:	6993      	ldr	r3, [r2, #24]
  if (NewState != DISABLE)
 8000b04:	b919      	cbnz	r1, 8000b0e <RCC_APB2PeriphClockCmd+0xe>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000b06:	ea23 0000 	bic.w	r0, r3, r0
 8000b0a:	6190      	str	r0, [r2, #24]
}
 8000b0c:	4770      	bx	lr
    RCC->APB2ENR |= RCC_APB2Periph;
 8000b0e:	4318      	orrs	r0, r3
 8000b10:	6190      	str	r0, [r2, #24]
 8000b12:	4770      	bx	lr
 8000b14:	40021000 	.word	0x40021000

08000b18 <RCC_APB1PeriphClockCmd>:
    RCC->APB1ENR |= RCC_APB1Periph;
 8000b18:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <RCC_APB1PeriphClockCmd+0x14>)
 8000b1a:	69d3      	ldr	r3, [r2, #28]
  if (NewState != DISABLE)
 8000b1c:	b919      	cbnz	r1, 8000b26 <RCC_APB1PeriphClockCmd+0xe>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000b1e:	ea23 0000 	bic.w	r0, r3, r0
 8000b22:	61d0      	str	r0, [r2, #28]
}
 8000b24:	4770      	bx	lr
    RCC->APB1ENR |= RCC_APB1Periph;
 8000b26:	4318      	orrs	r0, r3
 8000b28:	61d0      	str	r0, [r2, #28]
 8000b2a:	4770      	bx	lr
 8000b2c:	40021000 	.word	0x40021000

08000b30 <RCC_APB2PeriphResetCmd>:
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <RCC_APB2PeriphResetCmd+0x14>)
 8000b32:	68d3      	ldr	r3, [r2, #12]
  if (NewState != DISABLE)
 8000b34:	b919      	cbnz	r1, 8000b3e <RCC_APB2PeriphResetCmd+0xe>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000b36:	ea23 0000 	bic.w	r0, r3, r0
 8000b3a:	60d0      	str	r0, [r2, #12]
}
 8000b3c:	4770      	bx	lr
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000b3e:	4318      	orrs	r0, r3
 8000b40:	60d0      	str	r0, [r2, #12]
 8000b42:	4770      	bx	lr
 8000b44:	40021000 	.word	0x40021000

08000b48 <RCC_APB1PeriphResetCmd>:
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000b48:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <RCC_APB1PeriphResetCmd+0x14>)
 8000b4a:	6913      	ldr	r3, [r2, #16]
  if (NewState != DISABLE)
 8000b4c:	b919      	cbnz	r1, 8000b56 <RCC_APB1PeriphResetCmd+0xe>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000b4e:	ea23 0000 	bic.w	r0, r3, r0
 8000b52:	6110      	str	r0, [r2, #16]
}
 8000b54:	4770      	bx	lr
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000b56:	4318      	orrs	r0, r3
 8000b58:	6110      	str	r0, [r2, #16]
 8000b5a:	4770      	bx	lr
 8000b5c:	40021000 	.word	0x40021000

08000b60 <RCC_BackupResetCmd>:
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8000b60:	4b01      	ldr	r3, [pc, #4]	; (8000b68 <RCC_BackupResetCmd+0x8>)
 8000b62:	6018      	str	r0, [r3, #0]
}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	42420440 	.word	0x42420440

08000b6c <RCC_ClockSecuritySystemCmd>:
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8000b6c:	4b01      	ldr	r3, [pc, #4]	; (8000b74 <RCC_ClockSecuritySystemCmd+0x8>)
 8000b6e:	6018      	str	r0, [r3, #0]
}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	4242004c 	.word	0x4242004c

08000b78 <RCC_MCOConfig>:
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 8000b78:	4b01      	ldr	r3, [pc, #4]	; (8000b80 <RCC_MCOConfig+0x8>)
 8000b7a:	7018      	strb	r0, [r3, #0]
}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40021007 	.word	0x40021007

08000b84 <RCC_GetFlagStatus>:
  tmp = RCC_FLAG >> 5;
 8000b84:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d00b      	beq.n	8000ba2 <RCC_GetFlagStatus+0x1e>
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000b8a:	2b02      	cmp	r3, #2
    statusreg = RCC->BDCR;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <RCC_GetFlagStatus+0x30>)
  tmp = RCC_FLAG & FLAG_Mask;
 8000b8e:	f000 001f 	and.w	r0, r0, #31
    statusreg = RCC->BDCR;
 8000b92:	bf0c      	ite	eq
 8000b94:	6a1b      	ldreq	r3, [r3, #32]
    statusreg = RCC->CSR;
 8000b96:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000b98:	fa23 f000 	lsr.w	r0, r3, r0
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 8000b9c:	f000 0001 	and.w	r0, r0, #1
 8000ba0:	4770      	bx	lr
    statusreg = RCC->CR;
 8000ba2:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <RCC_GetFlagStatus+0x30>)
  tmp = RCC_FLAG & FLAG_Mask;
 8000ba4:	f000 001f 	and.w	r0, r0, #31
    statusreg = RCC->CR;
 8000ba8:	681b      	ldr	r3, [r3, #0]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000baa:	fa23 f000 	lsr.w	r0, r3, r0
}
 8000bae:	f000 0001 	and.w	r0, r0, #1
 8000bb2:	4770      	bx	lr
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 8000bb8:	4a02      	ldr	r2, [pc, #8]	; (8000bc4 <RCC_ClearFlag+0xc>)
 8000bba:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000bbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bc0:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000bc2:	4770      	bx	lr
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <RCC_GetITStatus>:
  ITStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <RCC_GetITStatus+0x10>)
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	4218      	tst	r0, r3
    bitstatus = RESET;
  }

  /* Return the RCC_IT status */
  return  bitstatus;
}
 8000bce:	bf14      	ite	ne
 8000bd0:	2001      	movne	r0, #1
 8000bd2:	2000      	moveq	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40021000 	.word	0x40021000

08000bdc <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8000bdc:	4b01      	ldr	r3, [pc, #4]	; (8000be4 <RCC_ClearITPendingBit+0x8>)
 8000bde:	7018      	strb	r0, [r3, #0]
}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	4002100a 	.word	0x4002100a

08000be8 <delay_us>:
#include "common.h"

void delay_us(u32 nus)
{
	 u32 temp;
	 SysTick->LOAD = 9*nus; 
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <delay_us+0x28>)
{
 8000bea:	b410      	push	{r4}
	 SysTick->VAL  = 0X00; 
	 SysTick->CTRL = 0X01; 
 8000bec:	2101      	movs	r1, #1
	 SysTick->VAL  = 0X00; 
 8000bee:	2400      	movs	r4, #0
	 do
	 {
		temp = SysTick->CTRL; 
 8000bf0:	461a      	mov	r2, r3
	 SysTick->LOAD = 9*nus; 
 8000bf2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8000bf6:	6058      	str	r0, [r3, #4]
	 SysTick->VAL  = 0X00; 
 8000bf8:	609c      	str	r4, [r3, #8]
	 SysTick->CTRL = 0X01; 
 8000bfa:	6019      	str	r1, [r3, #0]
		temp = SysTick->CTRL; 
 8000bfc:	6813      	ldr	r3, [r2, #0]
	 }
	 while((temp&0x01) && (!(temp&(1<<16))));
 8000bfe:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d0fa      	beq.n	8000bfc <delay_us+0x14>
	 
	 SysTick->CTRL = 0x00; 
 8000c06:	2300      	movs	r3, #0
	 SysTick->VAL  = 0X00; 
}
 8000c08:	bc10      	pop	{r4}
	 SysTick->CTRL = 0x00; 
 8000c0a:	6013      	str	r3, [r2, #0]
	 SysTick->VAL  = 0X00; 
 8000c0c:	6093      	str	r3, [r2, #8]
}
 8000c0e:	4770      	bx	lr
 8000c10:	e000e010 	.word	0xe000e010

08000c14 <delay_ms>:


void delay_ms(u32 nms)
{
	 u32 temp;
	 SysTick->LOAD = 9000*nms;
 8000c14:	f242 3128 	movw	r1, #9000	; 0x2328
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <delay_ms+0x2c>)
{
 8000c1a:	b430      	push	{r4, r5}
	 SysTick->VAL  = 0X00; 
 8000c1c:	2500      	movs	r5, #0
	 SysTick->CTRL = 0X01; 
 8000c1e:	2401      	movs	r4, #1
	 do
	 {
		temp = SysTick->CTRL; 
 8000c20:	461a      	mov	r2, r3
	 SysTick->LOAD = 9000*nms;
 8000c22:	fb01 f000 	mul.w	r0, r1, r0
 8000c26:	6058      	str	r0, [r3, #4]
	 SysTick->VAL  = 0X00; 
 8000c28:	609d      	str	r5, [r3, #8]
	 SysTick->CTRL = 0X01; 
 8000c2a:	601c      	str	r4, [r3, #0]
		temp = SysTick->CTRL; 
 8000c2c:	6813      	ldr	r3, [r2, #0]
	 }
	 while((temp&0x01) && (!(temp&(1<<16)))); 
 8000c2e:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d0fa      	beq.n	8000c2c <delay_ms+0x18>
	 
	 SysTick->CTRL = 0x00; 
	 SysTick->VAL  = 0X00; 
}
 8000c36:	bc30      	pop	{r4, r5}
	 SysTick->CTRL = 0x00; 
 8000c38:	2300      	movs	r3, #0
 8000c3a:	6013      	str	r3, [r2, #0]
	 SysTick->VAL  = 0X00; 
 8000c3c:	6093      	str	r3, [r2, #8]
}
 8000c3e:	4770      	bx	lr
 8000c40:	e000e010 	.word	0xe000e010

08000c44 <Reset_Handler>:
 8000c44:	2100      	movs	r1, #0
 8000c46:	e003      	b.n	8000c50 <LoopCopyDataInit>

08000c48 <CopyDataInit>:
 8000c48:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <LoopFillZerobss+0x10>)
 8000c4a:	585b      	ldr	r3, [r3, r1]
 8000c4c:	5043      	str	r3, [r0, r1]
 8000c4e:	3104      	adds	r1, #4

08000c50 <LoopCopyDataInit>:
 8000c50:	4809      	ldr	r0, [pc, #36]	; (8000c78 <LoopFillZerobss+0x14>)
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <LoopFillZerobss+0x18>)
 8000c54:	1842      	adds	r2, r0, r1
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d3f6      	bcc.n	8000c48 <CopyDataInit>
 8000c5a:	4a09      	ldr	r2, [pc, #36]	; (8000c80 <LoopFillZerobss+0x1c>)
 8000c5c:	e002      	b.n	8000c64 <LoopFillZerobss>

08000c5e <FillZerobss>:
 8000c5e:	2300      	movs	r3, #0
 8000c60:	f842 3b04 	str.w	r3, [r2], #4

08000c64 <LoopFillZerobss>:
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <LoopFillZerobss+0x20>)
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d3f9      	bcc.n	8000c5e <FillZerobss>
 8000c6a:	f7ff facd 	bl	8000208 <SystemInit>
 8000c6e:	f000 f80d 	bl	8000c8c <main>
 8000c72:	4770      	bx	lr
 8000c74:	08000cc0 	.word	0x08000cc0
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000028 	.word	0x20000028
 8000c80:	20000028 	.word	0x20000028
 8000c84:	20000028 	.word	0x20000028

08000c88 <ADC1_2_IRQHandler>:
 8000c88:	e7fe      	b.n	8000c88 <ADC1_2_IRQHandler>
	...

08000c8c <main>:
#include "stm32f10x.h"
#include "stm32f10x_conf.h"

int main(void)
{
 8000c8c:	b508      	push	{r3, lr}
	//GPIO_WriteBit(GPIOC, GPIO_Pin_17, Bit_SET);
	
	while (1) {
		GPIO_WriteBit(GPIOC, GPIO_Pin_13, Bit_SET);
 8000c8e:	4c0b      	ldr	r4, [pc, #44]	; (8000cbc <main+0x30>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c96:	4620      	mov	r0, r4
 8000c98:	f7ff fd84 	bl	80007a4 <GPIO_WriteBit>
		delay_ms(500);
 8000c9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ca0:	f7ff ffb8 	bl	8000c14 <delay_ms>
		GPIO_WriteBit(GPIOC, GPIO_Pin_13, Bit_RESET);
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cac:	f7ff fd7a 	bl	80007a4 <GPIO_WriteBit>
		delay_ms(500);
 8000cb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cb4:	f7ff ffae 	bl	8000c14 <delay_ms>
 8000cb8:	e7ea      	b.n	8000c90 <main+0x4>
 8000cba:	bf00      	nop
 8000cbc:	40011000 	.word	0x40011000
