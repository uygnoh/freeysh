###########################################################
### % interrupt
###########################################################
% Cortex-M3 SVC与PendSV
SVC（系统服务调用，亦简称系统调用）和PendSV（可悬起系统调用），它们多用在上了操作系统的软件开发中。

% SVC用于产生系统函数的调用请求。
例如，操作系统通常不允许用户程序直接访问硬件，而是通过提供一些系统服务函数，让用户程序使用SVC发出对系统服务函数的调用请求，
以这种方法调用它们来间接访问硬件。因此，当用户程序想要控制特定的硬件时，它就要产生一个SVC异常，然后操作系统提供的SVC异常服务程序得到执行，
它再调用相关的操作系统函数，后者完成用户程序请求的服务。


% 【使用PendSV控制上下文切换】
事件流：
1、任务A呼叫SVC来请求任务切换（例如，等到某些工作完成）；
2、OS接收到请求，做好上下文切换的准备，并且悬起一个PendSV异常；
3、当CPU退出SVC后，它立即进入PendSV，从而执行上下文切换；
4、当PendSV执行完毕后，将返回到任务B，同时进入线程模式；
5、发生了一个中断，并且中断服务程序已开始执行；
6、在ISR执行过程中，发生SysTick异常，并且抢占了该ISR；
7、OS执行必要的操作，然后悬起PendSV异常以作好上下文切换的准备；
8、当SysTick退出后，回到先前被抢占的ISR中，ISR继续执行；
9、ISR执行完毕并退出后，PendSV服务程序开始执行，并且在里面执行上下文切换；
10、当PendSV执行完毕后，回到任务A，同时系统再次进入线程模式。



 
###########################################################
### gcc内嵌汇编
###########################################################
% 使用内嵌汇编，要先编写汇编指令模板，然后将C语言表达式与指令的操作数相关联，
% 并告诉GCC对这些操作有哪些限制条件。例如在下面的汇编语句：  
__asm__ __violate__  
("movl %1,%0" : "=r" (result) : "r" (input));  

“movl %1,%0”是指令模板；“%0”和“%1”代表指令的操作数，称为占位符，内嵌汇编靠它们将C语言表达式与指令操作数相对应。

指令模板后面用小括号括起来的是C语言表达式，本例中只有两个：“result”和“input”，
他们按照出现的顺序分别与指令操作数“%0”，“%1，”对应；注意对应顺序：
第一个C表达式对应“%0”；第二个表达式对应“%1”，依次类推，操作数至多有10个，分别用“%0”，“%1”….“%9，”表示。

在每个操作数前面有一个用引号括起来的字符串，字符串的内容是对该操作数的限制或者说要求。

 
“result”前面的限制字符串是“=r”，其中“=”表示“result”是输出操作数，
“r”表示需要将“result”与某个通用寄存器相关联，先将操作数的值读入寄存器，
然后在指令中使用相应寄存器，而不是“result”本身，当然指令执行完后需要将寄存器中的值存入变量“result”，
从表面上看好像是指令直接对“result”进行操作，实际上GCC做了隐式处理，这样我们可以少写一些指令。

 
“input”前面的“r”表示该表达式需要先放入某个寄存器，然后在指令中使用该寄存器参加运算。









