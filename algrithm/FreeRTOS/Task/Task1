/* FreeRTOS静态任务创建方法 */


/* 定义任务栈
栈是单片机RAM中一段连续的内存空间，栈的大小一般在启动文件或者链接脚本中指定，最后由C库函数
__main()进行初始化 
但是在多任务系统中，每个任务都是独立的，互不干扰，所以要为每一个任务都分配独立的栈空间，这个
栈空间通常是一个预先定义好的全局数组， 也可以是动态分配一段连续的内存空间， 但是它们都存在于 
RAM中 */
/* 我们在实现2个变量按照一定的频率轮流翻转，每个变量对应一个任务
那么就需要定义2个任务栈，在多任务系统中，有多少个任务，就定义多少个任务栈*/
/* 任务栈就是1个预先定义好的全局数据，数据类型为StackType
大小由TASK1_STACK_SIZE这个宏来定义，默认为128，单位为字，即512字节，也就是FreeRTOS推荐的
最小任务栈。在FreeRTOS中，凡是涉及数据类型的地方，FreeRTOS都会将标准的C数据类型有typedef重
新定义一个类型名。这些经过重新定义的数据类型放在portmacro.h中。*/
#define TASK1_STACK_SIZE    128
StackType_t Task1Stack[TASK1_STACK_SIZE];
#define TASK2_STACK_SIZE    128
StackType_t Task2Stack[TASK2_STACK_SIZE];


/* 在FreeRTOS中任务由2种创建方法
1 动态创建，任务控制块和栈内存是创建任务时动态分配的，任务删除时，内存可以释放 
2 静态创建，任务控制块和栈内存需要事先定义好，任务删除时，内存不能释放 */


/* 定义任务控制块
在裸机系统中，程序的主体是CPU按照顺序执行的，而在多任务系统中，任务的执行由系统调度的。 系统为
了能够顺利的调度任务，为每一个任务都额外定义了一个任务控制块，这个任务控制块就相当于任务的身份证
里面存放有任务的所有信息，比如任务的栈指针，任务名称，任务形参等。有了这个任务控制块后，以后系统
对任务的全部操作都可以通过这个任务控制块实现。定义一个任务控制块需要一个新的数据类型*/
typedef struct tskTaskControlBlock {
    //栈顶指针，作为TCB的第1个成员
    volatile StackType_t *pxTopOfStack;
    //任务节点，这是一个内置在TCB控制块中的链表节点，通过这个节点，可以将任务控制块挂接到各种
    //链表中。
    ListItem_t xStateListItem;
    //任务栈的起始地址
    StackType_t *pxStack;
    //任务名称为字符串形试，长度由configMAX_TASK_NAME_LEN这个宏来定义，
    char pcTaskName[configMAX_TASK_NAME_LEN];
} tskTCB;
typedef tskTCB TCB_t;


//创建静态任务
typedef void (*TaskFunction_t)(void *); //函数指针类型
TaskHandle_t xTaskCreateStatic(TaskFunction_t pxTaskCode,           /* 任务的入口，任务函数名称 */
                               const char * const pcName,           /* 任务名称，以字符串形式 */
                               const uint32_t ulStackDepth,         /* 任务栈大小，单位为字 */
                               void * const pvParameters,           /* 任务形参 */
                               StackType_t * const puxStackBuffer,  /* 任务栈起始地址 */
                               TCB_t * const pxTaskBuffer)          /* 任务控制块指针 */
{
    TCB_t *pxNewTCB; 
    /* 定义一个任务句柄xReturn，用于指向任务的TCB。任务句柄的数据类型为TaskHandlel_t
    typedef void *  TaskHandlel_t */                                               
    TaskHandle_t xReturn;                                           
    
    if ( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
    {
        pxNewTCB = ( TCB_t * ) pxTaskBuffer;
        pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
        
        /* 新的任务初始化 */
        prvInitialiseNewTask(pxTaskCode,                            /* 任务入口 */
                             pcName,                                /* 任务名称，以字符串形式 */
                             ulStackDepth,                          /* 任务栈大小，单位为字 */
                             pvParamters,                           /* 任务形参 */
                             &xReturn,                              /* 任务句柄 */
                             pxNewTCB);                             /* 任务栈起始地址 */  
    }
    else
    {
        xReturn = NULL;
    }
    
    return xReturn;
}


//新创建的任务初始化
typedef void (*TaskFunction_t)(void *); //函数指针类型
static void prvInitialiseNewTask(TaskFunction_t pxTaskCode,             /* 任务入口 */
                                 const char * const pcName,             /* 任务名称，为字符串形式 */
                                 const unit32_t ulStackDepth,           /* 任务栈大小，单位为字 */
                                 void * const pvParameters,             /* 任务形参 */
                                 TaskHandle_t * const pxCreatedTask,    /* 任务句柄 */
                                 TCB_t *pxNewTCB)                       /* 任务控制块指针 */
{
    StackType_t *pxTopOfStack;
    UBaseType_t x;
    
    /* 获取栈顶地址 */
    pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32-t )1 );
    
    /* 将栈顶指针向下做8字节对齐 */
    pxTopOfStack = ( StackType_t * ) \
                   ( ( (uint32_t)pxTopOfStack ) & ( ~( (uint32_t)0x0007 ) ) );
                   
    /* 将任务名称存储在TCB中 */         
    for ( x = (UBaseType_t)0; x < (UfBaseType_t)configMAX_TASK_NAME_LEN; x++ )
    {
        pxNewTCB->pcTaskName[ x ] = pcName[ x ];
        if ( pcName[ x ] == 0x00;
        {
            break;
        }
    }
    
    /* 任务名称的长度不能超过configMAX_TASK_NAME_LEN, 并以'\0'结尾 */
    pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    
    /* 初始化TCB中的xStateListItem节点，即初始化该节点的链表为空，表示节点还没有插入任何链表 */
    vListInitialiseItem( &(pxNewTCB->xStateListItem) );
    
    /* 设置xStateListItem节点的拥有者，即拥有这个节点本身的TCB */
    listSET_LIST_ITEM_OWNER( &(pxNewTCB->xStateListItem), pxNewTCB );
    
    /* 调用pxPortInitialiseStack()函数初始化任务栈，并更新栈顶指针
       任务第一次运行的环境参数就存在任务栈中
    */
    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack,
                                                    pxTaskCode,
                                                    pvParameters );
    //让任务句柄指向任务控制块                                                
    if ( (void*)pxCreatedTask != NULL )
    {
        *pxCreatedTask = (TaskHandle_t)pxNewTCB;
    }
}


//任务返回函数
static void prvTaskExitError( void )
{
    /* 函数停在这里 */
    for (;;);
}
// RAM栈初始化函数，返回栈顶指针
StackType_t * pxPortInitialiseStack( StackType_t *pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void *pvParameters )
{
    /* 异常发生时，自动加载到CPU寄存器中的内容，包括8个寄存器，
    r0, r1, r2, r3, r12, r14, r15, xPSR, 且顺序不能改变 */
    pxTopOfStack--;
    //xPSR的位24必须为1，即0x01000000
    *pxTopOfStack = portINITIAL_XPSR;
    pxTopOfStack--;
    //任务的入口地址
    *pxTopOfStack = ( (StackType_t)pxCode ) & portSTART_ADDRESS_MASK;
    pxTopOfStack--;
    //任务的返回地址，通常任务是不能返回的，如果返回就跳转到prvTaskExitError
    *pxTopOfStack = ( StackType_t )prvTaskExitError;
    pxTopOfStack--;
    ///* r12, r3, r2, r1默认初始化为0 */
    pxTopOfStack -= 5; 
    *pxTopOfStack = ( StackType_t )pvParameters;
    
    /* 异常发生时，手动加载到CPU寄存器中的内容， r4,r5,r6,r7,r8,r9,r10,r11初始化为0 */
    pxTopOfStack -= 8;
    
    /* 返回栈顶指针， 此时 pxTopOfStack 指向空栈*/
    return pxTopOfStack;
}                                     



/* 实现就绪列表
任务创建好以后，我们就需要把任务添加到就绪列表中，表示任务已经就绪，系统可以随时调度
就绪列表其实是一个List_t类型的数组，数组的大小由决定最大任务优先级的宏configMAX_PRIORITIES
确定。configMAX_PRIORITIES在FreeRTOSConfig.h默认定义为5，最大支持256个优先级，数组的下
标对应任务的优先级，同一优先级的任务统一插入就绪列表的同一条链表中 */
//定义任务就绪列表
List_t pxReadyTasksLists[configMAX_PRIORITIES];

//就绪列表初始化
void prvInitialiseTaskLists(void)
{
    UBaseType_t uxPriority;
    
    for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES;
         uxPriority++)
    {
        vListInitialise(&(pxReadyTasksLists[uxPriority]));
    }
}


/* main.c*/
int main(void)
{
    uint32_t flag1, flag2;
    TCB_t Task1TCB;
    TCB_t Task2TCB;
    void delay(uint32_t count) { for (; count !=0; count--); }
    void Task1_Entry(void *p_arg) {
        for (;;) {
            flag1 = 1;
            delay(100);
            flag1 = 0;
            delay(100);
        }
    }
    void Task2_Entry(void *p_arg) {
        for (;;) {
            flag2 = 1;
            delay(100);
            flag2 = 0;
            delay(100);
        }
    }
}


/* 将任务插入就绪列表*/
//初始化与任务相关列表，如就绪列表
prvInitialiseTaskLists();

Task1_Handle =
xTaskCreateStatic(TaskFunction_t)Task1_Entry,
                  (char *)"Task1",
                  (uint32_t)TASK1_STACK_SIZE,
                  (void *)NULL,
                  (StackType_t *)Task1Stack,
                  (TCB_t *)&Task1TCB);
vListInsertEnd(&(pxReadyTasksList[1]), 
               &(((TCB_t *)(&Task1TCB))->xStateListItem));

Task2_Handle =
xTaskCreateStatic(TaskFunction_t)Task2_Entry,
                  (char *)"Task2",
                  (uint32_t)TASK2_STACK_SIZE,
                  (void *)NULL,
                  (StackType_t *)Task2Stack,
                  (TCB_t *)&Task1TCB);
vListInsertEnd(&(pxReadyTasksList[2]), 
               &(((TCB_t *)(&Task2TCB))->xStateListItem));               



/*实现调度器
调试器是操作系统的核心，其主要的功能是实现任务的切换，即从就绪列表里面找到优先级最高的任务，然
后执行该任务。从代码上看调度器是由几个全局变量和一些可以实现任务切换的函数组成。*/
void vTaskStartScheduler(void)
{
    //手动指定第1个任务
    pxCurrentTCB = &Task1TCB;
    
    //启动调试器
    if (xPortStartScheduler != pdFALSE)
    {
    //调度器起动成功，则不会返回，即不会来到这里
    }
}


/* 在Cortex-M中，内核外设SCB中SHPR3寄存器用于设置SysTick和PendSV的异常优先级
配置PendSC和SysTick的中断优先级为最低，PendSC和SysTick都会涉及到系统调试，系统调度的优先级
要低于系统其它硬件中断的优先级，即优先响应系统中的外部硬件中断，所以endSC和SysTick的中断优先级
配置为最低 */
BaseType_t xPortStartScheduler(void)
{
    //配置PendSC和SysTick的中断优先级为最低
    portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    
    //启动第1 个任务不在返回
    prvStartFirstTask();
    
    //不应该运行到这里
    return 0;
}


//prvStartFirstTask(void)函数用于开始第1个任务
//主要进行2个操作，1是更新MSP的值，2是产生SVC系统调用
__asm void prvStartFirstTask(void)
{
    //当前栈需要8字节对齐，如果都是32位操作，则4字节对齐即可，在Cortex-M中浮点运算是8字节
    PRESERVE8
    
    //在Cortex-M中0xE000ED08是SCB_VTOR寄存器的地址，里面存放的是向量表的起始地址，即MSP
    //的地址，向量表通常是从内部FLASK的起始地址开始存放
    //将立即数0xE000ED08加载到寄存器r0
    ldr r0, =0xE000ED08
    //将地址0xE000ED08指向的内容加载到寄存器r0,此时r0等于SCB_VTOR寄存器的值，为0x00000000
    ldr r0, [r0]
    //将地址0x00000000指向的内容加载到寄存器r0,此时r0等于0x200008DB
    ldr r0, [ro]
    
    //将r0存储到msp，此时msp等于0x200008DB，这是主栈的栈顶指针
    msr msp, r0
    
    //使用CPS指令把全局中断打开
    cpsie i
    cpsie f
    dsb
    isb
    
    //产生系统调用，服务号0表示SVC中断，接下来执行SVC中断服务函数
    svc 0
    nop
    nop
}


#define xPortPendSVHandler  PendSV_Handler
#define xPortSysTickHandler sysTick_Handler
#define vPortSVCHandler     SVC_Handler


__asm void vPortSVCHandler(void)
{
    //声明外部变量pxCurrentTCB，在Task.c中定义的全局指针，
    //用于指向当前正在运行的任务或者即将运行的任务的任务控制块
    extern pxCurrentTCB;
    PRESERVE8
    //加载pxCurentTCB的地址到r3
    ldr r3, =pxCurrentTCB
    //加载r3地址中的内容到r1
    ldr r1, [r3]
    //加载r1地址中的内容到r0
    //任务控制块的第一个地址就是栈顶指针，所以r0就等于栈顶指针
    ldr r0, [r1]
    
    //以r0为基地址，将栈中向上增长的8个字的内容加载到CPU寄存器r4-r11，同时r0也随之自增
    ldmia r0!, {r4-r11}
    //将新的栈顶指针更新到psp，任务执行时使用的栈指针是psp
    msr psp, r0
    isb
    //将寄存器r0清零
    mov r0, #0
    //设置BASEPRI寄存器为0，即打开所有中断
    //BASEPRI是一个中断屏蔽寄存器
    msr basepri, r0
    //当从SVC中断服务退出前，通过向r14寄存器最后4位按位或上0x0D，
    //使得硬件在退出时使用进程栈指针psp完成出栈操作并返回后进入任务模式，返回Thumb状态
    //在SVC中断服务中使用的是MSP栈指针，处于ARM状态
    orr r14, #0xd
    
    //异常返回，这时出栈使用的是psp指针，自动将栈中剩余的内容加载到CPU寄存器
    //xPSR, PC, r14, r12, r3, r2, r1, r0
    bx r14
}


/* 任务切换
任务切换就是在就是在就绪列表中，寻找优先级最高的任务，然后执行该任务。*/
#define taskYIELD()     portYIELD
/* 在portmacro.h中定义
中断控制状态寄存器：0xE000ED04
Bit28位 PendSV挂起位 */
#define portNVIC_INT_CTRL_REG   (*((volatile uint32_t *)0xE000ED04))
#define portNVIC_PENDSVSET_BIT  (1UL << 28UL)
#define portSY_FULL_READ_WRIT   (15)
/* portYIELD()函数的实现其实很简单
实际就是将PendSV的悬起位置1，当没有其它中断运行时响应PendSV中断，去执行我们写好的
PendSV中断服务函数，在这里面实现任务的切换 */
 #define portYIELD()                                    \
 {                                                      \
     portNVIC_INT_CRTL_REG = portNVIC_PENDSVSET_BIT;    \
     __dsb(portSY_FULL_READ_WRITE);                     \
     __isb(portSY_FULL_READ_WRITE);                     \
 }


 /* xPortPendSVHandler函数
 PendSV中断服务函数xPortPendSVHandler()是真正实现任务切换的地方 */
__asm void xPortPendSVHandler(void)
{
    //声明外部变量pxCurrentTCB，pxCurrentTCB是一个在tasks.c中定义的全局指针，
    //用于指向当前正在运行的任务或即将运行的任务的任务的控制块
    extern pxCurrentTCB;
    //声明外部函数vTaskSEitchContex()
    extern vTaskSwitchContext;
    //当前栈需要8字节对齐，在Cortex-M中浮点运算是8字节
    PRESERVE8

    //将psp的值存储到r0
    //当进入PendSVHandler时，上一个任务运行环境即xPSR,PC,r14,r12,r3,r2,r1,r0,
    //这些CPU寄存器的值会自动存储到任务栈中，剩下的r4-r11需要手动保存，同时psp会自动
    //更新，
    mrs r0, psp
    isb

    //加载pxCurentTCB的地址到r3
    ldr r3, =pxCurrentTCB
    //加载r3指向的内容到r2，即r2等于pxCurrentTCB
    ldr r2, [r3];

    //以r0作为基址，指针先递减再操作，将CPU寄存器r4-r11的值存储到任务栈中，同时更新r0
    stmdb r0!, {r4-r11}
    //将r0的值存储到r2指向的内容，r2等于pxCurrentTCB
    //具体为将r0的值存储到上一个任务的栈顶指针pxTopOfStack,
    //上下文切换，上文保存就完成了
    str r0, [r2]


    //将r3和r4临时压入栈中，（在整个系统中，中断使用的是主栈，栈指针使用的是MSP）
    //因此接下来要调用函数vTaskSwitchContext()，调用函数时，返回地址自动保存到
    //r14中，所以一旦调用发生，所以一旦调用发生，r14的值就会被覆盖（PendSV中断
    //服务函数执行完毕后，返回时需要根据r14的值来决定返回处理器模式还是任务模式工，出
    //栈使用的是PSP还是MSP。因此需要入栈保护，）
    //r3保存的是当前正在运行的任务，（准确来说是上文，因为接下来要切换到新的任务）
    //的TCB指针（pxCurrentTCB）地址，函数调用后pxCurrentTCB的值也会被更新，后面还
    //需要r3来操作pxCurrentTCB,但是运行函数vTaskSwitchContext()时不确定会不会使
    //用到r3寄存器来作为中间变量，所以为了保险起间，将r3也入栈
    stmdb sp!, {r3, r14}


    //将configMAX_SYSCALL_INTERRUPT_PRIORITY的值存储到r0
    //该宏在FreeRTOSConfig.h中定义，用来配置中断屏蔽寄存器basepri的值，高4位有效
    //目前配置为191，因为高4位有效，所以实际值是11，即优先级高于或等于11的优先级都会
    //被屏蔽。 在关中断方面FreeRTOS与其它RTOS关中断不同，是操作BASEPRI寄存器来预留
    //一部分中断
    mov r0, #configMAX_SYSCALL_INIERRUPT_PRIORITY
    //关中断，进入临界段，因为下来要更新全局指针pcCurrentTCB的值
    msr basepri, r0
    dsb
    isb

    //调用函数vTaskSwitchContext，该函数在Task.c中定义的全局指针，
    //作用只有一个，选择优先级最高的任务，然后更新pxCurrentTCB
    bl vTaskSwitchContext

    //退出临界段，开中断，直接向basepri中写0
    mov r0, #0
    msr basepri, r0

    //从主栈中恢复寄存器r3， r14的值要，此时的sp使用的是MSP
    ldmia sp!, {r3, r14}

    //加载r3指向的内容到r1，r3存放的是pxCurentTCB的地址，即让r1等于pxCurentTCB
    //pxCurentTCB在上面vTaskSwitchContext（）函数中被更新，指向了下一个要运行的任务TCB
    ldr r1, [r3]

    //加载r1指向的内容到r0，即下一个要运行任务的栈顶指针，
    ldr r0, [r1]

    //以r0为基地址，将下一个要运行的任务的任务栈内容加载到CPU寄存器r4-r11中
    ldmia r0!, {r4-r11}
    //更新PSP的值，等异常退出时，会以PSP作为基地址，将任务栈中剩下的内容加载到CPU寄存器
    msr psp, r0
    isb

    //异常发生时，r14保存异常返回标志，包括返回进入任务模式还是处理器模式，使用PSP还是MSP
    //此时r14等于0xFFFFFFFD，表示异常返回进入任务模式，sp以PSP作为栈指针出栈，出栈完毕后
    //PSP指向任务栈的栈顶，当调用 bx r14指令后，系统以PsP作为sp指针出栈，接下来要运行的新
    //的任务的任务栈中剩下的内容加载一到CPU寄存器。
    //r0, r1, r2, r3, r12, r14, r15, xPSR,从而切换到新的任务
    bx r14
    nop
}






