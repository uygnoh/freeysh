###########################################################
### % MCS-8051->存储系统
###########################################################
### % 内部数据存储器
1 内部数据存储器分为低128个单元和高128个单元
2 低128个单元称为内部RAM, 可以被用户使用
3 高128个单元为专用寄存器(SFR)区, 不能被用户使用


### % 低128个单元
1 00H~1FH ->为通用寄存器区R0~R7(分为4组)
2 20H~2FH ->为位寻址区(128个位)
3 30H~7FH ->为用户RAM区(数据缓冲区, 堆栈区)(共有80个单元)


### % 高128个单元
1 A       ->累加器(8bit)
2 B       ->寄存器(8bit)
3 PC      ->程序计数器(16bit)(64K)
4 PSW     ->程序状态字(8bit)(RS1, RS2配置工作寄存组)
5 DPTR    ->数据指针(16bit)(高位字节DPH + 低位字节DPL)
4 SP      ->堆栈指针(8bit)(系统复位时SP=07H)(SP应该设置为30H之后)(SP向上生长)


### % 内部程序存储器ROM
1 0000H~0002H   % 系统启动单元，单片机复位后(PC=0000H)
2 0003H~000AH   % 外部中断0地址区
3 000BH~0012H   % 定时/计数器0中断地址区
4 0013H~001AH   % 外部中断1地址区
5 001BH~0022H   % 定时/计数器1中断地址区
6 0023H~002AH   % 串行中断地址区



###########################################################
### % MCS-8051->时钟与复位
###########################################################
### % 8051时序
1 振荡周期, p
为单片机提供时钟信号的振荡源的周期，也称节拍，用P表示
如果为内部时钟方式，振荡周期即为石英晶体的振荡周期

2 时钟周期, S
将2个振荡周期结合一起，形成时钟周期(P1+P2)
也就是说时钟周期是振荡周期的2倍

3 机器周期
通常将完成一个基本操作所需要的时间称为机器周期
MCS-51中1个机器周期含有6个时钟周期

4 指令周期
是指CPU执行一条指令所需要的时间
一个指令周期通常含有1~4个机器周期


### % 若MCS-51单片机外接晶振为12MHz, 则
振荡周期 = 1/(12MHz) = 1/12us = 0.0833us
时钟周期 = 振荡周期*2 = 1/6us = 0.167us
机器周期 = 时钟周期*6 = 振荡周期*12 = (1us)
指令周期 = 1~4us


### % MCS-51单片机复位
0 % 冷启动 ->当系统初始加电的时候, 上电复位
1 % 热启动 ->当程序运行死机的时候, 按钮复位
2 % 单片机复位条件



###########################################################
### % MCS-8051->指令系统
###########################################################
### % MCS-8051汇编语言格式:   
[标号:] 操作码助记符 [目的操作数,] [源操作数] [;注释]


### % MCS-8051描述符
Rn          % 当前选中的寄存器组的8个寄存器R0~R1(n=0~7)
Ri          % 当前选中的寄存器组中的可以作为间接寻址寄存器使用的2个工作寄存器(R0,R1)
direct      % 8位的内部数据存储器单元中的地址，(内部RAM地址或专用寄存器地址)
#data       % 包含在指令中的8位立即数
#data16     % 包含在指令中的16位立即数
addr16      % 16位的目的地址
addr11      % 11位的目的地址
rel         % 8位有符号的偏移字节，简称偏移量(-128~127)
16进制操作数以字符A~F中的某个开头时，则需要在它
前面加一个“0”，以便在汇编时把它和字符A~F区别开来
例如： #0FH  % 16进制立即数


### % MCS-8051伪指令
1 % ORG
起始伪指令Origin，指明程序的起始地址

2 % END

3 % EQU
X1 EQU 2000H
X2 EQU 0FH
MOV DPTR, #X1

4 % DB(Define Byte)
DB A5H

4 % DW(Define Word)
DW "AA"



###########################################################
### % MCS-8051->寻址方式
###########################################################
1 % 寄存器寻址
MOV A, R0

2 % 直接寻址
MOV A, 3AH

3 % 立即数寻址
MOV A, #3AH

4 % 位寻址(RAM位寻址区20H~2FH)(位寻址区范围00H~7FH)
MOV C, 3AH

5 % 寄存器间接寻址
MOV R0, 3AH     ; % 把3AH单元的内容送累加器R0中
MOV A, @R0      ; % 以R0寄存器内容3AH为地址，
                  % 把该地址单元的内容送累加器A中

6 % 变址寻址(是为了访问程序存储器中的数据表格)
80C51的变址寻址以DPTR或PC作为基址寄存器，以累加器A作为变址寄存器，
并以两者内容相加形成的16位地址作为操作数地址，以达到访问数据表格的目的。
MOVC A, @A+DPTR ; % 把DPTR和A的内容相加得到一个程序存储器地址，
                  % 再把该地址单元的内容送累加器A
                  % 因此，符号@应理解为是针对“A+DPTR”的，而不是针对A的。
MOVC A, @A+PC
JMP @A+DPTR     ; % 无条件转移指令

7 % 相对寻址
目的地址 = 转移指令地址 + 转移指令字节数 + rel



###########################################################
### % MCS-8051->指令集
###########################################################
1 % 数据传送指令(8)
MOV, MOVX, MOVC, XCH, XCHD, SWAP, PUSH, POP


2 % 算术运算指令(24)
% 算术运算指令结果影响PSW的有关位
CY      % 进位标志位(在加减法中存放进位和借位，在移位操作中也可能用到)
AC      % 半进位标志位(表示低4位对高4位有进位或借位时的标志位)
F0      % 用户标志位，由用户进行定义和使用
OV      % 溢出标志位
        % (加法运算中，OV=1，表示运算结果超过A的表示范围)
        % (乘法运算中，OV=1，表示乘积存放在A和B中)
        % (除法运算中，OV=1，表示除数为0，无法进行计算)
P       % 奇偶标志位，表示累加器A中“1”的个数，若1的个数为偶数，则P=0       
ADD A, R0
如果“位3”有进位，则半进位标志位AC置“1”，否则清零
如果“位7”有进位，则进位标志位  CY置“1”，否则清零
如果两个数相加溢出，则OV置“1”，否则清零


2 % 位操作指令()


3 % 转移操作指令()
DJNZ RN, REL 
是一条件转移指令，先将工作寄存器Rn中的数减“1”，判断结果是否为“0”，
不为“0”程序就跳转到行标为REL的地方执行，否则，为“0”就不转移，继续执行下一条指令



###########################################################
### % MCS-8051->中断系统
###########################################################
% 通过8051单片机P1口控制8个LED做左移和右移发光
% 当中断来时(按下/INT0), 使8个LED闪烁5次
    ORG     0000H
    AJMP    MAIN
    ORG     0003H       ; % 外部中断0的中断入口地址
    AJMP    EXT0        ; % 跳转到中断服务程序
    
; % 主程序开始    
    ORG     0030H       ; % 给出MAIN标号的地址
MAIN:
    SETB    EA          ; % 打开中断总开关
    SETB    EX0         ; % 打开外部中断0中断开关
    MOV     SP, #70H    ; % 重新设置堆栈指针


LOOP:
    MOV     A, #0FFH    ; % 左移初值
    MOV     R2, #08H    ; % 设置左移8次
    CLR     C           ; % CY位清零(利用循环移位)   
LP1:
    RLC     A           ; % 带进位标识位的左移
    MOV     P1, A       ; % 输出至P1口
    ACALL   DELAY       ; % 延时0.2秒
    DJNZ    R2, LP1     ; % 左移继续，移动8次
    MOV     R2, #07H    ; % 左移结束，设置右移7次
LP2:
    RRC     A           ; % 带进位标识位的右移
    MOV     P1, A       ; % 输出至P1口
    ACALL   DELAY       ; % 延时0.2秒
    DJNZ    R2, LP2     ; % 右移继续，移动8次
    AJMP    LOOP        ; % 重复循环，左移和右移


; % 中断服务程序
EXT0:
    PUSH    ACC         ; % 保护现场
    PUSH    PSW         ; %
    SETB    RS0         ; % 选择工作寄存器组1
    CLR     RS1         ; %
    MOV     A, #00H     ; % 设置LED全亮
    MOV     R2, #0AH    ; % 闪烁5次，亮灭10次
LP3:
    MOV     P1, A       ; % 输出至P1口
    ACALL   DELAY       ; % 延时0.2秒
    CPL     A           ; % 取反，灯灭/亮
    DJNZ    R2, LP3     ; % 
    POP     PSW         ; % 恢复现场
    POP     ACC         ; % 
    RETI                ; % 中断返回
    
    
; % 延时0.2秒子程序 
DELAY:  
    MOV     R5, #20
D1:     
    MOV     R6, #20
D2:     
    MOV     R7, #20
D3:     
    DJNZ    R7, D3
    DJNZ    R6, D2
    DJNZ    R5, D1
    RET                 ; % 延时子程序返回
    END                 ; % 程序结束


___________________________________________________________    
编写程序，当接收到外部中断1的中断请求后，用P1口控制8个共阳极发光二极管
发光，实现暗点以大约1MHz频率由上到下循环移动30秒
注意：共阳极的暗点，引脚输出为高电平
___________________________________________________________
    ORG     0000H
    AJMP    MIAN
    ORG     0013H
    AJMP    EXT1        ; % 外部中断1的中断入口地址
    
    ORG     0030H
MAIN:
    SETB    EA          ; % 打开中断总开关
    SETB    EX1         ; % 打开外部中断1中断开关
    MOV     SP, #70H    ; % 重新设置堆栈
; % 主程序
; % 。。。

EXT1:
    MOV     R1, #30     ; % 30秒计数初始值
    MOV     P1, #0FFH   ; % 对P1初始化为全亮
    MOV     A, #01H     ; % 暗点引脚为高电平
LOOP:
    ACALL   DELAY1S     ; % 延时1秒
    RL      A           ; % 循环左移
    MOV     P1, A       ; % 
    DJNZ    R1, LOOP    ; % 30秒计数
    RETI                ; % 中断返回
    END


    
###########################################################
### % MCS-8051->定时器
###########################################################    
1 % TCON(定时器控制寄存器)(可以进行位寻址)
bit7    bit6    bit5    bit4    bit3    bit2    bit1    bit0
8FH     8EH     8DH     8CH     8BH     8AH     89H     88H
TF1     TR1     TF0     TR0     IE1     IT1     IE0     IT0


TF1(TCON.7)     % 定时器T1中断请求溢出标志位
TF0(TCON.5)     % 定时器T0中断请求溢出标志位
% 当计数定时器产生溢出时，相应溢出标志位由(硬件置“1”)，表示定时/计数已完成
% 它是提供查询的状态位。采用查询方式时，(由软件清零)
% 中断方式时，(由硬件清零)


TR1(TCON.6)     % 定时器T1运行控制位
TR0(TCON.4)     % 定时器T0运行控制位
% TR1=0(关闭TR1); TR1=1(启动TR1); (由软件置位或清零)


2 % TMOD(定时器方式选择控制寄存器)(不能进行位寻址)
        定时计数器1                 定时计数器0
_____________________________|_____________________________
bit7    bit6    bit5    bit4    bit3    bit2    bit1    bit0
B7H     B6H     B5H     B4H     B3H     B2H     B1H     B0H
GATE    C/T     M1      M0      GATE    C/T     M1      M0
    
    
% GATE 门控位
“0”     % 不用外部门，只将TR0/TR1来启动定时器
“1”     % 使用外部门，外部请求信号INT0/INT1(高电平)和TR0/TR1(置“1”)共同来启动定时器
    
    
% C/T   定时器/计数器方式选择位
“0”     % 定时器
“1”     % 计数器
    
    
% M1, M0工作方式选择位
M1 M0   工作方式    功能说明
“0 0”   工作方式0   % 13位定时器/计数器(TL0低5位, TH0高8位)
“0 1”   工作方式1   % 16位定时器/计数器
“1 0”   工作方式2   % 自动填充8位定时器/计数器
“1 1”   工作方式3   % 定时器0和定时器1的功能是不一样的
    
    
3 % 定时计数工作在方式0下是13位(计数范围1~8192)
定时工作方式时，定时时间的计算公式为：
    定时时间 = (8192-计数初值)*晶振周期*12 = (8192-计数初值)*机器周期
% 若晶振频率为6MHz，1个机器周期为： 1/(6*10^6) x 12 =2us
则最小定时时间为：   2^13 - (2^13-1) x2us = 2us
则最大定时时间为：   (2^13-0) x2us = 16384us =16.384ms
    
    
4 % 定时器工作方式3(M1M0=11)
% 只用于定时器0，T0被分为两个独立的8位计数器
% 定时/计数0在工作方式3时，由于TF1被占用，定时/计数1中能工作在工作方式0,1,2中   
    
    

___________________________________________________________ 
设单片机晶振频率Fosc=6MHz，使用定时器1以方式0，产生周期为200us的等宽正方波脉冲，
并由P1.0输出。要求以查询方式完成。
1 % 计算计数初值
欲产生200us的等宽正方波脉冲，只需在P1.0端口以100us为周期交替输出高低电平即可实现
为此定时时间应为100us。使用6MHz晶振，则一个机器周期为2us
方式0为13位计数结构，计数最大值为8192.
设待求的计数初值为x，则：(8192-x)x2us = 100us
求解得：x=8142
% 低5位(OEH), 高8位(FEH)

2 % TMOD寄存器初始化
设置定时器/计数器1的工作方式为0，则M1M0=00
为实现定时功能，C/T=0
为实现定时器/计数器1的运行控制，则CATE=0

2 % TCON寄存器初始化
TR1=1；启动定时器1
___________________________________________________________
    
    MOV     TMOD, #00H      ; % 设置TMOD寄存初始值
    MOV     TH1, #0FEH      ; % 设置定时器的计数初值为8142
    MOV     TL1, #OEH       ; % 
    SETB    TR1             ; % 启动定时器1
LOOP1:
    JBC     TF1, LOOP2      ; % 查询定时器1的溢出标志位；若为“1”，则清零并跳转
    SJMP    LOOP1
LOOP2:
    MOV     TH1, #0FEH      ; % 重新设置计数初值
    MOV     TL1, #OEH       ; % 
    CLR     TF1             ; % 将溢出标志位TF1清“0”
    CPL     P1.0            ; % P1.0口输出取反
    SJMP    LOOP1
    

___________________________________________________________
使用定时器1以方式0，产生周期为500us的等宽正方波脉冲
并由P1.0输出。编程用中断方式实现
___________________________________________________________
    ORG     0000H
    LJMP    MAIN
    ORG     001BH       ; % 定时器T1中断
    LJMP    TOINT1
    
    ORG     0030H
MAIN:
    MOV     TMOD, #00H  ; % 定时器1为定时功能
    MOV     TH1, #0FCH  ; % 设置定时器的计数初值
    MOV     TL1, #03H
    SETB    EA          ; % 打开中断总开关
    SETB    ET1         ; % 打开定时器1中断开关
    SETB    TR1         ; % 打开定时器1
    SJMP    $

; % 定时器1中断服务程序
TOINT1:
    MOV     TH1, #0FCH      ; % 重新设置计数初值
    MOV     TL1, #03H       ; % 
    CPL     P1.0            ; % P1.0口输出取反
    RETI                    ; % 中断返回(中断标志位由硬件自动清零)



___________________________________________________________
使用定时器0以方式2，产生周期为200us的等宽正方波脉冲
并由P1.0输出。编程用中断方式实现
___________________________________________________________
    ORG 0000H
    LJMP MAIN
    ORG 000BH
    LJMP TOINT0 ; % 定时器T0中断入口
    
    ORG 0030H
MAIN:
    MOV TMOD, #00000010B ; % T0定时功能，工作方式2
    MOV TH0, #0CEH ; % 计数初值，50x2us=100us, 256-50=201
    MOV TL0, #OCEH ; % 工作方式2，两个初值一样
    SETB EA        ; % 打开中断总开关
    SETB ET0       ; % 打开定时器0中断
    SETB TR0       ; % 启动定时器0
    SJMP $


; % 定时器工作方式2，中断服务了程序
TOINT0:
    CPL P1.0
    RETI









