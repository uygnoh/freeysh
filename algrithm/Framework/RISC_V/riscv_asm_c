###########################################################
### % 函数调用规范(Calling convention)
###########################################################
函数调用过程通常分为 6 个阶段[Patterson and Hennessy 2017]。
1.将参数存储到函数能够访问到的位置;
2.跳转到函数开始位置(使用 RV32I 的 jal 指令);
3.获取函数需要的局部存储资源,按需保存寄存器;
4.执行函数中的指令;
5.将返回值存储到调用者能够访问到的位置,恢复寄存器,释放局部存储资源;
6.返回调用函数的位置(使用 ret 指令)。
% 为了获得良好的性能,变量应该尽量存放在寄存器而不是内存中,但同时也要注意避免
% 频繁地保存和恢复寄存器,因为它们同样会访问内存。
1 发生函数调用时，在执行函数功能前，先将这次调用中
  需要用到的参数保存，方便取用
2 将控制权移交给这次调用的功能函数
3 根据情况为函数申请一定的本地存储空间，以满足函数
  执行过程中需要的存储需求
4 执行该函数的功能操作
5 在函数执行完成后，将得到的结果数据存放好，便于
  主里程来获取，同时还原函数执行过程中使用到的
  寄存器值，释放分配给函数的本地存储空间
6 将控制权返回给还进程

% a0~a7 编号x10~x17的寄存器，用来向调用的函数传递参数
% a0和a1寄存器常用于传递返回值

% ra，即x1寄存器，用来保存返回时的返回地址值

% s0~s11，对应的编号x8-x9和x18~x27的寄存器用来作为保存寄存器，
% 保存原进程中的关键数据避免在函数调用过程中被破坏


jal指令意为“跳转并链接”
通过jal指令，可以形成指向调用点的地址或链接，从而使函数能返回正确的地址。
跳转则会使PC跳转指向被调用函数的地址，并且将链接得到的下一指令的地址作为返回地址，
保存在ra寄存器中。



###########################################################
### % 汇编器
###########################################################
.text                   :进入代码段。
.align 2                :后续代码按 2 2 字节对齐。
.globl main             :声明全局符号“main”
.section .rodata        :进入只读数据段
.balign 4               :数据段按 4 字节对齐。
.string “Hello, %s!\n”  :创建空字符结尾的字符串。
.string “world”         :创建空字符结尾的字符串。

