###########################################################
###  % 程序结构
###########################################################
1 汇编语言的源文件后缀名为”.s“。
  程序以段为单位组织代码，可以分为数据段和代码段，
  代码段的内容为执行代码，数据段存放代码运行时需要用到的数据。
  
2 一个汇编程序至少有一个代码段，当程序较长时，可以分割为多个代码段和数据段。
  多个段在程序编译链接时最终形成一个可执行的映象文件。
  链接器根据系统默认或用户设定的规则，将各个段安排在存储器中相应位置。
  
3 因此源程序中段之间的相应位置与可执行的映象文件中段的相对位置一般不会相同。



###########################################################
### % 可执行映象文件通常由以下几部分组成
###########################################################
1 一个或多个代码段，代码段的属性为只读
2 零个或多个包含初始化数据的数据段，数据段的属性为可读可写。
3 零个或多个不包含初始化数据的数据段，数据段的属性为可读可写。
4 在汇编语言程序中，用AREA伪指令定义段，并说明所定义段的相关属性。
  ENTRY伪指令标识程序的入口点，接下来为指令序列，程序的末尾为END伪指令，
  该伪指令告诉编译器源文件的结束。
5 每一个程序段都必须有一条END指令，指示代码段的结束 。



###########################################################
###  % 子程序的调用
###########################################################
% 在ARM汇编语言程序中，子程序的调用一般是通过BL指令来实现的。

使用格式：   BL 子程序名
1 运行时，将子程序的返回地址存放在连接寄存器LR中，
  同时将程序计数器PC指向子程序入口点，
  当子程序执行完毕需要返回调用处时，
  只需要将LR中的返回地址重新复制给程序计数器PC即可。
2 在调用子程序的同时，也可以完成参数的传递和从子程序返回运算结果，
  通常可以使用R0～R3来完成。
  
以下是使用BL指令调用子程序的汇编语言源程序的基本结构：
AREA Init, CODE, READONLY
ENTRY
Start
    LDR R0, =0x3FF5000
    LDR R1, 0xFF
    STR R1, [R0]
    LDR R0, =0x3ff5008
    LDR R1, 0x01
    STR R1, [R0]
    BL  Next
    ...
    Next
        ...
        MOV PC, LR
    ...
END
    


###########################################################
###  % 汇编语言描述
###########################################################
1 汇编语言(Assembly Language)是一种用于电子计算机，微处理器，微控制器
  或其它可编程器件的低级语言，又称为“符号语言”。
2 在汇编语言中，用助记符代替机器指令的操作码，
  用地址符号或标号代替指令或操作数的地址。
3 在不同的设备中，汇编语言对应着不同的机器语言指令集，
  通过汇编过程转换成机器指令。一般情况下，不同平台之间不可直接移植。
4 它通常被用在底层，硬件操作和高要求的程序优化的场合。
  驱动程序，嵌入式操作系统和实时运行程序都需要汇编语言。
5 伪指令(Pseudo instruction)用于告诉汇编程序如何进行汇编的指令
  它既不控制机器的操作也不被汇编成机器码，
  只能为汇编程序所识别并指导汇编如何进行，
  并将相对于程序或相对于寄存器的地址载入寄存器中。
6 最早macro来源于“macro-assemblers”,
  意思是可以将一系列的计算机指令作一个程序那样使用，
  使用简单又能满足复杂要求。




###########################################################
% ARM与Thumb汇编语言的语句格式
% {标号}{指令或伪指令}{;注释}
###########################################################
注意：每一条指令的助记符可以全部用大写，或者全部用小写。
      但不可以在一条语句中大小写混用。

另外，若一条语句太长，可将其分为若干行来书写，
在行末用续行符“\”表示下一行与本行为同一条语句。



###########################################################
### % 汇编语言中的符号
###########################################################
1 符号在其作用范围内必须唯一。
2 符号名不能与系统的保留字相同。
3 符号名不能与指令或伪指令相同。
4 符号区分大小写，同名的大，小写符号会被认为是两个不同的符号。



###########################################################
### % 符号常量
###########################################################
程序中的常量是指在程序运行过程中不能被改变的量。
在ARM(Thumb)汇编程序所支持的常量有：数字常量，逻辑常量，字符常量。

1 数字常量一般为32位整数，
  当作为无符号数时，其取值范围为0～2^32-1,
  当作为有符号数时，其取值范围为-2^32～2^32-1
2 逻辑常量只有两种取值情况：真或假
3 字符串常量为一个固定的字符串。



###########################################################
### % 符号变量
###########################################################
程序中的变量是指在程序运行过程中可以改变的量。
在ARM(Thumb)汇编程序所支持的变量有以下3种。

1 数字变量用于在程序的运行中保存数字值，
  但注意数字值的大小不应超出数字变量所能表示的范围。
2 逻辑变量用于在程序的运行中保存逻辑值，
  逻辑值只有两种取值情况；真或假
3 字符串变量用于在程序运行中保存一个字符串，
  但注意字符串的长度不应该超出字符串变量所能表示的范围。



###########################################################
### % 变量的代换
###########################################################
程序中的变量通过代换操作取得一个常量，代换操作符“$”
1 代换操作符放在数字变量前，编译器会将该数字变量的值转换为16进制的字符串，
  并将该16进制的字符串代换“$”后的数字变量。
2 代换操作符放在逻辑变量前，编译器会将该逻辑变量代换为它的取值(真或假)
3 代换操作符放在字符串变量前，编译器会将该字符串变量代换“$”后面的字符串变量。

LCLS S1                     ;定义局部变量 S1,S2
LCLS S2
S1 SETS "Test!"
S2 SETS "This is a $S1"     ;字符串S2的值为: "This is a Test!"



###########################################################
### % 汇编语言中的表达式和运算符
###########################################################
在汇编语言高计中，表达式一般由变量，常量，运算符和括组成。
常用的表达式有算术运算表达式，移位运算表达式，位逻辑运算表达式
关系运算表达式，逻辑运算表达式，字符串表达式。
___________________________________________________________
% 算术运算表达式(数)
X+Y                             ;表示X与Y的和
X-Y                             ;表示X与Y的差
X*Y                             ;表示X与Y的乘积
X/Y                             ;表示X除以Y的商
X:MOD:Y                         ;表示X除以Y的余数

___________________________________________________________
% 移位运算表达式(数)
X: ROL: Y                       ;表示X循环左移Y位
X: ROR: Y                       ;表示X循环右移Y位
X: SHL: Y                       ;表示X左移Y位
X: SHR: Y                       ;表示X右移Y位

___________________________________________________________
% 位逻辑运算表达式(数)
X: AND: Y                       ;表示X和Y按位作逻辑与的操作
X: OR: Y                        ;表示X和Y按位作逻辑或的操作
X: NOT: Y                       ;表示X和Y按位作逻辑非的操作
X: EOR: Y                       ;表示X和Y按位作逻辑异或的操作

___________________________________________________________
% 关系运算表达式
X=Y                             ;表示X等于Y
X>Y                             ;表示X大于Y
X<Y                             ;表示X小于Y
X>=Y                            ;表示X大等于Y
X<=Y                            ;表示X小于等于Y
X/=Y                            ;表示X不等于Y
X<>Y                            ;表示X不等于Y

___________________________________________________________
% 逻辑运算表达式(真或假)
X: LAND: Y                      ;表示X和Y作逻辑与的操作
X: LOR: Y                       ;表示X和Y作逻辑或的操作
X: LNOT: Y                      ;表示X和Y作逻辑非的操作
X: LEOR: Y                      ;表示X和Y作逻辑异或的操作
___________________________________________________________
% 字符串运算符及表达式
字符串表达式一般由字符串常量，字符串变量，运算符和括号构成。
编译器所支持的字符串最大长度为512字节。

1 LEN运算符，返回字符串的长度(字节数)，以X表示字符串表达式，格式：
    :LEN: X
2 CHR运算符，将0～255之间的整数转换为一个字符，以M表示某一个整数。格式：
    :CHR: M
3 STR运算符，将一个数字表达式或逻辑表达式转换为一个字符串。
  对于数字表达式，STR运算符将其转换为一个16进制组成的字符串，
  对于逻辑表达式，STR运算符将其转换为字符串“T”或“F”
    :STR: X
4 LEFT运算符，返回某个字符串左端的一个子串，格式：
    X: LEFT: Y
    注意：X为源字符串，Y为一个整数，表示要返回的字符个数。


___________________________________________________________
% 其它运算符

?运算符，返回某代码行所生成的可执行代码的长度。格式：
?X
注意：返回定义符号X的代码行所生成的可执行代码的字节数。

DEF运算符，判断是否定义某个符号，格式：
:DEF:X
注意：如果符号X已经定义，结果为真，否则为假。





